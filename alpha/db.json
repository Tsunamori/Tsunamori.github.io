{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/Wikitten/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/images/SitePreview.png","path":"images/SitePreview.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/images/mobile1.png","path":"images/mobile1.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/images/mobile2.png","path":"images/mobile2.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.eot","path":"libs/fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.svg","path":"libs/fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.ttf","path":"libs/fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff","path":"libs/fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff2","path":"libs/fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","path":"libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","modified":0,"renderable":1},{"_id":"source/img/image_1679471507318_0.png","path":"img/image_1679471507318_0.png","modified":0,"renderable":0},{"_id":"source/img/service-mesh-arch.png","path":"img/service-mesh-arch.png","modified":0,"renderable":0},{"_id":"source/img/image_1679910592101_0.png","path":"img/image_1679910592101_0.png","modified":0,"renderable":0},{"_id":"source/img/image_1679910972280_0.png","path":"img/image_1679910972280_0.png","modified":0,"renderable":0},{"_id":"source/img/Screenshot_2023-04-07_10-40-10.png","path":"img/Screenshot_2023-04-07_10-40-10.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1623940988365},{"_id":"source/_posts/Note-JAVA代码审计-入门篇.md","hash":"56ad89b5cf0e9611b28b05f6e1a0bfd4e0b20274","modified":1676874966537},{"_id":"source/_posts/Notes_0-to-1-the-road-of-CTFer_1.md","hash":"b736d5ab5f09ccf2206b664ec1e419a7f056331d","modified":1676874956985},{"_id":"source/_posts/Notes_HowToHunt-md.md","hash":"5e44ec5a2ee185dbdf1c8041186ef89a01b3c758","modified":1676874947029},{"_id":"source/_posts/Notes_代码审计-企业级web代码安全结构.md","hash":"061fc833062751af3a67a1f3c1258c36ef95231b","modified":1676874930601},{"_id":"source/_posts/blog重构啦.md","hash":"a3a0b5a6df8400e80d4a67d61a477b2fc998c588","modified":1676874672497},{"_id":"source/_posts/kali的VPN代理软件选择.md","hash":"7347a87922e7b911708711bb31d2cad54d12248e","modified":1676874694617},{"_id":"source/_posts/一次差点翻车的v2raya版本更新经历.md","hash":"91cf01258929364fca60113f51d1c7d8aea24739","modified":1684138549148},{"_id":"source/_posts/偷学的渗透小tips.md","hash":"5e83e6a53d587909e7169e0cd00e74625662ff4b","modified":1676874916249},{"_id":"source/_posts/现阶段对blog的规划思考.md","hash":"af972015ae247b425bae06113c38df632f5c05ee","modified":1676874863973},{"_id":"source/_posts/试玩Game-of-hacks.md","hash":"2db8ebf2432fce07b047d2dff3bb6cee987d8230","modified":1676874904389},{"_id":"source/about/index.md","hash":"774352104d1f1204f19e9ea1130fe1301eba306c","modified":1676875409585},{"_id":"source/categories/index.md","hash":"c6b2a54f03be81c5b02079883693fbc5811ec2c5","modified":1623940988365},{"_id":"source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1623940988365},{"_id":"themes/Wikitten/.gitignore","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1623941794597},{"_id":"themes/Wikitten/README.md","hash":"8c9fc9b9ebdf37c9289a4e1d72ac8aedbe23316c","modified":1623940988365},{"_id":"themes/Wikitten/README_zh-CN.md","hash":"8a4e600ff1f75007df8facf15a9c127aafec5e18","modified":1623940988365},{"_id":"themes/Wikitten/_scaffolds/embed.md","hash":"0830c3a5b134fbd21a6ddeda141a4de8345cabb1","modified":1623940988365},{"_id":"themes/Wikitten/_scaffolds/post.md","hash":"af892af6f7dafdd617c5aa17ee91e9e445d20fa4","modified":1623940988365},{"_id":"themes/Wikitten/_source/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1623940988365},{"_id":"themes/Wikitten/_config.yml","hash":"a35197f5d6e037ce088aa40d56588294a95883ea","modified":1624190525833},{"_id":"themes/Wikitten/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1623940988365},{"_id":"themes/Wikitten/package.json","hash":"45d85fca94aa5f2066abc08dec6cc7009558e300","modified":1623940988373},{"_id":"themes/Wikitten/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1623940988365},{"_id":"themes/Wikitten/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1623940988365},{"_id":"themes/Wikitten/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1623940988365},{"_id":"themes/Wikitten/languages/id.yml","hash":"70ec9ab2ac04cf882e81377ca5ad15bf8adceca8","modified":1623940988365},{"_id":"themes/Wikitten/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1623940988365},{"_id":"themes/Wikitten/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1623940988365},{"_id":"themes/Wikitten/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1623940988365},{"_id":"themes/Wikitten/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1623940988365},{"_id":"themes/Wikitten/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1623940988365},{"_id":"themes/Wikitten/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1623940988365},{"_id":"themes/Wikitten/layout/archive.ejs","hash":"34180dcc26b8fcc59f8644ce506aadf7db5f07e5","modified":1623940988365},{"_id":"themes/Wikitten/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1623940988365},{"_id":"themes/Wikitten/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1623940988365},{"_id":"themes/Wikitten/LICENSE","hash":"feadcd728a8e828cfc507b4586d7a7ab94b66fe8","modified":1623940988365},{"_id":"themes/Wikitten/layout/index.ejs","hash":"0980482c3b37acffd1b724ebc51240ca6967be5c","modified":1623940988365},{"_id":"themes/Wikitten/layout/embed.ejs","hash":"9e4e14d7adf20225e26d3943bdae8d08cf2d0d8b","modified":1623940988365},{"_id":"themes/Wikitten/layout/layout.ejs","hash":"61c0dad38893fb9fe4eba7fe2afaf7464310b925","modified":1623940988365},{"_id":"themes/Wikitten/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1623940988365},{"_id":"themes/Wikitten/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1623940988373},{"_id":"themes/Wikitten/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1623940988373},{"_id":"themes/Wikitten/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1623940988365},{"_id":"themes/Wikitten/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1623940988365},{"_id":"themes/Wikitten/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1623940988365},{"_id":"themes/Wikitten/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1623940988373},{"_id":"themes/Wikitten/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1623940988365},{"_id":"themes/Wikitten/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1623940988365},{"_id":"themes/Wikitten/layout/comment/counter.ejs","hash":"e109d3256b004b027d029bd5bd67feeb72dc5388","modified":1623940988365},{"_id":"themes/Wikitten/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1623940988365},{"_id":"themes/Wikitten/layout/comment/scripts.ejs","hash":"8a9a20f72ba0923afa776396fb67d8c5d446a666","modified":1623940988365},{"_id":"themes/Wikitten/layout/comment/index.ejs","hash":"f0f00cce7a5c37f00dbc4acf49529bdd6a6bdc5d","modified":1623940988365},{"_id":"themes/Wikitten/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1623940988365},{"_id":"themes/Wikitten/layout/common/footer.ejs","hash":"c666216877453d67db8637e8de7a7f2c1b92d9cb","modified":1623940988365},{"_id":"themes/Wikitten/layout/common/article.ejs","hash":"595a086a42a156dd44d30ee7f9e7189ca370bcf1","modified":1623940988365},{"_id":"themes/Wikitten/layout/common/head.ejs","hash":"5f2df8713f0ef723b3bfc79ae580fe8707ea2036","modified":1623940988365},{"_id":"themes/Wikitten/layout/common/sidebar.ejs","hash":"6e80fa52d23c9c39bfa357a1e00c26fc8b851b82","modified":1623940988365},{"_id":"themes/Wikitten/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1623940988365},{"_id":"themes/Wikitten/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1623940988365},{"_id":"themes/Wikitten/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1623940988365},{"_id":"themes/Wikitten/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1623940988365},{"_id":"themes/Wikitten/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1623940988365},{"_id":"themes/Wikitten/layout/plugin/mathjax.ejs","hash":"a5578fd682da0f26c85428bfb59043f9f5c682a7","modified":1623940988365},{"_id":"themes/Wikitten/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1623940988365},{"_id":"themes/Wikitten/layout/plugin/scripts.ejs","hash":"6e410c120dabac0dccbd8b0c312f261c9566cacb","modified":1623940988365},{"_id":"themes/Wikitten/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1623940988365},{"_id":"themes/Wikitten/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1623940988365},{"_id":"themes/Wikitten/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1623940988373},{"_id":"themes/Wikitten/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1623940988373},{"_id":"themes/Wikitten/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1623940988373},{"_id":"themes/Wikitten/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1623940988373},{"_id":"themes/Wikitten/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1623940988373},{"_id":"themes/Wikitten/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1623940988373},{"_id":"themes/Wikitten/layout/widget/archive.ejs","hash":"91a4675876990c12bd252f00e13894e0e7e5e50a","modified":1623940988373},{"_id":"themes/Wikitten/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1623940988373},{"_id":"themes/Wikitten/layout/widget/category.ejs","hash":"d09317d5e328a9c6ff8fded93604ebe04764cc4c","modified":1623940988373},{"_id":"themes/Wikitten/layout/widget/recent_posts.ejs","hash":"dc83051ae67cfae0db0a6d9790c923ff2883ee25","modified":1623940988373},{"_id":"themes/Wikitten/layout/widget/links.ejs","hash":"0f58cafed5156488f550df6d560814f835a46854","modified":1623940988373},{"_id":"themes/Wikitten/layout/widget/tag.ejs","hash":"5d70b1bf3b1fc977135e458f9a50cb65cff91f17","modified":1623940988373},{"_id":"themes/Wikitten/layout/widget/tagcloud.ejs","hash":"73638a7c91c6d6433e766b35199508719bf27d19","modified":1623940988373},{"_id":"themes/Wikitten/source/css/_extend.styl","hash":"9a5c72663c0da1b32ecb6a75773a5ccfb8c467ca","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_variables.styl","hash":"2eba1250b39115da9f32e8a70d271e04186419c0","modified":1623941505481},{"_id":"themes/Wikitten/source/css/style.styl","hash":"d37d6c7754805c60564c0d9a50b7b058e7f830c9","modified":1623941505481},{"_id":"themes/Wikitten/source/images/mobile1.png","hash":"db83e3ffbf60ff88443cd3b9d1c23666005e88f0","modified":1623941505485},{"_id":"themes/Wikitten/source/images/mobile2.png","hash":"ba9a7a5464369c4272f6345ef879b5d1c2449de1","modified":1623941505485},{"_id":"themes/Wikitten/source/js/insight.js","hash":"c9dfd20ae82a446facad01439b7bb75332e3705b","modified":1623941505485},{"_id":"themes/Wikitten/source/js/main.js","hash":"16b8b4c87801386fbbd144d8a803454d175505f9","modified":1623941505485},{"_id":"themes/Wikitten/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1623940988365},{"_id":"themes/Wikitten/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1623940988365},{"_id":"themes/Wikitten/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1623940988365},{"_id":"themes/Wikitten/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1623940988365},{"_id":"themes/Wikitten/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1623940988365},{"_id":"themes/Wikitten/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1623940988365},{"_id":"themes/Wikitten/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1623941505473},{"_id":"themes/Wikitten/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1623940988365},{"_id":"themes/Wikitten/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1623941505473},{"_id":"themes/Wikitten/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_partial/archive.styl","hash":"146b5a86d6f602232d86e246ea20620ec923cccc","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_partial/article.styl","hash":"85db02a6f51d81ac317a7f0727fa16b7ce7d5e9e","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1623941505481},{"_id":"themes/Wikitten/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1623941505477},{"_id":"themes/Wikitten/source/css/_partial/header.styl","hash":"154fcfe17c4a9833903b3a91efb1ddf315e7fcba","modified":1623941505481},{"_id":"themes/Wikitten/source/css/_partial/profile.styl","hash":"2ecc48d48ad8769556036f19f2769c84c428cbc6","modified":1623941505481},{"_id":"themes/Wikitten/source/css/_partial/insight.styl","hash":"d3195723c373a68a05b76d430f8aeb2d2dd1957f","modified":1623941505481},{"_id":"themes/Wikitten/source/css/_partial/sidebar.styl","hash":"4a11aace0de3aeafdd88caef7cd238543ce1cd95","modified":1623941505481},{"_id":"themes/Wikitten/source/css/_partial/timeline.styl","hash":"4ea679287d49f91634dd32ad812746cccc1e6281","modified":1623941505481},{"_id":"themes/Wikitten/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1623941505481},{"_id":"themes/Wikitten/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1623941505481},{"_id":"themes/Wikitten/source/css/images/favicon.ico","hash":"b37ac89616b9e4c01a35991af59fe6b63e41a48e","modified":1623941505481},{"_id":"themes/Wikitten/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1623941505481},{"_id":"themes/Wikitten/source/css/images/logo.png","hash":"8c61e1ec0b7c7200045d7795bac097fce475ef16","modified":1623941505481},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1623941505497},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1623941505485},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1623941505485},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1623941505505},{"_id":"themes/Wikitten/layout/common/profile.ejs","hash":"0d5a9622d490652599e3ba3e4077a7d6bb2eb38e","modified":1623940988365},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1623941505505},{"_id":"themes/Wikitten/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1623940988373},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1623941505505},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1623941505505},{"_id":"themes/Wikitten/layout/common/iframe.ejs","hash":"c3a8e71e1660d58b6ed106a045c6829e77e65881","modified":1623940988365},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1623941505497},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1623941505497},{"_id":"themes/Wikitten/source/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1623941505497},{"_id":"themes/Wikitten/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1623940988365},{"_id":"themes/Wikitten/source/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","hash":"31e1bcc4cf805a2c2fee21f48ded1e598f64a2a8","modified":1623941505501},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1623941505489},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1623941505497},{"_id":"themes/Wikitten/source/images/SitePreview.png","hash":"c37c32696828492d6a8a4dfb0f84af98f5fb1306","modified":1623941505481},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1623941505493},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1623941505497},{"_id":"public/atom.xml","hash":"80a25fada4d81a284f03f22669e3bb50ffe7ff6d","modified":1684147535148},{"_id":"public/content.json","hash":"eca73216224b66977ce32efa99ab41d4bc43bc6a","modified":1684147535148},{"_id":"public/sitemap.xml","hash":"93ef8a72a744a846ed901d8e785ec31f7e5868ea","modified":1684142256826},{"_id":"public/about/index.html","hash":"3b8216891768a998e90a0432248e830bdac58414","modified":1684142256826},{"_id":"public/categories/index.html","hash":"5a10267bd021baf4ae1631ee84cd5f861aecd7b8","modified":1684142256826},{"_id":"public/tags/index.html","hash":"8f3b065ca9f809b11ba4e085048d6babbe67ed5f","modified":1684142256826},{"_id":"public/wiki/一次差点翻车的v2raya版本更新经历/index.html","hash":"9abf3530648b9e1f66c5d0d70b7ef3b5943dacb4","modified":1684142256826},{"_id":"public/wiki/blog重构啦/index.html","hash":"11a09f532a3ae4d93a281820feac6658c3bc5cb5","modified":1684142256826},{"_id":"public/wiki/kali的VPN代理软件选择/index.html","hash":"d0fe7ceca401c7b7ca8c477924bc069cc53b3b62","modified":1684142256826},{"_id":"public/wiki/偷学的渗透小tips/index.html","hash":"c4d308920fac032b10e033eb9dd0fdb67bd0d4b3","modified":1684142256826},{"_id":"public/wiki/现阶段对blog的规划思考/index.html","hash":"a1e1e65e5765f3412539b9726a6404a92aaf4305","modified":1684142256826},{"_id":"public/wiki/Note-JAVA代码审计-入门篇/index.html","hash":"86c22b60892b915312c0bb57c1a3a5221e771bc7","modified":1684142256826},{"_id":"public/wiki/Notes_代码审计-企业级web代码安全结构/index.html","hash":"5a157d7603d9236be7a85a37a8bc7cb4db355cb4","modified":1684142256826},{"_id":"public/wiki/试玩Game-of-hacks/index.html","hash":"53ce8c44d9fa168de8311a4d5dbb9317996645a9","modified":1684142256826},{"_id":"public/wiki/Notes_0-to-1-the-road-of-CTFer_1/index.html","hash":"8525994b1230a040706866054645baa112ec8e51","modified":1684142256826},{"_id":"public/wiki/Notes_HowToHunt-md/index.html","hash":"c8ba3c24d88f82493c4cf90258374bcebcd41911","modified":1684142256826},{"_id":"public/archives/index.html","hash":"b1d00e112429803c0b1e775cc6f3a698df0ba0c1","modified":1684142256826},{"_id":"public/archives/2021/index.html","hash":"2a334fbe0d4ab3ebfc0861d7ddf3607f3ab48a2b","modified":1684142256826},{"_id":"public/archives/2021/04/index.html","hash":"969326d12aa122bd54d44b5f77b5bbc760685303","modified":1684142256826},{"_id":"public/archives/2021/07/index.html","hash":"20dac9198526a2f50adcfe80bd1c8d9a7d6273dd","modified":1684142256826},{"_id":"public/archives/2021/09/index.html","hash":"c3ff642d5e2a47da5db8c4c0e3b20c7f8bebafea","modified":1684142256826},{"_id":"public/archives/2021/12/index.html","hash":"c010134bbcc5d45b7e2f15dbf12240e7c59a8d40","modified":1684142256826},{"_id":"public/archives/2022/index.html","hash":"bf87b1c0877e641adbc173ee24abba3fc8007026","modified":1684142256826},{"_id":"public/archives/2022/04/index.html","hash":"a59b0b4fc1e3c8612109d4550fc6045c4613e5c8","modified":1684142256826},{"_id":"public/archives/2022/09/index.html","hash":"e809d97d62f85897df138fc59450452af83c4013","modified":1684142256826},{"_id":"public/archives/2023/index.html","hash":"40b271dd18aba2f54bd57a4ffe65e48bb17aeee0","modified":1684142256826},{"_id":"public/archives/2023/01/index.html","hash":"5e15ce19b9921e8aa429d160b398cbfe54b50780","modified":1684142256826},{"_id":"public/archives/2023/02/index.html","hash":"46311613012d90b5fa4a04bceb635ee039085ed1","modified":1684142256826},{"_id":"public/categories/100-Cyber-security/index.html","hash":"630dd7bb602136dfe278af72d265decafd68615e","modified":1676874000109},{"_id":"public/categories/600-随便叨叨/index.html","hash":"8b1255a52555666f2d2b682c9e82ec97f66e1787","modified":1676874000109},{"_id":"public/categories/100-Cyber-security/140-Code-review-代码审计/index.html","hash":"6d68f8aba7aeb6d1e004d70d290d81c7c6345c07","modified":1676874000109},{"_id":"public/categories/100-Web-security/index.html","hash":"479f412e72b3cd1e459b61d076188fa8f8901171","modified":1676874000109},{"_id":"public/categories/100-Cyber-security/140-Code-review-代码审计/149-Notes/index.html","hash":"bf602dd2b1e05378909e2332b8a6b3c1bab371f4","modified":1676874000109},{"_id":"public/categories/100-Web-security/110-Bug-bounty/index.html","hash":"231744bb3dc0bc16a0d5a0c99f1e71ae0fd65687","modified":1676874000109},{"_id":"public/categories/100-Web-security/140-Code-review-代码审计/index.html","hash":"224f139e5133143f5eb3b4787484e9d28278d87d","modified":1676874000109},{"_id":"public/categories/100-Web-security/110-Bug-bounty/111-Ideas-WP/index.html","hash":"3a29c25238b1b845a845d21919e223f213bc28f7","modified":1676874000109},{"_id":"public/categories/100-Web-security/120-CTF/index.html","hash":"4c83974b0f22efd7b9d1d5e5265bfb9ce21d36f8","modified":1676874000109},{"_id":"public/categories/100-Web-security/110-Bug-bounty/119-Notes/index.html","hash":"2ce2c833e68b6efaf51983890c243e63b2c485c5","modified":1676874000109},{"_id":"public/categories/100-Web-security/120-CTF/129-Notes/index.html","hash":"1396cfa17c4a3b45bd0c9498744ba21a1043a2b5","modified":1676874000109},{"_id":"public/index.html","hash":"34ec8a616a6bcc6aaef95383ce5c8235e52945bc","modified":1684147535148},{"_id":"public/tags/踩坑记录/index.html","hash":"ad11765a668bad699ba6eb8cc2967b767b742f93","modified":1676874000109},{"_id":"public/tags/Summary/index.html","hash":"2707b6bfde4a095b617d362946b865b693dd7dd9","modified":1676874000109},{"_id":"public/tags/靶场/index.html","hash":"d72128642e42abcafaa305ca9fe1899844083531","modified":1676874000109},{"_id":"public/tags/Notes-CTF/index.html","hash":"a0cb2b8c8c642e1354bc20a5ac1531a48a7f1666","modified":1676874000109},{"_id":"public/tags/Notes/index.html","hash":"64d8fe308555e2aa32b6245d3cd3fe5e7dc16301","modified":1676874000109},{"_id":"public/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1676874000109},{"_id":"public/css/images/favicon.ico","hash":"b37ac89616b9e4c01a35991af59fe6b63e41a48e","modified":1676874000109},{"_id":"public/css/images/logo.png","hash":"8c61e1ec0b7c7200045d7795bac097fce475ef16","modified":1676874000109},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1676874000109},{"_id":"public/libs/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1676874000109},{"_id":"public/libs/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1676874000109},{"_id":"public/libs/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1676874000109},{"_id":"public/libs/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1676874000109},{"_id":"public/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1676874000109},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1676874000109},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1676874000109},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1676874000109},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1676874000109},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1676874000109},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1676874000109},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1676874000109},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1676874000109},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1676874000109},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1676874000109},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1676874000109},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1676874000109},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1676874000109},{"_id":"public/images/mobile1.png","hash":"db83e3ffbf60ff88443cd3b9d1c23666005e88f0","modified":1676874000109},{"_id":"public/images/mobile2.png","hash":"ba9a7a5464369c4272f6345ef879b5d1c2449de1","modified":1676874000109},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1676874000109},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1676874000109},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1676874000109},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1676874000109},{"_id":"public/js/insight.js","hash":"c9dfd20ae82a446facad01439b7bb75332e3705b","modified":1676874000109},{"_id":"public/js/main.js","hash":"16b8b4c87801386fbbd144d8a803454d175505f9","modified":1676874000109},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1676874000109},{"_id":"public/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1676874000109},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1676874000109},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1676874000109},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1676874000109},{"_id":"public/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","hash":"31e1bcc4cf805a2c2fee21f48ded1e598f64a2a8","modified":1676874000109},{"_id":"public/css/style.css","hash":"c01e6af360f406ec7297f7739e2985bfeddba817","modified":1676874000109},{"_id":"public/libs/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1676874000109},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1676874000109},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1676874000109},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1676874000109},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1676874000109},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1676874000109},{"_id":"public/images/SitePreview.png","hash":"c37c32696828492d6a8a4dfb0f84af98f5fb1306","modified":1676874000109},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1676874000109},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1676874000109},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1676874000109},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1676874000109},{"_id":"public/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1676874000109},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1676874000109},{"_id":"public/categories/其它笔记/index.html","hash":"b465d7fa9f47be2a76382b76b8b719f9daf5fc6f","modified":1684142256826},{"_id":"public/categories/踩坑记录/index.html","hash":"e1c9f9c04b6a4396601c7374f5254bdb8e4387ff","modified":1684142256826},{"_id":"public/categories/读书笔记/index.html","hash":"dc1404aa8ab7bf4c0a3b774d162849cdf3096b13","modified":1684142256826},{"_id":"public/categories/学习笔记/index.html","hash":"a770576b0372274431bd6638f8379e3f99d91b46","modified":1684142256826},{"_id":"public/tags/随便叨叨/index.html","hash":"d46054acf9188cfbb07d1f86e138481613da2716","modified":1684142256826},{"_id":"public/tags/踩坑/index.html","hash":"60de83782fa9acc4afec85a1881566098d3f4654","modified":1684142256826},{"_id":"public/tags/代码审计/index.html","hash":"9cb450b6c8f7d8c9d7bb46929f3e0fab8439dd82","modified":1684142256826},{"_id":"public/tags/渗透测试/index.html","hash":"de8c2081b23d907c1f27e885951ddaa1939145f8","modified":1684142256826},{"_id":"public/tags/CTF/index.html","hash":"323d20b752fa2c028f22ddbe3f3a4153d84548f6","modified":1684142256826},{"_id":"source/_posts/服务网格学习笔记.md","hash":"1107c012b3153a762f8fc24a86fa7d60e5b4af33","modified":1679575399810},{"_id":"source/_posts/服务网格学习笔记/image_1679471507318_0.png","hash":"67cec03af74ff83951c192a4abad0e5a87a7eb52","modified":1679471507465},{"_id":"public/wiki/服务网格学习笔记/index.html","hash":"4bede25b67a23452644f91d64ecf3a39c2a3d9ec","modified":1684142256826},{"_id":"public/archives/page/2/index.html","hash":"b5139206541bb3f2d1f41cca199fc00d47cd79ab","modified":1684142256826},{"_id":"public/archives/2023/03/index.html","hash":"af409a40124fd47b9612b81e2f293b7c672fde8c","modified":1684142256826},{"_id":"public/page/2/index.html","hash":"4c0f2bc20a07795ccea424f65b05b71aa7858c15","modified":1684142256826},{"_id":"public/tags/笔记/index.html","hash":"e91a13b739582c21b31226273763320df6695625","modified":1684142256826},{"_id":"public/tags/云原生/index.html","hash":"7b250373ccb07041b608b268065b3e592246c937","modified":1684142256826},{"_id":"public/wiki/服务网格学习笔记/image_1679471507318_0.png","hash":"67cec03af74ff83951c192a4abad0e5a87a7eb52","modified":1679574291244},{"_id":"source/img/service-mesh-arch.png","hash":"f677c9202fcad9bfd48d6fbbd0440d699733e027","modified":1679575353666},{"_id":"source/img/image_1679471507318_0.png","hash":"67cec03af74ff83951c192a4abad0e5a87a7eb52","modified":1679471507465},{"_id":"public/img/service-mesh-arch.png","hash":"f677c9202fcad9bfd48d6fbbd0440d699733e027","modified":1679575406991},{"_id":"public/img/image_1679471507318_0.png","hash":"67cec03af74ff83951c192a4abad0e5a87a7eb52","modified":1679575406991},{"_id":"source/_posts/Chatgpt翻译外文书籍初体验.md","hash":"e66176f286eaf100a6e578d796f07f8ae497fe05","modified":1679912552074},{"_id":"source/img/image_1679910592101_0.png","hash":"72ec8207813c3e4162559f103624f9e6d7fcdf40","modified":1679910592202},{"_id":"source/img/image_1679910972280_0.png","hash":"7896e0fd5f68e41e6bc5a45814240c7a753bf764","modified":1679910972450},{"_id":"public/img/image_1679910592101_0.png","hash":"72ec8207813c3e4162559f103624f9e6d7fcdf40","modified":1679912491316},{"_id":"public/img/image_1679910972280_0.png","hash":"7896e0fd5f68e41e6bc5a45814240c7a753bf764","modified":1679912491316},{"_id":"public/wiki/Chatgpt翻译外文书籍初体验/index.html","hash":"ee19a09737de6e85e1ee35fad5c89eea2c094f5d","modified":1684142256826},{"_id":"public/tags/Chatgpt/index.html","hash":"2483a0148b82d2ccd85a3e871a7759511413a75a","modified":1684142256826},{"_id":"source/_posts/Logseq使用体验.md","hash":"c3f20a5fa155785f7e1833e0692f7c57850d2b96","modified":1680845559478},{"_id":"source/img/Screenshot_2023-04-07_10-40-10.png","hash":"fc2acef5c4ec3cc28a9feb5f33a99729b65b3ac2","modified":1680835227270},{"_id":"public/wiki/Logseq使用体验/index.html","hash":"ffe8be3d5ce87451d963c6232bf23c4597972f07","modified":1684142256826},{"_id":"public/archives/2023/04/index.html","hash":"b413ddda32f8f5afdc035cdcf0f4c51ca657c8c5","modified":1684142256826},{"_id":"public/tags/工具/index.html","hash":"169e6d5d4067d28ec9d98544dc70d14338af34e4","modified":1684142256826},{"_id":"public/img/Screenshot_2023-04-07_10-40-10.png","hash":"fc2acef5c4ec3cc28a9feb5f33a99729b65b3ac2","modified":1680845580196},{"_id":"source/_posts/验证码爆破-xp-CAPTCHA挖洞体验.md","hash":"c704102d2b6d437797c662fb1e5e9f8f00416a4a","modified":1684147518700},{"_id":"public/wiki/验证码爆破-xp-CAPTCHA挖洞体验/index.html","hash":"2ca2b84140405350e330436f5c661e0df7096b7c","modified":1684147535148},{"_id":"public/archives/2023/05/index.html","hash":"5d0fc7feaceab3e126395181c5de42e30e8fbb90","modified":1684142256826},{"_id":"public/tags/WP/index.html","hash":"3f968be1955906f747f63d268f1bc3c5b028684c","modified":1684142256826}],"Category":[{"name":"100 Cyber security","_id":"clecfhfz90004x94091ynhocv"},{"name":"600 随便叨叨","_id":"clecfhfzl0009x940693r175b"},{"name":"140 Code review 代码审计","parent":"clecfhfz90004x94091ynhocv","_id":"clecfhfzz000lx94088zvb04p"},{"name":"100 Web security","_id":"clecfhg01000px9403y7t3aha"},{"name":"149 Notes","parent":"clecfhfzz000lx94088zvb04p","_id":"clecfhg03000rx940g3wy0rc9"},{"name":"110 Bug bounty","parent":"clecfhg01000px9403y7t3aha","_id":"clecfhg04000sx9406emb9qgi"},{"name":"140 Code review/代码审计","parent":"clecfhg01000px9403y7t3aha","_id":"clecfhg05000ux9406nnb94nm"},{"name":"111 Ideas/WP","parent":"clecfhg04000sx9406emb9qgi","_id":"clecfhg06000xx94033237037"},{"name":"120 CTF","parent":"clecfhg01000px9403y7t3aha","_id":"clecfhg0q0016x940av0k8ps9"},{"name":"119 Notes","parent":"clecfhg04000sx9406emb9qgi","_id":"clecfhg0s0018x94090wx3cye"},{"name":"129 Notes","parent":"clecfhg0q0016x940av0k8ps9","_id":"clecfhg0t001ax94070n6h2xu"},{"name":"其它笔记","_id":"clecfqjo10000xs401p8n5x8j"},{"name":"踩坑记录","_id":"clecfwbe70004xs4096wggr7j"},{"name":"读书笔记","_id":"clecfwvab0008xs40ftk59h28"},{"name":"学习笔记","_id":"clecfz54m000kxs40hmyu6ito"}],"Data":[],"Page":[{"title":"About","layout":"page","_content":"\n# 关于我自己\n\n如你所见，这是个简单的个人介绍。\n\n常用ID Tsunamori，也可以简化为Tsu，名字灵感来自于常守朱（Akane Tsunemori）和飓风（tsunami）。\n起步缓慢型选手，但每天都在朝着目标努力中。\n\n*拥有一大只可可爱爱细心温柔又努力勤奋的开发男朋友*\n\n相对擅长的方向： SDL安全及风险收敛解决方案/Web渗透/红队攻击\n专业以外的特长： 流利的英语口语/推理爱好者/曾经的云顶之弈宗师分段选手\n正在拓展的方向： 云安全/数据安全/安全运营体系建设\n\n知乎ID： VIVZC \nGitHub ID: Tsunamori （我只是个无情的star机器）\n邮箱：tsunamori#protonmail.com （每日查看次数1）\n\n喜欢的事物：符合逻辑的推理/2D策略游戏/智商惊艳的角色/好玩有趣的技术/硬核科幻\n\n感谢阅读！\n\n","source":"about/index.md","raw":"---\ntitle: \"About\"\nlayout: \"page\"\n---\n\n# 关于我自己\n\n如你所见，这是个简单的个人介绍。\n\n常用ID Tsunamori，也可以简化为Tsu，名字灵感来自于常守朱（Akane Tsunemori）和飓风（tsunami）。\n起步缓慢型选手，但每天都在朝着目标努力中。\n\n*拥有一大只可可爱爱细心温柔又努力勤奋的开发男朋友*\n\n相对擅长的方向： SDL安全及风险收敛解决方案/Web渗透/红队攻击\n专业以外的特长： 流利的英语口语/推理爱好者/曾经的云顶之弈宗师分段选手\n正在拓展的方向： 云安全/数据安全/安全运营体系建设\n\n知乎ID： VIVZC \nGitHub ID: Tsunamori （我只是个无情的star机器）\n邮箱：tsunamori#protonmail.com （每日查看次数1）\n\n喜欢的事物：符合逻辑的推理/2D策略游戏/智商惊艳的角色/好玩有趣的技术/硬核科幻\n\n感谢阅读！\n\n","date":"2023-02-20T06:43:29.585Z","updated":"2023-02-20T06:43:29.585Z","path":"about/index.html","_id":"clecfhfys0000x94022d7ewp7","comments":1,"content":"<h1 id=\"关于我自己\"><a href=\"#关于我自己\" class=\"headerlink\" title=\"关于我自己\"></a>关于我自己</h1><p>如你所见，这是个简单的个人介绍。</p>\n<p>常用ID Tsunamori，也可以简化为Tsu，名字灵感来自于常守朱（Akane Tsunemori）和飓风（tsunami）。<br>起步缓慢型选手，但每天都在朝着目标努力中。</p>\n<p><em>拥有一大只可可爱爱细心温柔又努力勤奋的开发男朋友</em></p>\n<p>相对擅长的方向： SDL安全及风险收敛解决方案/Web渗透/红队攻击<br>专业以外的特长： 流利的英语口语/推理爱好者/曾经的云顶之弈宗师分段选手<br>正在拓展的方向： 云安全/数据安全/安全运营体系建设</p>\n<p>知乎ID： VIVZC<br>GitHub ID: Tsunamori （我只是个无情的star机器）<br>邮箱：tsunamori#protonmail.com （每日查看次数1）</p>\n<p>喜欢的事物：符合逻辑的推理/2D策略游戏/智商惊艳的角色/好玩有趣的技术/硬核科幻</p>\n<p>感谢阅读！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于我自己\"><a href=\"#关于我自己\" class=\"headerlink\" title=\"关于我自己\"></a>关于我自己</h1><p>如你所见，这是个简单的个人介绍。</p>\n<p>常用ID Tsunamori，也可以简化为Tsu，名字灵感来自于常守朱（Akane Tsunemori）和飓风（tsunami）。<br>起步缓慢型选手，但每天都在朝着目标努力中。</p>\n<p><em>拥有一大只可可爱爱细心温柔又努力勤奋的开发男朋友</em></p>\n<p>相对擅长的方向： SDL安全及风险收敛解决方案/Web渗透/红队攻击<br>专业以外的特长： 流利的英语口语/推理爱好者/曾经的云顶之弈宗师分段选手<br>正在拓展的方向： 云安全/数据安全/安全运营体系建设</p>\n<p>知乎ID： VIVZC<br>GitHub ID: Tsunamori （我只是个无情的star机器）<br>邮箱：tsunamori#protonmail.com （每日查看次数1）</p>\n<p>喜欢的事物：符合逻辑的推理/2D策略游戏/智商惊艳的角色/好玩有趣的技术/硬核科幻</p>\n<p>感谢阅读！</p>\n"},{"title":"Categories","layout":"categories","_content":"test1\ntest2","source":"categories/index.md","raw":"title: \"Categories\"\nlayout: \"categories\"\n---\ntest1\ntest2","date":"2022-09-06T07:54:07.093Z","updated":"2021-06-17T14:43:08.365Z","path":"categories/index.html","comments":1,"_id":"clecfhfz40002x940b3kz7stk","content":"<p>test1<br>test2</p>\n","site":{"data":{}},"excerpt":"","more":"<p>test1<br>test2</p>\n"},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2022-09-06T07:54:07.089Z","updated":"2021-06-17T14:43:08.365Z","path":"tags/index.html","comments":1,"_id":"clecfhfzc0005x940dctb72dx","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"note_JAVA代码审计-入门篇","toc":true,"date":"2021-09-22T09:47:07.000Z","_content":"\n## 第1章 初识JAVA代码审计\n\n## 第2章 代码审计环境搭建\n1. 使用环境：JAVA JDK、Docker、Vulhub、IntelliJ IDEA(远程调试)、VMware、Maven\n\n## 第3章 代码审计辅助工具简介\n1. 代码编辑器：Sublime、IDEA、Eclipse\n1. 测试工具：Burp Suite、SwitchyOmega、Max HackerBar、Postman、Postwoman、Tamper Data、Ysoserial、Marshalsec、MySQL监视工具、Beyond Compare\n1. 反编译工具：JD-GUI、FernFLower、CFR、IntelliJ IDEA\n1. JAVA代码静态扫描工具：Fortify、VCG、FindBugs与FindSecBugs插件、SpotBugs\n1. 公开漏洞查找平台：CVE、NVD、CNVD、CNNVD\n\n## Java EE基础知识\n\n### Java EE\n\n#### Java EE常用核心技术\n1. Java 数据库连接 （JDBC）：用于规范客户端程序如何访问数据库的应用程序接口。\n1. Java 命名和目录接口（JNDI）：Java的一个目录服务应用程序界面（API），将服务名称和对象关联起来，从而使开发可以用名称来访问对象。\n1. 企业级JavaBean（EJB）：用来构筑企业级应用的、在服务端可被管理的组件。\n1. 远程方法调用（RMI）：是Java的一组用户开发分布式应用程序的API，增强Java开发分布式应用的能力。\n1. Servlet：是使用Java编写的服务端程序，狭义的Servlet指Java语言实现的一个接口，广义上指任何实现该Servlet接口的类。主要功能在于交互式地浏览和修改数据，生成动态内容。\n1. JSP（JavaServer Pages）：一种动态网页技术标准，部署在网络服务器上，可以相应用户端发送的请求，并根据请求内容动态生成HTML、XML或其他格式文档的Web网页，返回给请求者。\n1. 可扩展标记语言（XML）：是被设计用于传输和存储数据的语言。\n1. Java消息服务（Java Message Service, JMS）是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间或分布式系统中发生消息，进行异步通信。\n\n#### Java EE 分层模型\n1. Domain Object(领域对象)层：由一系列POJO（Plain Old Java Object）组成，这些对象是该系统的Domain Object，通常包含各自所需实现的业务逻辑方法。\n1. DAO(Data Access Object, 数据访问对象)层：由一系列DAO组件组成，实现对数据库创建、查询、更新、删除等操作。\n1. Service(业务逻辑)层：由一系列控制器组成，用于拦截用户请求，并调用业务逻辑组件的业务逻辑方法处理用户请求，根据处理结果向不同View组件转发。\n1. View(表现)层：由一系列页面及视图组件组成，负责收集用户请求，并显示处理后的结果。\n\n### MVC\n\nMVC，即为Model View Controller，三个核心部件，独自处理各自的任务。这种分离思想应用在代码审计中，以抓住关键问题。\n\n#### Java MVC\n1. Model：表示携带数据的对象或Java POJO，即使模型内的数据改变，它也具有逻辑来更新控制器。\n1. Controller：表示逻辑控制，它对模型和视图都有作用，控制数据流进入模型对象，并在数据更改时更新视图，是视图和模型的中间层。\n1. View：表示模型包含的数据的可视化层。\n工作流程：控制层接收用户请求，决定调用哪个模型，模型处理用户请求并返回数据，最后由视图层将数据转化呈现给用户。MVC模式使视图层和业务层分离，比如修改View层代码时，不用重新编译Model和Controller代码。\n\n#### Java MVC框架\n1. Struts1\n1. Struts2\n1. Spring MVC\n1. JSF\n1. Tapestry\n\n### Servlet\n","source":"_posts/Note-JAVA代码审计-入门篇.md","raw":"---\ntitle: note_JAVA代码审计-入门篇\ntoc: true\ndate: 2021-09-22 09:47:07\ntags: 代码审计\ncategories: [读书笔记]\n---\n\n## 第1章 初识JAVA代码审计\n\n## 第2章 代码审计环境搭建\n1. 使用环境：JAVA JDK、Docker、Vulhub、IntelliJ IDEA(远程调试)、VMware、Maven\n\n## 第3章 代码审计辅助工具简介\n1. 代码编辑器：Sublime、IDEA、Eclipse\n1. 测试工具：Burp Suite、SwitchyOmega、Max HackerBar、Postman、Postwoman、Tamper Data、Ysoserial、Marshalsec、MySQL监视工具、Beyond Compare\n1. 反编译工具：JD-GUI、FernFLower、CFR、IntelliJ IDEA\n1. JAVA代码静态扫描工具：Fortify、VCG、FindBugs与FindSecBugs插件、SpotBugs\n1. 公开漏洞查找平台：CVE、NVD、CNVD、CNNVD\n\n## Java EE基础知识\n\n### Java EE\n\n#### Java EE常用核心技术\n1. Java 数据库连接 （JDBC）：用于规范客户端程序如何访问数据库的应用程序接口。\n1. Java 命名和目录接口（JNDI）：Java的一个目录服务应用程序界面（API），将服务名称和对象关联起来，从而使开发可以用名称来访问对象。\n1. 企业级JavaBean（EJB）：用来构筑企业级应用的、在服务端可被管理的组件。\n1. 远程方法调用（RMI）：是Java的一组用户开发分布式应用程序的API，增强Java开发分布式应用的能力。\n1. Servlet：是使用Java编写的服务端程序，狭义的Servlet指Java语言实现的一个接口，广义上指任何实现该Servlet接口的类。主要功能在于交互式地浏览和修改数据，生成动态内容。\n1. JSP（JavaServer Pages）：一种动态网页技术标准，部署在网络服务器上，可以相应用户端发送的请求，并根据请求内容动态生成HTML、XML或其他格式文档的Web网页，返回给请求者。\n1. 可扩展标记语言（XML）：是被设计用于传输和存储数据的语言。\n1. Java消息服务（Java Message Service, JMS）是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间或分布式系统中发生消息，进行异步通信。\n\n#### Java EE 分层模型\n1. Domain Object(领域对象)层：由一系列POJO（Plain Old Java Object）组成，这些对象是该系统的Domain Object，通常包含各自所需实现的业务逻辑方法。\n1. DAO(Data Access Object, 数据访问对象)层：由一系列DAO组件组成，实现对数据库创建、查询、更新、删除等操作。\n1. Service(业务逻辑)层：由一系列控制器组成，用于拦截用户请求，并调用业务逻辑组件的业务逻辑方法处理用户请求，根据处理结果向不同View组件转发。\n1. View(表现)层：由一系列页面及视图组件组成，负责收集用户请求，并显示处理后的结果。\n\n### MVC\n\nMVC，即为Model View Controller，三个核心部件，独自处理各自的任务。这种分离思想应用在代码审计中，以抓住关键问题。\n\n#### Java MVC\n1. Model：表示携带数据的对象或Java POJO，即使模型内的数据改变，它也具有逻辑来更新控制器。\n1. Controller：表示逻辑控制，它对模型和视图都有作用，控制数据流进入模型对象，并在数据更改时更新视图，是视图和模型的中间层。\n1. View：表示模型包含的数据的可视化层。\n工作流程：控制层接收用户请求，决定调用哪个模型，模型处理用户请求并返回数据，最后由视图层将数据转化呈现给用户。MVC模式使视图层和业务层分离，比如修改View层代码时，不用重新编译Model和Controller代码。\n\n#### Java MVC框架\n1. Struts1\n1. Struts2\n1. Spring MVC\n1. JSF\n1. Tapestry\n\n### Servlet\n","slug":"Note-JAVA代码审计-入门篇","published":1,"updated":"2023-02-20T06:36:06.537Z","_id":"clecfhfyy0001x94037dn0b1n","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"第1章-初识JAVA代码审计\"><a href=\"#第1章-初识JAVA代码审计\" class=\"headerlink\" title=\"第1章 初识JAVA代码审计\"></a>第1章 初识JAVA代码审计</h2><h2 id=\"第2章-代码审计环境搭建\"><a href=\"#第2章-代码审计环境搭建\" class=\"headerlink\" title=\"第2章 代码审计环境搭建\"></a>第2章 代码审计环境搭建</h2><ol>\n<li>使用环境：JAVA JDK、Docker、Vulhub、IntelliJ IDEA(远程调试)、VMware、Maven</li>\n</ol>\n<h2 id=\"第3章-代码审计辅助工具简介\"><a href=\"#第3章-代码审计辅助工具简介\" class=\"headerlink\" title=\"第3章 代码审计辅助工具简介\"></a>第3章 代码审计辅助工具简介</h2><ol>\n<li>代码编辑器：Sublime、IDEA、Eclipse</li>\n<li>测试工具：Burp Suite、SwitchyOmega、Max HackerBar、Postman、Postwoman、Tamper Data、Ysoserial、Marshalsec、MySQL监视工具、Beyond Compare</li>\n<li>反编译工具：JD-GUI、FernFLower、CFR、IntelliJ IDEA</li>\n<li>JAVA代码静态扫描工具：Fortify、VCG、FindBugs与FindSecBugs插件、SpotBugs</li>\n<li>公开漏洞查找平台：CVE、NVD、CNVD、CNNVD</li>\n</ol>\n<h2 id=\"Java-EE基础知识\"><a href=\"#Java-EE基础知识\" class=\"headerlink\" title=\"Java EE基础知识\"></a>Java EE基础知识</h2><h3 id=\"Java-EE\"><a href=\"#Java-EE\" class=\"headerlink\" title=\"Java EE\"></a>Java EE</h3><h4 id=\"Java-EE常用核心技术\"><a href=\"#Java-EE常用核心技术\" class=\"headerlink\" title=\"Java EE常用核心技术\"></a>Java EE常用核心技术</h4><ol>\n<li>Java 数据库连接 （JDBC）：用于规范客户端程序如何访问数据库的应用程序接口。</li>\n<li>Java 命名和目录接口（JNDI）：Java的一个目录服务应用程序界面（API），将服务名称和对象关联起来，从而使开发可以用名称来访问对象。</li>\n<li>企业级JavaBean（EJB）：用来构筑企业级应用的、在服务端可被管理的组件。</li>\n<li>远程方法调用（RMI）：是Java的一组用户开发分布式应用程序的API，增强Java开发分布式应用的能力。</li>\n<li>Servlet：是使用Java编写的服务端程序，狭义的Servlet指Java语言实现的一个接口，广义上指任何实现该Servlet接口的类。主要功能在于交互式地浏览和修改数据，生成动态内容。</li>\n<li>JSP（JavaServer Pages）：一种动态网页技术标准，部署在网络服务器上，可以相应用户端发送的请求，并根据请求内容动态生成HTML、XML或其他格式文档的Web网页，返回给请求者。</li>\n<li>可扩展标记语言（XML）：是被设计用于传输和存储数据的语言。</li>\n<li>Java消息服务（Java Message Service, JMS）是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间或分布式系统中发生消息，进行异步通信。</li>\n</ol>\n<h4 id=\"Java-EE-分层模型\"><a href=\"#Java-EE-分层模型\" class=\"headerlink\" title=\"Java EE 分层模型\"></a>Java EE 分层模型</h4><ol>\n<li>Domain Object(领域对象)层：由一系列POJO（Plain Old Java Object）组成，这些对象是该系统的Domain Object，通常包含各自所需实现的业务逻辑方法。</li>\n<li>DAO(Data Access Object, 数据访问对象)层：由一系列DAO组件组成，实现对数据库创建、查询、更新、删除等操作。</li>\n<li>Service(业务逻辑)层：由一系列控制器组成，用于拦截用户请求，并调用业务逻辑组件的业务逻辑方法处理用户请求，根据处理结果向不同View组件转发。</li>\n<li>View(表现)层：由一系列页面及视图组件组成，负责收集用户请求，并显示处理后的结果。</li>\n</ol>\n<h3 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h3><p>MVC，即为Model View Controller，三个核心部件，独自处理各自的任务。这种分离思想应用在代码审计中，以抓住关键问题。</p>\n<h4 id=\"Java-MVC\"><a href=\"#Java-MVC\" class=\"headerlink\" title=\"Java MVC\"></a>Java MVC</h4><ol>\n<li>Model：表示携带数据的对象或Java POJO，即使模型内的数据改变，它也具有逻辑来更新控制器。</li>\n<li>Controller：表示逻辑控制，它对模型和视图都有作用，控制数据流进入模型对象，并在数据更改时更新视图，是视图和模型的中间层。</li>\n<li>View：表示模型包含的数据的可视化层。<br>工作流程：控制层接收用户请求，决定调用哪个模型，模型处理用户请求并返回数据，最后由视图层将数据转化呈现给用户。MVC模式使视图层和业务层分离，比如修改View层代码时，不用重新编译Model和Controller代码。</li>\n</ol>\n<h4 id=\"Java-MVC框架\"><a href=\"#Java-MVC框架\" class=\"headerlink\" title=\"Java MVC框架\"></a>Java MVC框架</h4><ol>\n<li>Struts1</li>\n<li>Struts2</li>\n<li>Spring MVC</li>\n<li>JSF</li>\n<li>Tapestry</li>\n</ol>\n<h3 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第1章-初识JAVA代码审计\"><a href=\"#第1章-初识JAVA代码审计\" class=\"headerlink\" title=\"第1章 初识JAVA代码审计\"></a>第1章 初识JAVA代码审计</h2><h2 id=\"第2章-代码审计环境搭建\"><a href=\"#第2章-代码审计环境搭建\" class=\"headerlink\" title=\"第2章 代码审计环境搭建\"></a>第2章 代码审计环境搭建</h2><ol>\n<li>使用环境：JAVA JDK、Docker、Vulhub、IntelliJ IDEA(远程调试)、VMware、Maven</li>\n</ol>\n<h2 id=\"第3章-代码审计辅助工具简介\"><a href=\"#第3章-代码审计辅助工具简介\" class=\"headerlink\" title=\"第3章 代码审计辅助工具简介\"></a>第3章 代码审计辅助工具简介</h2><ol>\n<li>代码编辑器：Sublime、IDEA、Eclipse</li>\n<li>测试工具：Burp Suite、SwitchyOmega、Max HackerBar、Postman、Postwoman、Tamper Data、Ysoserial、Marshalsec、MySQL监视工具、Beyond Compare</li>\n<li>反编译工具：JD-GUI、FernFLower、CFR、IntelliJ IDEA</li>\n<li>JAVA代码静态扫描工具：Fortify、VCG、FindBugs与FindSecBugs插件、SpotBugs</li>\n<li>公开漏洞查找平台：CVE、NVD、CNVD、CNNVD</li>\n</ol>\n<h2 id=\"Java-EE基础知识\"><a href=\"#Java-EE基础知识\" class=\"headerlink\" title=\"Java EE基础知识\"></a>Java EE基础知识</h2><h3 id=\"Java-EE\"><a href=\"#Java-EE\" class=\"headerlink\" title=\"Java EE\"></a>Java EE</h3><h4 id=\"Java-EE常用核心技术\"><a href=\"#Java-EE常用核心技术\" class=\"headerlink\" title=\"Java EE常用核心技术\"></a>Java EE常用核心技术</h4><ol>\n<li>Java 数据库连接 （JDBC）：用于规范客户端程序如何访问数据库的应用程序接口。</li>\n<li>Java 命名和目录接口（JNDI）：Java的一个目录服务应用程序界面（API），将服务名称和对象关联起来，从而使开发可以用名称来访问对象。</li>\n<li>企业级JavaBean（EJB）：用来构筑企业级应用的、在服务端可被管理的组件。</li>\n<li>远程方法调用（RMI）：是Java的一组用户开发分布式应用程序的API，增强Java开发分布式应用的能力。</li>\n<li>Servlet：是使用Java编写的服务端程序，狭义的Servlet指Java语言实现的一个接口，广义上指任何实现该Servlet接口的类。主要功能在于交互式地浏览和修改数据，生成动态内容。</li>\n<li>JSP（JavaServer Pages）：一种动态网页技术标准，部署在网络服务器上，可以相应用户端发送的请求，并根据请求内容动态生成HTML、XML或其他格式文档的Web网页，返回给请求者。</li>\n<li>可扩展标记语言（XML）：是被设计用于传输和存储数据的语言。</li>\n<li>Java消息服务（Java Message Service, JMS）是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间或分布式系统中发生消息，进行异步通信。</li>\n</ol>\n<h4 id=\"Java-EE-分层模型\"><a href=\"#Java-EE-分层模型\" class=\"headerlink\" title=\"Java EE 分层模型\"></a>Java EE 分层模型</h4><ol>\n<li>Domain Object(领域对象)层：由一系列POJO（Plain Old Java Object）组成，这些对象是该系统的Domain Object，通常包含各自所需实现的业务逻辑方法。</li>\n<li>DAO(Data Access Object, 数据访问对象)层：由一系列DAO组件组成，实现对数据库创建、查询、更新、删除等操作。</li>\n<li>Service(业务逻辑)层：由一系列控制器组成，用于拦截用户请求，并调用业务逻辑组件的业务逻辑方法处理用户请求，根据处理结果向不同View组件转发。</li>\n<li>View(表现)层：由一系列页面及视图组件组成，负责收集用户请求，并显示处理后的结果。</li>\n</ol>\n<h3 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h3><p>MVC，即为Model View Controller，三个核心部件，独自处理各自的任务。这种分离思想应用在代码审计中，以抓住关键问题。</p>\n<h4 id=\"Java-MVC\"><a href=\"#Java-MVC\" class=\"headerlink\" title=\"Java MVC\"></a>Java MVC</h4><ol>\n<li>Model：表示携带数据的对象或Java POJO，即使模型内的数据改变，它也具有逻辑来更新控制器。</li>\n<li>Controller：表示逻辑控制，它对模型和视图都有作用，控制数据流进入模型对象，并在数据更改时更新视图，是视图和模型的中间层。</li>\n<li>View：表示模型包含的数据的可视化层。<br>工作流程：控制层接收用户请求，决定调用哪个模型，模型处理用户请求并返回数据，最后由视图层将数据转化呈现给用户。MVC模式使视图层和业务层分离，比如修改View层代码时，不用重新编译Model和Controller代码。</li>\n</ol>\n<h4 id=\"Java-MVC框架\"><a href=\"#Java-MVC框架\" class=\"headerlink\" title=\"Java MVC框架\"></a>Java MVC框架</h4><ol>\n<li>Struts1</li>\n<li>Struts2</li>\n<li>Spring MVC</li>\n<li>JSF</li>\n<li>Tapestry</li>\n</ol>\n<h3 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h3>"},{"title":"blog重构啦！","toc":false,"date":"2023-01-29T07:12:35.000Z","_content":"\nHello everybody!\n\n趁着开工不太忙，我把手里的各种笔记整理了一下，准备整合成一个知识库。同样，也重新审视了一下现有的内容，做了一些调整。\n\n之所以很长一段时间没有更新blog，主要是因为一部分笔记没有脱敏处理就没放上来，其次就是某些特定主题的内容，被我直接做成了一个git项目放在了主页。\n\n我思考了一下我对这个博客的定位，决定把它做成一个更加偏向整合所学->思考总结->产出的地方，不只是安全相关。东一块西一块的产出也造成过一些分类定义焦虑，所以之后会不断的做一些整合修整。\n\n啊顺便说一下22年的一些总结吧。\n\n工作上我自己最喜欢的部分是做了一些风险收敛的研究，写了一些非常落地的风险收敛解决方案。这些内容让我很惊讶的发现了甲方安全运营角度和乙方攻击视角的不同，安全运营最头疼的其实不是‘如何修复漏洞’，而是‘当前修复方案在实际情况中存在一些不对等/无法实现时，如何平衡成本、是否需要修改缓解措施、如何缓解处理效果更好’+‘如何更好更具有性价比的在全部资产上收敛风险’。\n\n在技术上的提升，主要是作为红队实施了一些攻防项目，OSCP虽然没考过但确实学到了很多东西。（啊短时间之内应该不会再考了吧\n\n说到OSCP，在ddl的高压之下，也~~被迫~~阅读了不少关于自我提升主题的书籍，实际地应用了一些技巧和思路；尝试了很多个todo APP，终于找到了目前我比较喜欢的一个；尝试了很多种记笔记的方式以及应用，目前也算是找到了最舒适的应用，配置了非常多自定义插件和快捷键调整。\n\n再来说关于23年的。。。展望？\n\n技术上主要方向会是做一些云安全的了解，从攻击技术拓展到安全运营。另外也会看一些数据安全的内容，总之目的都是做安全运营。\n\n除去以上，休闲时间应该会养成并保持定期打HTB的习惯，算是一些复健活动并且~~我真的非常想过OSCP~~。\n\n再休闲一些的活动就是读书啦，微信读书22年读了10本，今年目前已经读完2本了，超越去年记录指日可待。以及22年底开始从中图网买纸质书，会放在床头睡前读一段，比较助眠。\n\n游戏的话，steam打折买的巫师3还没动，今年还有王国之泪要玩。\n\n就是这样啦，新年快乐！","source":"_posts/blog重构啦.md","raw":"---\ntitle: blog重构啦！\ntoc: false\ndate: 2023-01-29 07:12:35\ntags: 随便叨叨\ncategories: [其它笔记]\n---\n\nHello everybody!\n\n趁着开工不太忙，我把手里的各种笔记整理了一下，准备整合成一个知识库。同样，也重新审视了一下现有的内容，做了一些调整。\n\n之所以很长一段时间没有更新blog，主要是因为一部分笔记没有脱敏处理就没放上来，其次就是某些特定主题的内容，被我直接做成了一个git项目放在了主页。\n\n我思考了一下我对这个博客的定位，决定把它做成一个更加偏向整合所学->思考总结->产出的地方，不只是安全相关。东一块西一块的产出也造成过一些分类定义焦虑，所以之后会不断的做一些整合修整。\n\n啊顺便说一下22年的一些总结吧。\n\n工作上我自己最喜欢的部分是做了一些风险收敛的研究，写了一些非常落地的风险收敛解决方案。这些内容让我很惊讶的发现了甲方安全运营角度和乙方攻击视角的不同，安全运营最头疼的其实不是‘如何修复漏洞’，而是‘当前修复方案在实际情况中存在一些不对等/无法实现时，如何平衡成本、是否需要修改缓解措施、如何缓解处理效果更好’+‘如何更好更具有性价比的在全部资产上收敛风险’。\n\n在技术上的提升，主要是作为红队实施了一些攻防项目，OSCP虽然没考过但确实学到了很多东西。（啊短时间之内应该不会再考了吧\n\n说到OSCP，在ddl的高压之下，也~~被迫~~阅读了不少关于自我提升主题的书籍，实际地应用了一些技巧和思路；尝试了很多个todo APP，终于找到了目前我比较喜欢的一个；尝试了很多种记笔记的方式以及应用，目前也算是找到了最舒适的应用，配置了非常多自定义插件和快捷键调整。\n\n再来说关于23年的。。。展望？\n\n技术上主要方向会是做一些云安全的了解，从攻击技术拓展到安全运营。另外也会看一些数据安全的内容，总之目的都是做安全运营。\n\n除去以上，休闲时间应该会养成并保持定期打HTB的习惯，算是一些复健活动并且~~我真的非常想过OSCP~~。\n\n再休闲一些的活动就是读书啦，微信读书22年读了10本，今年目前已经读完2本了，超越去年记录指日可待。以及22年底开始从中图网买纸质书，会放在床头睡前读一段，比较助眠。\n\n游戏的话，steam打折买的巫师3还没动，今年还有王国之泪要玩。\n\n就是这样啦，新年快乐！","slug":"blog重构啦","published":1,"updated":"2023-02-20T06:31:12.497Z","_id":"clecfhfz60003x94028v10njw","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Hello everybody!</p>\n<p>趁着开工不太忙，我把手里的各种笔记整理了一下，准备整合成一个知识库。同样，也重新审视了一下现有的内容，做了一些调整。</p>\n<p>之所以很长一段时间没有更新blog，主要是因为一部分笔记没有脱敏处理就没放上来，其次就是某些特定主题的内容，被我直接做成了一个git项目放在了主页。</p>\n<p>我思考了一下我对这个博客的定位，决定把它做成一个更加偏向整合所学-&gt;思考总结-&gt;产出的地方，不只是安全相关。东一块西一块的产出也造成过一些分类定义焦虑，所以之后会不断的做一些整合修整。</p>\n<p>啊顺便说一下22年的一些总结吧。</p>\n<p>工作上我自己最喜欢的部分是做了一些风险收敛的研究，写了一些非常落地的风险收敛解决方案。这些内容让我很惊讶的发现了甲方安全运营角度和乙方攻击视角的不同，安全运营最头疼的其实不是‘如何修复漏洞’，而是‘当前修复方案在实际情况中存在一些不对等/无法实现时，如何平衡成本、是否需要修改缓解措施、如何缓解处理效果更好’+‘如何更好更具有性价比的在全部资产上收敛风险’。</p>\n<p>在技术上的提升，主要是作为红队实施了一些攻防项目，OSCP虽然没考过但确实学到了很多东西。（啊短时间之内应该不会再考了吧</p>\n<p>说到OSCP，在ddl的高压之下，也<del>被迫</del>阅读了不少关于自我提升主题的书籍，实际地应用了一些技巧和思路；尝试了很多个todo APP，终于找到了目前我比较喜欢的一个；尝试了很多种记笔记的方式以及应用，目前也算是找到了最舒适的应用，配置了非常多自定义插件和快捷键调整。</p>\n<p>再来说关于23年的。。。展望？</p>\n<p>技术上主要方向会是做一些云安全的了解，从攻击技术拓展到安全运营。另外也会看一些数据安全的内容，总之目的都是做安全运营。</p>\n<p>除去以上，休闲时间应该会养成并保持定期打HTB的习惯，算是一些复健活动并且<del>我真的非常想过OSCP</del>。</p>\n<p>再休闲一些的活动就是读书啦，微信读书22年读了10本，今年目前已经读完2本了，超越去年记录指日可待。以及22年底开始从中图网买纸质书，会放在床头睡前读一段，比较助眠。</p>\n<p>游戏的话，steam打折买的巫师3还没动，今年还有王国之泪要玩。</p>\n<p>就是这样啦，新年快乐！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hello everybody!</p>\n<p>趁着开工不太忙，我把手里的各种笔记整理了一下，准备整合成一个知识库。同样，也重新审视了一下现有的内容，做了一些调整。</p>\n<p>之所以很长一段时间没有更新blog，主要是因为一部分笔记没有脱敏处理就没放上来，其次就是某些特定主题的内容，被我直接做成了一个git项目放在了主页。</p>\n<p>我思考了一下我对这个博客的定位，决定把它做成一个更加偏向整合所学-&gt;思考总结-&gt;产出的地方，不只是安全相关。东一块西一块的产出也造成过一些分类定义焦虑，所以之后会不断的做一些整合修整。</p>\n<p>啊顺便说一下22年的一些总结吧。</p>\n<p>工作上我自己最喜欢的部分是做了一些风险收敛的研究，写了一些非常落地的风险收敛解决方案。这些内容让我很惊讶的发现了甲方安全运营角度和乙方攻击视角的不同，安全运营最头疼的其实不是‘如何修复漏洞’，而是‘当前修复方案在实际情况中存在一些不对等/无法实现时，如何平衡成本、是否需要修改缓解措施、如何缓解处理效果更好’+‘如何更好更具有性价比的在全部资产上收敛风险’。</p>\n<p>在技术上的提升，主要是作为红队实施了一些攻防项目，OSCP虽然没考过但确实学到了很多东西。（啊短时间之内应该不会再考了吧</p>\n<p>说到OSCP，在ddl的高压之下，也<del>被迫</del>阅读了不少关于自我提升主题的书籍，实际地应用了一些技巧和思路；尝试了很多个todo APP，终于找到了目前我比较喜欢的一个；尝试了很多种记笔记的方式以及应用，目前也算是找到了最舒适的应用，配置了非常多自定义插件和快捷键调整。</p>\n<p>再来说关于23年的。。。展望？</p>\n<p>技术上主要方向会是做一些云安全的了解，从攻击技术拓展到安全运营。另外也会看一些数据安全的内容，总之目的都是做安全运营。</p>\n<p>除去以上，休闲时间应该会养成并保持定期打HTB的习惯，算是一些复健活动并且<del>我真的非常想过OSCP</del>。</p>\n<p>再休闲一些的活动就是读书啦，微信读书22年读了10本，今年目前已经读完2本了，超越去年记录指日可待。以及22年底开始从中图网买纸质书，会放在床头睡前读一段，比较助眠。</p>\n<p>游戏的话，steam打折买的巫师3还没动，今年还有王国之泪要玩。</p>\n<p>就是这样啦，新年快乐！</p>\n"},{"title":"在kali上安装clash/V2raya的教程","toc":true,"date":"2022-09-23T02:33:04.000Z","_content":"\n19年写过的东西了，当时被小管家gank文章无了，好在还有备份。这次更新V2raya的时候正好放上来，给自己一个安装指导。\n\n然后，本文仅提供Clash和V2raya的Kali系统对比和安装教程（因为Win的要简单多了）。\n\n先把结论放在最前面，Clash的优点是可以自动切换IP，v2raya要手动切，但个人使用之后感觉Linux端Clash真心不如V2raya，不过win端Clash的舒适度大于V2raya。我自己经过反复踩雷之后选择Kali虚拟机用V2raya，主机Windows用Clash。\n\n当然，Clash的win端想要开全局代理把运行Kali的虚拟机流量代理起来又是另一个很头秃的问题，毕竟Clash创造出来的本意似乎并不是服务于更好的全局代，我至今没能找到简单又完美的开局办法（也可能因为我妥协了换成V2raya for Linux）。\n\nV2ray for win可以直接全局代理搞定虚拟机，但是配置要比Clash麻烦一些。而且出于各种需求，我还是倾向于给Kali自己开代理，主机端就不需要一直开着代理用了。\n\n但从安装在Kali的体验来说，V2raya更适合像我一样，经常从github下个脚本跑的人，毕竟Clash的全局代额外使用了脚本之后在kali控制台内体验仍然不好（再次羡慕Ubuntu的网络全局配置），使用Clash的话往往需要加一条 --proxy x.x.x.x:xxx，还容易不好使。Kali虽然自带proxychains，但一个是配置起来麻烦，另一个是如果用的机场，可能需要多次的手动调整配置文件。\n\n先写Clash，V2raya在下面。\n\nClash：\n\n下载合适的版本，我在kali2021上用的是clash-linux-amd64-v1.6.0.gz。\n\n解压`gzip -d clash-linux-amd64-v1.6.0.gz `\n\n(注意修改版本号，改成你自己下载的版本)\n给个权限\n`sudo chmod +x ./clash-linux-amd64-v1.6.0`\n，这里想把文件名简化一下也可以。（再次注意clash的文件名可能需要改动成你自己拥有的）\n\n运行\n`./clash-linux-amd64-v1.6.0`\n， 注意Clash默认每次开机后需要手动开启，也就是该命令每次开机你都需要跑一下。\n\n然后路径\n`/home/用户名/.config/clash`\n下会有自动生成的配置文件，没有.config文件的去view里打开show hidden file。（用户名是你自己设置的啊，会不一样）\n\n这里的两个配置文件要更换，如果你的XXX服务商没有提供配置文件，建议win下装个Clash，配好了再把配置文件拿过来，反正win端Clash也挺好用的，装个不亏。\n\nconfig.yaml：从win端路径C:\\Users\\用户名\\.config\\clash\\profiles拿到一个多半是`数字.yml`格式的yaml文件，改名成config.yaml，丢进/home/kali/.config/clash替换原文件。（注意这个yml和yaml的区别）\n\nCountry.mmdb：从win端路径C:\\Users\\用户名\\.config\\clash下拿到Country.mmdb，丢进/home/kali/.config/clash替换原文件。（Users在中文版win里面是`用户`，用户名就是你的账户名字啦）\n\n重新运行\n./clash-linux-amd64-v1.6.0\n（不需要sudo），打开浏览器访问\nhttp://clash.razord.top/#/proxies\n看Clash配置，浏览器端口设置`HTTP:127.0.0.1:7890, SSL:127.0.0.1:7890, SOCKS_v5:127.0.0.1:7891`(preference->network settings,新版本似乎已经统一到127.0.0.1:7890了,socks_v5要改成7890，具体要看运行clash时候控制台显示什么)，访问外网确定能使。(运行clash的terminal不要关，关了就结束运行了)\n\n那么到这里，问题来了，目前的配置能让你的Kali浏览器访问外网，Clash的作用仅仅是帮你在127.0.0.1:7890开了一个代理通道，但除了浏览器以外的流量想要指向代理就得自己设置。这可就有名堂了，比如控制台、环境变量、apt源、npm源、docker，这些都要自行配置指向代理通道。\n\n如果是造轮子达人可以写个自定义脚本，我等渣渣还是优先找别人的轮子了，指路himanshub16/ProxyMan，一键配置（运行不需要sudo），这个脚本有一处难点，就是它原本是写给linux用，所以kali有些环境变量路径不适配，需要切换至bash让脚本自行适配环境变量再切回来，具体操作为:\n控制台\nexec bash\n进入bash模式，\nsource ~/.bashrc\n更改bashrc配置，安装ProxyMan脚本\n./install\n，配置生效后\nexec zsh\n回到zsh模式，\nproxyman set\n设置一键配置端口。 （这里有不会用的实在解决不了的再来问我吧，容易遇到的问题种类比较多，具体问题具体分析）\n\n但以上仅能保证脚本内提及的各种控制台、apt源、npm源等一键配置代理，其它你会用到的临时项目都要手动指向代理通道，或者自己手动添加进配置文件or脚本。（或许也有更好的解决办法但是我还是选择v2raya）\n\nV2raya：\n\nLinux版建议使用v2rayA/v2rayA，比直接上原生V2ray好使。\n\n安装方法指路官方文档，照着搞。\n\nv2raya默认开机自启动，省心省力。(注意！现在的1.5.x版本已经不支持默认开机自启动，也不支持软件源更新时自动更新版本了，具体命令去[这里](https://github.com/v2rayA/v2rayA/issues/237)看)\n\n访问`http://localhost:2017/`，导入你的XXX服务商生成的配置文件，记得把全局透明代理打开。\n\n设置不会改的就保持默认，我自己开了DNS防劫持(有的时候会出现一些连不上的情况，如果排除是订阅源的问题，我会重新开关一下DNS防劫持)。\n\n\n总结：写的很稀碎并不保姆，累了（划掉）\n\n之所以大费周张地写了很多Clash内容，只是因为相对来说Clash for Kali的教程还是很少，官方文档也是云里雾里，而且也基本没人提新版本的Kali网络配置没有了全局代理，要么能打开谷歌就算胜利，要么旧版Kali教程来回搬运。偶尔有提到Clash for Linux的，也是打开配置文件挨个手动更改配置代理，这很不cool。\n\n虽然我仍然推荐V2rayA，但或许会有人有一天用的上这些内容。\n\n","source":"_posts/kali的VPN代理软件选择.md","raw":"---\ntitle: 在kali上安装clash/V2raya的教程\ntoc: true\ndate: 2022-09-23 02:33:04\ntags: 踩坑\ncategories: [踩坑记录]\n---\n\n19年写过的东西了，当时被小管家gank文章无了，好在还有备份。这次更新V2raya的时候正好放上来，给自己一个安装指导。\n\n然后，本文仅提供Clash和V2raya的Kali系统对比和安装教程（因为Win的要简单多了）。\n\n先把结论放在最前面，Clash的优点是可以自动切换IP，v2raya要手动切，但个人使用之后感觉Linux端Clash真心不如V2raya，不过win端Clash的舒适度大于V2raya。我自己经过反复踩雷之后选择Kali虚拟机用V2raya，主机Windows用Clash。\n\n当然，Clash的win端想要开全局代理把运行Kali的虚拟机流量代理起来又是另一个很头秃的问题，毕竟Clash创造出来的本意似乎并不是服务于更好的全局代，我至今没能找到简单又完美的开局办法（也可能因为我妥协了换成V2raya for Linux）。\n\nV2ray for win可以直接全局代理搞定虚拟机，但是配置要比Clash麻烦一些。而且出于各种需求，我还是倾向于给Kali自己开代理，主机端就不需要一直开着代理用了。\n\n但从安装在Kali的体验来说，V2raya更适合像我一样，经常从github下个脚本跑的人，毕竟Clash的全局代额外使用了脚本之后在kali控制台内体验仍然不好（再次羡慕Ubuntu的网络全局配置），使用Clash的话往往需要加一条 --proxy x.x.x.x:xxx，还容易不好使。Kali虽然自带proxychains，但一个是配置起来麻烦，另一个是如果用的机场，可能需要多次的手动调整配置文件。\n\n先写Clash，V2raya在下面。\n\nClash：\n\n下载合适的版本，我在kali2021上用的是clash-linux-amd64-v1.6.0.gz。\n\n解压`gzip -d clash-linux-amd64-v1.6.0.gz `\n\n(注意修改版本号，改成你自己下载的版本)\n给个权限\n`sudo chmod +x ./clash-linux-amd64-v1.6.0`\n，这里想把文件名简化一下也可以。（再次注意clash的文件名可能需要改动成你自己拥有的）\n\n运行\n`./clash-linux-amd64-v1.6.0`\n， 注意Clash默认每次开机后需要手动开启，也就是该命令每次开机你都需要跑一下。\n\n然后路径\n`/home/用户名/.config/clash`\n下会有自动生成的配置文件，没有.config文件的去view里打开show hidden file。（用户名是你自己设置的啊，会不一样）\n\n这里的两个配置文件要更换，如果你的XXX服务商没有提供配置文件，建议win下装个Clash，配好了再把配置文件拿过来，反正win端Clash也挺好用的，装个不亏。\n\nconfig.yaml：从win端路径C:\\Users\\用户名\\.config\\clash\\profiles拿到一个多半是`数字.yml`格式的yaml文件，改名成config.yaml，丢进/home/kali/.config/clash替换原文件。（注意这个yml和yaml的区别）\n\nCountry.mmdb：从win端路径C:\\Users\\用户名\\.config\\clash下拿到Country.mmdb，丢进/home/kali/.config/clash替换原文件。（Users在中文版win里面是`用户`，用户名就是你的账户名字啦）\n\n重新运行\n./clash-linux-amd64-v1.6.0\n（不需要sudo），打开浏览器访问\nhttp://clash.razord.top/#/proxies\n看Clash配置，浏览器端口设置`HTTP:127.0.0.1:7890, SSL:127.0.0.1:7890, SOCKS_v5:127.0.0.1:7891`(preference->network settings,新版本似乎已经统一到127.0.0.1:7890了,socks_v5要改成7890，具体要看运行clash时候控制台显示什么)，访问外网确定能使。(运行clash的terminal不要关，关了就结束运行了)\n\n那么到这里，问题来了，目前的配置能让你的Kali浏览器访问外网，Clash的作用仅仅是帮你在127.0.0.1:7890开了一个代理通道，但除了浏览器以外的流量想要指向代理就得自己设置。这可就有名堂了，比如控制台、环境变量、apt源、npm源、docker，这些都要自行配置指向代理通道。\n\n如果是造轮子达人可以写个自定义脚本，我等渣渣还是优先找别人的轮子了，指路himanshub16/ProxyMan，一键配置（运行不需要sudo），这个脚本有一处难点，就是它原本是写给linux用，所以kali有些环境变量路径不适配，需要切换至bash让脚本自行适配环境变量再切回来，具体操作为:\n控制台\nexec bash\n进入bash模式，\nsource ~/.bashrc\n更改bashrc配置，安装ProxyMan脚本\n./install\n，配置生效后\nexec zsh\n回到zsh模式，\nproxyman set\n设置一键配置端口。 （这里有不会用的实在解决不了的再来问我吧，容易遇到的问题种类比较多，具体问题具体分析）\n\n但以上仅能保证脚本内提及的各种控制台、apt源、npm源等一键配置代理，其它你会用到的临时项目都要手动指向代理通道，或者自己手动添加进配置文件or脚本。（或许也有更好的解决办法但是我还是选择v2raya）\n\nV2raya：\n\nLinux版建议使用v2rayA/v2rayA，比直接上原生V2ray好使。\n\n安装方法指路官方文档，照着搞。\n\nv2raya默认开机自启动，省心省力。(注意！现在的1.5.x版本已经不支持默认开机自启动，也不支持软件源更新时自动更新版本了，具体命令去[这里](https://github.com/v2rayA/v2rayA/issues/237)看)\n\n访问`http://localhost:2017/`，导入你的XXX服务商生成的配置文件，记得把全局透明代理打开。\n\n设置不会改的就保持默认，我自己开了DNS防劫持(有的时候会出现一些连不上的情况，如果排除是订阅源的问题，我会重新开关一下DNS防劫持)。\n\n\n总结：写的很稀碎并不保姆，累了（划掉）\n\n之所以大费周张地写了很多Clash内容，只是因为相对来说Clash for Kali的教程还是很少，官方文档也是云里雾里，而且也基本没人提新版本的Kali网络配置没有了全局代理，要么能打开谷歌就算胜利，要么旧版Kali教程来回搬运。偶尔有提到Clash for Linux的，也是打开配置文件挨个手动更改配置代理，这很不cool。\n\n虽然我仍然推荐V2rayA，但或许会有人有一天用的上这些内容。\n\n","slug":"kali的VPN代理软件选择","published":1,"updated":"2023-02-20T06:31:34.617Z","_id":"clecfhfzd0006x940e14j8jyv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>19年写过的东西了，当时被小管家gank文章无了，好在还有备份。这次更新V2raya的时候正好放上来，给自己一个安装指导。</p>\n<p>然后，本文仅提供Clash和V2raya的Kali系统对比和安装教程（因为Win的要简单多了）。</p>\n<p>先把结论放在最前面，Clash的优点是可以自动切换IP，v2raya要手动切，但个人使用之后感觉Linux端Clash真心不如V2raya，不过win端Clash的舒适度大于V2raya。我自己经过反复踩雷之后选择Kali虚拟机用V2raya，主机Windows用Clash。</p>\n<p>当然，Clash的win端想要开全局代理把运行Kali的虚拟机流量代理起来又是另一个很头秃的问题，毕竟Clash创造出来的本意似乎并不是服务于更好的全局代，我至今没能找到简单又完美的开局办法（也可能因为我妥协了换成V2raya for Linux）。</p>\n<p>V2ray for win可以直接全局代理搞定虚拟机，但是配置要比Clash麻烦一些。而且出于各种需求，我还是倾向于给Kali自己开代理，主机端就不需要一直开着代理用了。</p>\n<p>但从安装在Kali的体验来说，V2raya更适合像我一样，经常从github下个脚本跑的人，毕竟Clash的全局代额外使用了脚本之后在kali控制台内体验仍然不好（再次羡慕Ubuntu的网络全局配置），使用Clash的话往往需要加一条 –proxy x.x.x.x:xxx，还容易不好使。Kali虽然自带proxychains，但一个是配置起来麻烦，另一个是如果用的机场，可能需要多次的手动调整配置文件。</p>\n<p>先写Clash，V2raya在下面。</p>\n<p>Clash：</p>\n<p>下载合适的版本，我在kali2021上用的是clash-linux-amd64-v1.6.0.gz。</p>\n<p>解压<code>gzip -d clash-linux-amd64-v1.6.0.gz </code></p>\n<p>(注意修改版本号，改成你自己下载的版本)<br>给个权限<br><code>sudo chmod +x ./clash-linux-amd64-v1.6.0</code><br>，这里想把文件名简化一下也可以。（再次注意clash的文件名可能需要改动成你自己拥有的）</p>\n<p>运行<br><code>./clash-linux-amd64-v1.6.0</code><br>， 注意Clash默认每次开机后需要手动开启，也就是该命令每次开机你都需要跑一下。</p>\n<p>然后路径<br><code>/home/用户名/.config/clash</code><br>下会有自动生成的配置文件，没有.config文件的去view里打开show hidden file。（用户名是你自己设置的啊，会不一样）</p>\n<p>这里的两个配置文件要更换，如果你的XXX服务商没有提供配置文件，建议win下装个Clash，配好了再把配置文件拿过来，反正win端Clash也挺好用的，装个不亏。</p>\n<p>config.yaml：从win端路径C:\\Users\\用户名.config\\clash\\profiles拿到一个多半是<code>数字.yml</code>格式的yaml文件，改名成config.yaml，丢进/home/kali/.config/clash替换原文件。（注意这个yml和yaml的区别）</p>\n<p>Country.mmdb：从win端路径C:\\Users\\用户名.config\\clash下拿到Country.mmdb，丢进/home/kali/.config/clash替换原文件。（Users在中文版win里面是<code>用户</code>，用户名就是你的账户名字啦）</p>\n<p>重新运行<br>./clash-linux-amd64-v1.6.0<br>（不需要sudo），打开浏览器访问<br><a href=\"http://clash.razord.top/#/proxies\">http://clash.razord.top/#/proxies</a><br>看Clash配置，浏览器端口设置<code>HTTP:127.0.0.1:7890, SSL:127.0.0.1:7890, SOCKS_v5:127.0.0.1:7891</code>(preference-&gt;network settings,新版本似乎已经统一到127.0.0.1:7890了,socks_v5要改成7890，具体要看运行clash时候控制台显示什么)，访问外网确定能使。(运行clash的terminal不要关，关了就结束运行了)</p>\n<p>那么到这里，问题来了，目前的配置能让你的Kali浏览器访问外网，Clash的作用仅仅是帮你在127.0.0.1:7890开了一个代理通道，但除了浏览器以外的流量想要指向代理就得自己设置。这可就有名堂了，比如控制台、环境变量、apt源、npm源、docker，这些都要自行配置指向代理通道。</p>\n<p>如果是造轮子达人可以写个自定义脚本，我等渣渣还是优先找别人的轮子了，指路himanshub16/ProxyMan，一键配置（运行不需要sudo），这个脚本有一处难点，就是它原本是写给linux用，所以kali有些环境变量路径不适配，需要切换至bash让脚本自行适配环境变量再切回来，具体操作为:<br>控制台<br>exec bash<br>进入bash模式，<br>source ~/.bashrc<br>更改bashrc配置，安装ProxyMan脚本<br>./install<br>，配置生效后<br>exec zsh<br>回到zsh模式，<br>proxyman set<br>设置一键配置端口。 （这里有不会用的实在解决不了的再来问我吧，容易遇到的问题种类比较多，具体问题具体分析）</p>\n<p>但以上仅能保证脚本内提及的各种控制台、apt源、npm源等一键配置代理，其它你会用到的临时项目都要手动指向代理通道，或者自己手动添加进配置文件or脚本。（或许也有更好的解决办法但是我还是选择v2raya）</p>\n<p>V2raya：</p>\n<p>Linux版建议使用v2rayA/v2rayA，比直接上原生V2ray好使。</p>\n<p>安装方法指路官方文档，照着搞。</p>\n<p>v2raya默认开机自启动，省心省力。(注意！现在的1.5.x版本已经不支持默认开机自启动，也不支持软件源更新时自动更新版本了，具体命令去<a href=\"https://github.com/v2rayA/v2rayA/issues/237\">这里</a>看)</p>\n<p>访问<code>http://localhost:2017/</code>，导入你的XXX服务商生成的配置文件，记得把全局透明代理打开。</p>\n<p>设置不会改的就保持默认，我自己开了DNS防劫持(有的时候会出现一些连不上的情况，如果排除是订阅源的问题，我会重新开关一下DNS防劫持)。</p>\n<p>总结：写的很稀碎并不保姆，累了（划掉）</p>\n<p>之所以大费周张地写了很多Clash内容，只是因为相对来说Clash for Kali的教程还是很少，官方文档也是云里雾里，而且也基本没人提新版本的Kali网络配置没有了全局代理，要么能打开谷歌就算胜利，要么旧版Kali教程来回搬运。偶尔有提到Clash for Linux的，也是打开配置文件挨个手动更改配置代理，这很不cool。</p>\n<p>虽然我仍然推荐V2rayA，但或许会有人有一天用的上这些内容。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>19年写过的东西了，当时被小管家gank文章无了，好在还有备份。这次更新V2raya的时候正好放上来，给自己一个安装指导。</p>\n<p>然后，本文仅提供Clash和V2raya的Kali系统对比和安装教程（因为Win的要简单多了）。</p>\n<p>先把结论放在最前面，Clash的优点是可以自动切换IP，v2raya要手动切，但个人使用之后感觉Linux端Clash真心不如V2raya，不过win端Clash的舒适度大于V2raya。我自己经过反复踩雷之后选择Kali虚拟机用V2raya，主机Windows用Clash。</p>\n<p>当然，Clash的win端想要开全局代理把运行Kali的虚拟机流量代理起来又是另一个很头秃的问题，毕竟Clash创造出来的本意似乎并不是服务于更好的全局代，我至今没能找到简单又完美的开局办法（也可能因为我妥协了换成V2raya for Linux）。</p>\n<p>V2ray for win可以直接全局代理搞定虚拟机，但是配置要比Clash麻烦一些。而且出于各种需求，我还是倾向于给Kali自己开代理，主机端就不需要一直开着代理用了。</p>\n<p>但从安装在Kali的体验来说，V2raya更适合像我一样，经常从github下个脚本跑的人，毕竟Clash的全局代额外使用了脚本之后在kali控制台内体验仍然不好（再次羡慕Ubuntu的网络全局配置），使用Clash的话往往需要加一条 –proxy x.x.x.x:xxx，还容易不好使。Kali虽然自带proxychains，但一个是配置起来麻烦，另一个是如果用的机场，可能需要多次的手动调整配置文件。</p>\n<p>先写Clash，V2raya在下面。</p>\n<p>Clash：</p>\n<p>下载合适的版本，我在kali2021上用的是clash-linux-amd64-v1.6.0.gz。</p>\n<p>解压<code>gzip -d clash-linux-amd64-v1.6.0.gz </code></p>\n<p>(注意修改版本号，改成你自己下载的版本)<br>给个权限<br><code>sudo chmod +x ./clash-linux-amd64-v1.6.0</code><br>，这里想把文件名简化一下也可以。（再次注意clash的文件名可能需要改动成你自己拥有的）</p>\n<p>运行<br><code>./clash-linux-amd64-v1.6.0</code><br>， 注意Clash默认每次开机后需要手动开启，也就是该命令每次开机你都需要跑一下。</p>\n<p>然后路径<br><code>/home/用户名/.config/clash</code><br>下会有自动生成的配置文件，没有.config文件的去view里打开show hidden file。（用户名是你自己设置的啊，会不一样）</p>\n<p>这里的两个配置文件要更换，如果你的XXX服务商没有提供配置文件，建议win下装个Clash，配好了再把配置文件拿过来，反正win端Clash也挺好用的，装个不亏。</p>\n<p>config.yaml：从win端路径C:\\Users\\用户名.config\\clash\\profiles拿到一个多半是<code>数字.yml</code>格式的yaml文件，改名成config.yaml，丢进/home/kali/.config/clash替换原文件。（注意这个yml和yaml的区别）</p>\n<p>Country.mmdb：从win端路径C:\\Users\\用户名.config\\clash下拿到Country.mmdb，丢进/home/kali/.config/clash替换原文件。（Users在中文版win里面是<code>用户</code>，用户名就是你的账户名字啦）</p>\n<p>重新运行<br>./clash-linux-amd64-v1.6.0<br>（不需要sudo），打开浏览器访问<br><a href=\"http://clash.razord.top/#/proxies\">http://clash.razord.top/#/proxies</a><br>看Clash配置，浏览器端口设置<code>HTTP:127.0.0.1:7890, SSL:127.0.0.1:7890, SOCKS_v5:127.0.0.1:7891</code>(preference-&gt;network settings,新版本似乎已经统一到127.0.0.1:7890了,socks_v5要改成7890，具体要看运行clash时候控制台显示什么)，访问外网确定能使。(运行clash的terminal不要关，关了就结束运行了)</p>\n<p>那么到这里，问题来了，目前的配置能让你的Kali浏览器访问外网，Clash的作用仅仅是帮你在127.0.0.1:7890开了一个代理通道，但除了浏览器以外的流量想要指向代理就得自己设置。这可就有名堂了，比如控制台、环境变量、apt源、npm源、docker，这些都要自行配置指向代理通道。</p>\n<p>如果是造轮子达人可以写个自定义脚本，我等渣渣还是优先找别人的轮子了，指路himanshub16/ProxyMan，一键配置（运行不需要sudo），这个脚本有一处难点，就是它原本是写给linux用，所以kali有些环境变量路径不适配，需要切换至bash让脚本自行适配环境变量再切回来，具体操作为:<br>控制台<br>exec bash<br>进入bash模式，<br>source ~/.bashrc<br>更改bashrc配置，安装ProxyMan脚本<br>./install<br>，配置生效后<br>exec zsh<br>回到zsh模式，<br>proxyman set<br>设置一键配置端口。 （这里有不会用的实在解决不了的再来问我吧，容易遇到的问题种类比较多，具体问题具体分析）</p>\n<p>但以上仅能保证脚本内提及的各种控制台、apt源、npm源等一键配置代理，其它你会用到的临时项目都要手动指向代理通道，或者自己手动添加进配置文件or脚本。（或许也有更好的解决办法但是我还是选择v2raya）</p>\n<p>V2raya：</p>\n<p>Linux版建议使用v2rayA/v2rayA，比直接上原生V2ray好使。</p>\n<p>安装方法指路官方文档，照着搞。</p>\n<p>v2raya默认开机自启动，省心省力。(注意！现在的1.5.x版本已经不支持默认开机自启动，也不支持软件源更新时自动更新版本了，具体命令去<a href=\"https://github.com/v2rayA/v2rayA/issues/237\">这里</a>看)</p>\n<p>访问<code>http://localhost:2017/</code>，导入你的XXX服务商生成的配置文件，记得把全局透明代理打开。</p>\n<p>设置不会改的就保持默认，我自己开了DNS防劫持(有的时候会出现一些连不上的情况，如果排除是订阅源的问题，我会重新开关一下DNS防劫持)。</p>\n<p>总结：写的很稀碎并不保姆，累了（划掉）</p>\n<p>之所以大费周张地写了很多Clash内容，只是因为相对来说Clash for Kali的教程还是很少，官方文档也是云里雾里，而且也基本没人提新版本的Kali网络配置没有了全局代理，要么能打开谷歌就算胜利，要么旧版Kali教程来回搬运。偶尔有提到Clash for Linux的，也是打开配置文件挨个手动更改配置代理，这很不cool。</p>\n<p>虽然我仍然推荐V2rayA，但或许会有人有一天用的上这些内容。</p>\n"},{"title":"一次差点翻车的kali v2raya版本更新经历","toc":true,"date":"2023-02-13T16:09:05.000Z","_content":"\n事情的起因是这样的，我在公司和家里各有一个kali虚拟机，很多新工具骚操作都是先在公司机上跑过觉得好用再回家搞一遍。\n由于一些历史原因，我的kali装了v2raya做代理之后并没有跟随apt-get一起更新版本，所以跑了很久的1.5版本。后来发现2.x版本有了负载均衡加上一些其它优化，比较心动，遂更新了一遍，没想到第二遍在家做的时候险些翻车。\n\n正常的更新路线大抵是这样的：参考[官方文档](https://v2raya.org/en/docs/prologue/installation/debian/)，由于我不打算跟随最新版本一起更新，所以使用的是下载deb安装包的方式更新。以下是正确的操作步骤：\n\n1. 下载最新deb[安装包](https://github.com/v2rayA/v2rayA/releases) \n2. 使用官方推荐脚本更新xray-core `curl -Ls https://mirrors.v2raya.org/go.sh | sudo bash`\n3. apt安装deb包\n\n但是，因为一些失误，我这里是先更新了v2raya版本没有更新xray-core，导致新版本v2raya无法运行，报错core版本低。也就是说，我翻不了墙，除非更新core版本，但官方脚本又要翻墙运行。。。\n\n当然，这里其实还是尝试了用物理机直接下好core包丢进虚拟机，但由于众所周知的vmtools兼容性问题，这里丢不进来，哈哈哈（以及送给大家一个我平时用着挺好但今天没能解决问题的激活vmtools的方式：控制台直接输入`/usr/bin/vmware-user`）\n\nvmtools的问题晚点再说，我又换了一个思路，如果你有看过我之前发的内容，那么你会知道我的物理机-windows是用了clash for windows（很遗憾，是没有tun模式的老版本）。那么如何让clash for windows代理我的kali虚拟机流量呢？\n\n闲言少叙，我还要赶紧睡觉，总之，clash开启`allow LAN`选项，物理机端打开控制台获取对外网卡IP，虚拟机网络配置不确定有没有影响，我这里是保持桥接。clash如果没有更改过端口的话应该是默认7890。（当然如果你是有tun模式的clash好像是可以直接开启就行）\n\n这样我们就拿到了proxy的地址：`物理机ip:7890`\n\n虚拟机端配网页访问比较简单，不清楚的可以看ref第一个链接。控制台有两种方式，一种是配置bash的proxy，也是同样在ref第一个链接（我印象里这部分内容我之前搞clash for kali的时候踩过坑，需要手动配置的项目有很多，不只是配bash proxy就可以的，感兴趣的可以看另外那篇文章，因为我不是希望永久使用物理机clash来代理虚拟机流量所以我不折腾配置）\n\n另一种配置控制台的方式就是用kali自带的proxychains4。\n\nsudo权限编辑proxychains4配置`sudo vi /etc/proxychains4.conf `，在最后一行添加`socks5 物理机ip 7890`，保存关闭。\n\n然后以proxychains运行我们想要的更新core脚本：`proxychains curl -Ls https://mirrors.v2raya.org/go.sh | sudo proxychains bash`，注意这里因为有个管道符，所以应该在管道符前后两个命令都加上proxychains，以及后面的命令是sudo在前proxychains在后。\n\n于是成功利用物理机clash作为代理更新好了core版本，虚拟机又可以快乐起来了！\n\n\n\n\nref:\n1. https://www.ngui.cc/article/show-586553.html?action=onClick\n2. https://blog.csdn.net/weixin_68281676/article/details/125477791#:~:text=%E9%85%8D%E7%BD%AE%20%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E4%B8%BA%EF%BC%9A%2Fetc%2F%20proxychains.conf%EF%BC%8C%E5%B0%86%E6%96%87%E4%BB%B6%E6%8B%89%E5%80%92%E6%9C%80%E5%BA%95%E9%83%A8%E3%80%82%20proxychains,%E8%BF%90%E8%A1%8C%E6%96%B9%E6%B3%95%EF%BC%9A%20proxychains%20%2B%20%E7%A8%8B%E5%BA%8F%E3%80%82","source":"_posts/一次差点翻车的v2raya版本更新经历.md","raw":"---\ntitle: 一次差点翻车的kali v2raya版本更新经历\ntoc: true\ndate: 2023-02-14 00:09:05\ntags: 踩坑\ncategories: [踩坑记录]\n---\n\n事情的起因是这样的，我在公司和家里各有一个kali虚拟机，很多新工具骚操作都是先在公司机上跑过觉得好用再回家搞一遍。\n由于一些历史原因，我的kali装了v2raya做代理之后并没有跟随apt-get一起更新版本，所以跑了很久的1.5版本。后来发现2.x版本有了负载均衡加上一些其它优化，比较心动，遂更新了一遍，没想到第二遍在家做的时候险些翻车。\n\n正常的更新路线大抵是这样的：参考[官方文档](https://v2raya.org/en/docs/prologue/installation/debian/)，由于我不打算跟随最新版本一起更新，所以使用的是下载deb安装包的方式更新。以下是正确的操作步骤：\n\n1. 下载最新deb[安装包](https://github.com/v2rayA/v2rayA/releases) \n2. 使用官方推荐脚本更新xray-core `curl -Ls https://mirrors.v2raya.org/go.sh | sudo bash`\n3. apt安装deb包\n\n但是，因为一些失误，我这里是先更新了v2raya版本没有更新xray-core，导致新版本v2raya无法运行，报错core版本低。也就是说，我翻不了墙，除非更新core版本，但官方脚本又要翻墙运行。。。\n\n当然，这里其实还是尝试了用物理机直接下好core包丢进虚拟机，但由于众所周知的vmtools兼容性问题，这里丢不进来，哈哈哈（以及送给大家一个我平时用着挺好但今天没能解决问题的激活vmtools的方式：控制台直接输入`/usr/bin/vmware-user`）\n\nvmtools的问题晚点再说，我又换了一个思路，如果你有看过我之前发的内容，那么你会知道我的物理机-windows是用了clash for windows（很遗憾，是没有tun模式的老版本）。那么如何让clash for windows代理我的kali虚拟机流量呢？\n\n闲言少叙，我还要赶紧睡觉，总之，clash开启`allow LAN`选项，物理机端打开控制台获取对外网卡IP，虚拟机网络配置不确定有没有影响，我这里是保持桥接。clash如果没有更改过端口的话应该是默认7890。（当然如果你是有tun模式的clash好像是可以直接开启就行）\n\n这样我们就拿到了proxy的地址：`物理机ip:7890`\n\n虚拟机端配网页访问比较简单，不清楚的可以看ref第一个链接。控制台有两种方式，一种是配置bash的proxy，也是同样在ref第一个链接（我印象里这部分内容我之前搞clash for kali的时候踩过坑，需要手动配置的项目有很多，不只是配bash proxy就可以的，感兴趣的可以看另外那篇文章，因为我不是希望永久使用物理机clash来代理虚拟机流量所以我不折腾配置）\n\n另一种配置控制台的方式就是用kali自带的proxychains4。\n\nsudo权限编辑proxychains4配置`sudo vi /etc/proxychains4.conf `，在最后一行添加`socks5 物理机ip 7890`，保存关闭。\n\n然后以proxychains运行我们想要的更新core脚本：`proxychains curl -Ls https://mirrors.v2raya.org/go.sh | sudo proxychains bash`，注意这里因为有个管道符，所以应该在管道符前后两个命令都加上proxychains，以及后面的命令是sudo在前proxychains在后。\n\n于是成功利用物理机clash作为代理更新好了core版本，虚拟机又可以快乐起来了！\n\n\n\n\nref:\n1. https://www.ngui.cc/article/show-586553.html?action=onClick\n2. https://blog.csdn.net/weixin_68281676/article/details/125477791#:~:text=%E9%85%8D%E7%BD%AE%20%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E4%B8%BA%EF%BC%9A%2Fetc%2F%20proxychains.conf%EF%BC%8C%E5%B0%86%E6%96%87%E4%BB%B6%E6%8B%89%E5%80%92%E6%9C%80%E5%BA%95%E9%83%A8%E3%80%82%20proxychains,%E8%BF%90%E8%A1%8C%E6%96%B9%E6%B3%95%EF%BC%9A%20proxychains%20%2B%20%E7%A8%8B%E5%BA%8F%E3%80%82","slug":"一次差点翻车的v2raya版本更新经历","published":1,"updated":"2023-05-15T08:15:49.148Z","_id":"clecfhfzg0007x940etxa4s4v","comments":1,"layout":"post","photos":[],"link":"","content":"<p>事情的起因是这样的，我在公司和家里各有一个kali虚拟机，很多新工具骚操作都是先在公司机上跑过觉得好用再回家搞一遍。<br>由于一些历史原因，我的kali装了v2raya做代理之后并没有跟随apt-get一起更新版本，所以跑了很久的1.5版本。后来发现2.x版本有了负载均衡加上一些其它优化，比较心动，遂更新了一遍，没想到第二遍在家做的时候险些翻车。</p>\n<p>正常的更新路线大抵是这样的：参考<a href=\"https://v2raya.org/en/docs/prologue/installation/debian/\">官方文档</a>，由于我不打算跟随最新版本一起更新，所以使用的是下载deb安装包的方式更新。以下是正确的操作步骤：</p>\n<ol>\n<li>下载最新deb<a href=\"https://github.com/v2rayA/v2rayA/releases\">安装包</a> </li>\n<li>使用官方推荐脚本更新xray-core <code>curl -Ls https://mirrors.v2raya.org/go.sh | sudo bash</code></li>\n<li>apt安装deb包</li>\n</ol>\n<p>但是，因为一些失误，我这里是先更新了v2raya版本没有更新xray-core，导致新版本v2raya无法运行，报错core版本低。也就是说，我翻不了墙，除非更新core版本，但官方脚本又要翻墙运行。。。</p>\n<p>当然，这里其实还是尝试了用物理机直接下好core包丢进虚拟机，但由于众所周知的vmtools兼容性问题，这里丢不进来，哈哈哈（以及送给大家一个我平时用着挺好但今天没能解决问题的激活vmtools的方式：控制台直接输入<code>/usr/bin/vmware-user</code>）</p>\n<p>vmtools的问题晚点再说，我又换了一个思路，如果你有看过我之前发的内容，那么你会知道我的物理机-windows是用了clash for windows（很遗憾，是没有tun模式的老版本）。那么如何让clash for windows代理我的kali虚拟机流量呢？</p>\n<p>闲言少叙，我还要赶紧睡觉，总之，clash开启<code>allow LAN</code>选项，物理机端打开控制台获取对外网卡IP，虚拟机网络配置不确定有没有影响，我这里是保持桥接。clash如果没有更改过端口的话应该是默认7890。（当然如果你是有tun模式的clash好像是可以直接开启就行）</p>\n<p>这样我们就拿到了proxy的地址：<code>物理机ip:7890</code></p>\n<p>虚拟机端配网页访问比较简单，不清楚的可以看ref第一个链接。控制台有两种方式，一种是配置bash的proxy，也是同样在ref第一个链接（我印象里这部分内容我之前搞clash for kali的时候踩过坑，需要手动配置的项目有很多，不只是配bash proxy就可以的，感兴趣的可以看另外那篇文章，因为我不是希望永久使用物理机clash来代理虚拟机流量所以我不折腾配置）</p>\n<p>另一种配置控制台的方式就是用kali自带的proxychains4。</p>\n<p>sudo权限编辑proxychains4配置<code>sudo vi /etc/proxychains4.conf </code>，在最后一行添加<code>socks5 物理机ip 7890</code>，保存关闭。</p>\n<p>然后以proxychains运行我们想要的更新core脚本：<code>proxychains curl -Ls https://mirrors.v2raya.org/go.sh | sudo proxychains bash</code>，注意这里因为有个管道符，所以应该在管道符前后两个命令都加上proxychains，以及后面的命令是sudo在前proxychains在后。</p>\n<p>于是成功利用物理机clash作为代理更新好了core版本，虚拟机又可以快乐起来了！</p>\n<p>ref:</p>\n<ol>\n<li><a href=\"https://www.ngui.cc/article/show-586553.html?action=onClick\">https://www.ngui.cc/article/show-586553.html?action=onClick</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_68281676/article/details/125477791#:~:text=%E9%85%8D%E7%BD%AE%20%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E4%B8%BA%EF%BC%9A%2Fetc%2F%20proxychains.conf%EF%BC%8C%E5%B0%86%E6%96%87%E4%BB%B6%E6%8B%89%E5%80%92%E6%9C%80%E5%BA%95%E9%83%A8%E3%80%82%20proxychains,%E8%BF%90%E8%A1%8C%E6%96%B9%E6%B3%95%EF%BC%9A%20proxychains%20%2B%20%E7%A8%8B%E5%BA%8F%E3%80%82\">https://blog.csdn.net/weixin_68281676/article/details/125477791#:~:text=%E9%85%8D%E7%BD%AE%20%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E4%B8%BA%EF%BC%9A%2Fetc%2F%20proxychains.conf%EF%BC%8C%E5%B0%86%E6%96%87%E4%BB%B6%E6%8B%89%E5%80%92%E6%9C%80%E5%BA%95%E9%83%A8%E3%80%82%20proxychains,%E8%BF%90%E8%A1%8C%E6%96%B9%E6%B3%95%EF%BC%9A%20proxychains%20%2B%20%E7%A8%8B%E5%BA%8F%E3%80%82</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>事情的起因是这样的，我在公司和家里各有一个kali虚拟机，很多新工具骚操作都是先在公司机上跑过觉得好用再回家搞一遍。<br>由于一些历史原因，我的kali装了v2raya做代理之后并没有跟随apt-get一起更新版本，所以跑了很久的1.5版本。后来发现2.x版本有了负载均衡加上一些其它优化，比较心动，遂更新了一遍，没想到第二遍在家做的时候险些翻车。</p>\n<p>正常的更新路线大抵是这样的：参考<a href=\"https://v2raya.org/en/docs/prologue/installation/debian/\">官方文档</a>，由于我不打算跟随最新版本一起更新，所以使用的是下载deb安装包的方式更新。以下是正确的操作步骤：</p>\n<ol>\n<li>下载最新deb<a href=\"https://github.com/v2rayA/v2rayA/releases\">安装包</a> </li>\n<li>使用官方推荐脚本更新xray-core <code>curl -Ls https://mirrors.v2raya.org/go.sh | sudo bash</code></li>\n<li>apt安装deb包</li>\n</ol>\n<p>但是，因为一些失误，我这里是先更新了v2raya版本没有更新xray-core，导致新版本v2raya无法运行，报错core版本低。也就是说，我翻不了墙，除非更新core版本，但官方脚本又要翻墙运行。。。</p>\n<p>当然，这里其实还是尝试了用物理机直接下好core包丢进虚拟机，但由于众所周知的vmtools兼容性问题，这里丢不进来，哈哈哈（以及送给大家一个我平时用着挺好但今天没能解决问题的激活vmtools的方式：控制台直接输入<code>/usr/bin/vmware-user</code>）</p>\n<p>vmtools的问题晚点再说，我又换了一个思路，如果你有看过我之前发的内容，那么你会知道我的物理机-windows是用了clash for windows（很遗憾，是没有tun模式的老版本）。那么如何让clash for windows代理我的kali虚拟机流量呢？</p>\n<p>闲言少叙，我还要赶紧睡觉，总之，clash开启<code>allow LAN</code>选项，物理机端打开控制台获取对外网卡IP，虚拟机网络配置不确定有没有影响，我这里是保持桥接。clash如果没有更改过端口的话应该是默认7890。（当然如果你是有tun模式的clash好像是可以直接开启就行）</p>\n<p>这样我们就拿到了proxy的地址：<code>物理机ip:7890</code></p>\n<p>虚拟机端配网页访问比较简单，不清楚的可以看ref第一个链接。控制台有两种方式，一种是配置bash的proxy，也是同样在ref第一个链接（我印象里这部分内容我之前搞clash for kali的时候踩过坑，需要手动配置的项目有很多，不只是配bash proxy就可以的，感兴趣的可以看另外那篇文章，因为我不是希望永久使用物理机clash来代理虚拟机流量所以我不折腾配置）</p>\n<p>另一种配置控制台的方式就是用kali自带的proxychains4。</p>\n<p>sudo权限编辑proxychains4配置<code>sudo vi /etc/proxychains4.conf </code>，在最后一行添加<code>socks5 物理机ip 7890</code>，保存关闭。</p>\n<p>然后以proxychains运行我们想要的更新core脚本：<code>proxychains curl -Ls https://mirrors.v2raya.org/go.sh | sudo proxychains bash</code>，注意这里因为有个管道符，所以应该在管道符前后两个命令都加上proxychains，以及后面的命令是sudo在前proxychains在后。</p>\n<p>于是成功利用物理机clash作为代理更新好了core版本，虚拟机又可以快乐起来了！</p>\n<p>ref:</p>\n<ol>\n<li><a href=\"https://www.ngui.cc/article/show-586553.html?action=onClick\">https://www.ngui.cc/article/show-586553.html?action=onClick</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_68281676/article/details/125477791#:~:text=%E9%85%8D%E7%BD%AE%20%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E4%B8%BA%EF%BC%9A%2Fetc%2F%20proxychains.conf%EF%BC%8C%E5%B0%86%E6%96%87%E4%BB%B6%E6%8B%89%E5%80%92%E6%9C%80%E5%BA%95%E9%83%A8%E3%80%82%20proxychains,%E8%BF%90%E8%A1%8C%E6%96%B9%E6%B3%95%EF%BC%9A%20proxychains%20%2B%20%E7%A8%8B%E5%BA%8F%E3%80%82\">https://blog.csdn.net/weixin_68281676/article/details/125477791#:~:text=%E9%85%8D%E7%BD%AE%20%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E4%B8%BA%EF%BC%9A%2Fetc%2F%20proxychains.conf%EF%BC%8C%E5%B0%86%E6%96%87%E4%BB%B6%E6%8B%89%E5%80%92%E6%9C%80%E5%BA%95%E9%83%A8%E3%80%82%20proxychains,%E8%BF%90%E8%A1%8C%E6%96%B9%E6%B3%95%EF%BC%9A%20proxychains%20%2B%20%E7%A8%8B%E5%BA%8F%E3%80%82</a></li>\n</ol>\n"},{"title":"偶然学到的渗透小tips","toc":true,"date":"2021-12-05T19:40:18.000Z","_content":"\n(人菜就要多学习)\n\n# 简单套路\n\n1. 当请求为`数据更新操作（添加、删除、修改等）`，且请求包没添加（或可绕过）Referer来源地址、随机CSRF-token时，考虑CSRF/XSRF攻击（burp自动生成payload）\n1. 上传位置可以尝试上传html，验证有无html解析（毕竟万年碰不到一个能传马的点了！），危害为钓鱼、挂马、挂黑页等。\n    ```\n<html>\n    <body>\n          <script>alert(1)</script>\n    </body>\n</html>\n    ```\n1. 测越权，burp插件携带权限cookie批量请求值得拥有（实现该功能的插件很多，比如Autorize）。\n1. JS经常泄漏各种API接口（找链接： https://github.com/Threezh1/JSFinder ，也有非链接需要自己构造包含函数名称及参数的数据包的JS，被动搜索浏览器插件： https://github.com/momosecurity/FindSomething ）。\n1. 链接里带有URL的点可以试试改成任意URL测重定向（大概算是依靠链接前半部分造成链接可信任，结合短链接等伪装手法，重定向钓鱼）。\n\n# 骚操作\n\n## APP\n1. ***逆向分析YYDS！***\n1. APP脱壳找证书，放进抓包工具反编译流量（适用于流量内容不可见的情况，具体教程找找看）。\n1. `adb logcat >> x.txt`输出本地日志，可能包含本机用户使用APP时输入的敏感信息。\n1. 快速并发数据包，可以实现批量发送短信、刷赞等。（burp-turbo）\n1. 将拦截的`响应包`内容从fail改为success可以实现验证码绕过等（是原理清楚但从来没改过响应包的我），证明校验为前端校验。\n1. Activity劫持（涉及安卓端命令调用了，目测是比较冷门可挖的）。\n1. LaunchAnyWhere （https://chan-shaw.github.io/2020/04/12/LaunchAnyWhere%E7%BB%95%E8%BF%87%E5%8E%9F%E7%90%86/）\n1. (这是一条防御办法)当APP做证书绑定后，可以在被抓包时不发送业务请求（但据说有办法仍然实现抓包）。\n    1. 确认有效的绕过办法1：VirtualXposed + JustTrustMe，已验证可绕过防抓包加固，使用VirtualXposed是否可以绕过防root加固，目前没有样本，暂时未知。\n1. 以下是奇怪的root后替换人脸数据的工具：\n    1. Magisk https://github.com/topjohnwu/Magisk\n    1. Riru https://github.com/RikkaApps/Riru\n    1. LSPosed https://github.com/LSPosed/LSPosed\n    1. virtualcam https://github.com/w2016561536/android_virtual_cam\n\n## 小程序\n1. 发送请求参数被加密时，可解包找公钥。（这怕是不太能防？还是说果然RSA/RSA2不靠谱？）\n1. 绕过批量发送限制：在参数末尾每次多加一个对整体无作用的`+`（猜测只有当参数在请求末端可行？）。\n1. 测批量时，不仅可以考虑本网站用户的手机号被批量的问题，也可以加上非注册用户手机号实现批量轰炸的情况（扩大漏洞影响）。\n\n## Web\n1. api接口无法直接访问时（如swagger），把脚本配置文件（如dirsearch）的host改成网站IP。\n1. 注意邮件、短信等携带的链接、短链接内容，可能存在参数可枚举的问题。\n1. 必应、雅虎、搜狗、谷歌、etc，没准就有一个可以搜到奇怪的带权限链接。\n1. 地址接口\n    ```\n/fonts/\n/pdf/\n/js/\n/css/\n/img/\n    ```\n1. 浏览器开插件模拟手机端。\n1. 在线客服处总容易出现奇怪的越权/敏感信息泄漏。\n1. 抓包改发送的邮件内容搞钓鱼（有意思的思路）。\n1. HTTP请求走私（看来还是该多打CTF）\n1. ip/a/b 会强制跳转到登录口，但ip/a/c不会，则使用ip/a/c/../b绕过跳转。访问xx.jsp会强制转到访问aa.jsp，访问aa.jsp/../../(../多个)/xx.jsp实现绕过过滤。\n1. 查询参数留空，可能会出现一次性相应所有查询内容的问题。（遇到过几次，和同事讨论过，大概是因为留空自动从where里排除了，导致全量查询。算是平时比较难去想到和测试的点。）\n1. LDAP 未授权访问 （相比于危害来说，利用未免太过轻松。。。）\n1. HOST碰撞（利用难度低，危害高，技术较新）\n1. API接口服务漏洞，关键词wsdl\n1. 分块传输 bypass waf/ waf缓冲区溢出\n1. dirsearch与burp的简单联动，利用burp的proxy发送请求。但经过与dirsearch作者的讨论，目前dirsearch并不能支持与burp很紧密的联动（指从burp实时获取扫描目录等），有见过导出burp目录给dirsearch做扫描的插件，但与我理想中的实时扫描二级/多级目录下敏感目录的功能不太相符。\n    ```\n    python3 dirsearch.py -u http://whateveraa.test -w $HOME/Desktop/pentest/SecLists/Discovery/Web-Content/merged-no-duplicates.txt -e php -x 301,400,403 --proxy http://127.0.0.1:8080\n    ```\n\n\n## IOT\n1. MQTT协议越权/未授权\n\n# 记录一下看到过的burp插件\n\n1. JSON Decoder 解码JSON（新burp不是可以直接美化json？）\n1. MarkINFO (https://github.com/UUUUnotfound/BurpSuite-Extender-MarkInfo) 高亮敏感信息\n1. highlighter-and-extractor\n1. APIKit (https://github.com/API-Security/APIKit)\n1. BurpCrypto\n1. BurpDomain (https://github.com/404SEC/BurpDomain)\n1. turbo\n1. Logger++\n1. Bypass WAF\n1. JSON Web Tokens\n1. lazyCSRF https://github.com/tkmru/lazyCSRF/releases/\n1. ActiveScan++\n1. LinkFinder\n\n# 记录一下其他脚本工具\n1. reverse-sourcemap 还原jsmap （可以用curl命令对付不能直接下载的js.map文件）\n1. wxappUnpacker\n1. 微信小程序加解密脚本：http://82.156.16.24/index.php/2021/05/26/4.html\n1. HOST碰撞 https://github.com/fofapro/Hosts_scan\n1. fiddler（虽然不是脚本工具但是有看到某个大佬用这个抓包，可能有特别之处）\n","source":"_posts/偷学的渗透小tips.md","raw":"---\ntitle: 偶然学到的渗透小tips\ntoc: true\ndate: 2021-12-05 19:40:18\ntags: 渗透测试\ncategories: [学习笔记]\n---\n\n(人菜就要多学习)\n\n# 简单套路\n\n1. 当请求为`数据更新操作（添加、删除、修改等）`，且请求包没添加（或可绕过）Referer来源地址、随机CSRF-token时，考虑CSRF/XSRF攻击（burp自动生成payload）\n1. 上传位置可以尝试上传html，验证有无html解析（毕竟万年碰不到一个能传马的点了！），危害为钓鱼、挂马、挂黑页等。\n    ```\n<html>\n    <body>\n          <script>alert(1)</script>\n    </body>\n</html>\n    ```\n1. 测越权，burp插件携带权限cookie批量请求值得拥有（实现该功能的插件很多，比如Autorize）。\n1. JS经常泄漏各种API接口（找链接： https://github.com/Threezh1/JSFinder ，也有非链接需要自己构造包含函数名称及参数的数据包的JS，被动搜索浏览器插件： https://github.com/momosecurity/FindSomething ）。\n1. 链接里带有URL的点可以试试改成任意URL测重定向（大概算是依靠链接前半部分造成链接可信任，结合短链接等伪装手法，重定向钓鱼）。\n\n# 骚操作\n\n## APP\n1. ***逆向分析YYDS！***\n1. APP脱壳找证书，放进抓包工具反编译流量（适用于流量内容不可见的情况，具体教程找找看）。\n1. `adb logcat >> x.txt`输出本地日志，可能包含本机用户使用APP时输入的敏感信息。\n1. 快速并发数据包，可以实现批量发送短信、刷赞等。（burp-turbo）\n1. 将拦截的`响应包`内容从fail改为success可以实现验证码绕过等（是原理清楚但从来没改过响应包的我），证明校验为前端校验。\n1. Activity劫持（涉及安卓端命令调用了，目测是比较冷门可挖的）。\n1. LaunchAnyWhere （https://chan-shaw.github.io/2020/04/12/LaunchAnyWhere%E7%BB%95%E8%BF%87%E5%8E%9F%E7%90%86/）\n1. (这是一条防御办法)当APP做证书绑定后，可以在被抓包时不发送业务请求（但据说有办法仍然实现抓包）。\n    1. 确认有效的绕过办法1：VirtualXposed + JustTrustMe，已验证可绕过防抓包加固，使用VirtualXposed是否可以绕过防root加固，目前没有样本，暂时未知。\n1. 以下是奇怪的root后替换人脸数据的工具：\n    1. Magisk https://github.com/topjohnwu/Magisk\n    1. Riru https://github.com/RikkaApps/Riru\n    1. LSPosed https://github.com/LSPosed/LSPosed\n    1. virtualcam https://github.com/w2016561536/android_virtual_cam\n\n## 小程序\n1. 发送请求参数被加密时，可解包找公钥。（这怕是不太能防？还是说果然RSA/RSA2不靠谱？）\n1. 绕过批量发送限制：在参数末尾每次多加一个对整体无作用的`+`（猜测只有当参数在请求末端可行？）。\n1. 测批量时，不仅可以考虑本网站用户的手机号被批量的问题，也可以加上非注册用户手机号实现批量轰炸的情况（扩大漏洞影响）。\n\n## Web\n1. api接口无法直接访问时（如swagger），把脚本配置文件（如dirsearch）的host改成网站IP。\n1. 注意邮件、短信等携带的链接、短链接内容，可能存在参数可枚举的问题。\n1. 必应、雅虎、搜狗、谷歌、etc，没准就有一个可以搜到奇怪的带权限链接。\n1. 地址接口\n    ```\n/fonts/\n/pdf/\n/js/\n/css/\n/img/\n    ```\n1. 浏览器开插件模拟手机端。\n1. 在线客服处总容易出现奇怪的越权/敏感信息泄漏。\n1. 抓包改发送的邮件内容搞钓鱼（有意思的思路）。\n1. HTTP请求走私（看来还是该多打CTF）\n1. ip/a/b 会强制跳转到登录口，但ip/a/c不会，则使用ip/a/c/../b绕过跳转。访问xx.jsp会强制转到访问aa.jsp，访问aa.jsp/../../(../多个)/xx.jsp实现绕过过滤。\n1. 查询参数留空，可能会出现一次性相应所有查询内容的问题。（遇到过几次，和同事讨论过，大概是因为留空自动从where里排除了，导致全量查询。算是平时比较难去想到和测试的点。）\n1. LDAP 未授权访问 （相比于危害来说，利用未免太过轻松。。。）\n1. HOST碰撞（利用难度低，危害高，技术较新）\n1. API接口服务漏洞，关键词wsdl\n1. 分块传输 bypass waf/ waf缓冲区溢出\n1. dirsearch与burp的简单联动，利用burp的proxy发送请求。但经过与dirsearch作者的讨论，目前dirsearch并不能支持与burp很紧密的联动（指从burp实时获取扫描目录等），有见过导出burp目录给dirsearch做扫描的插件，但与我理想中的实时扫描二级/多级目录下敏感目录的功能不太相符。\n    ```\n    python3 dirsearch.py -u http://whateveraa.test -w $HOME/Desktop/pentest/SecLists/Discovery/Web-Content/merged-no-duplicates.txt -e php -x 301,400,403 --proxy http://127.0.0.1:8080\n    ```\n\n\n## IOT\n1. MQTT协议越权/未授权\n\n# 记录一下看到过的burp插件\n\n1. JSON Decoder 解码JSON（新burp不是可以直接美化json？）\n1. MarkINFO (https://github.com/UUUUnotfound/BurpSuite-Extender-MarkInfo) 高亮敏感信息\n1. highlighter-and-extractor\n1. APIKit (https://github.com/API-Security/APIKit)\n1. BurpCrypto\n1. BurpDomain (https://github.com/404SEC/BurpDomain)\n1. turbo\n1. Logger++\n1. Bypass WAF\n1. JSON Web Tokens\n1. lazyCSRF https://github.com/tkmru/lazyCSRF/releases/\n1. ActiveScan++\n1. LinkFinder\n\n# 记录一下其他脚本工具\n1. reverse-sourcemap 还原jsmap （可以用curl命令对付不能直接下载的js.map文件）\n1. wxappUnpacker\n1. 微信小程序加解密脚本：http://82.156.16.24/index.php/2021/05/26/4.html\n1. HOST碰撞 https://github.com/fofapro/Hosts_scan\n1. fiddler（虽然不是脚本工具但是有看到某个大佬用这个抓包，可能有特别之处）\n","slug":"偷学的渗透小tips","published":1,"updated":"2023-02-20T06:35:16.249Z","_id":"clecfhfzj0008x940eqv0f7xl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>(人菜就要多学习)</p>\n<h1 id=\"简单套路\"><a href=\"#简单套路\" class=\"headerlink\" title=\"简单套路\"></a>简单套路</h1><ol>\n<li>当请求为<code>数据更新操作（添加、删除、修改等）</code>，且请求包没添加（或可绕过）Referer来源地址、随机CSRF-token时，考虑CSRF/XSRF攻击（burp自动生成payload）</li>\n<li>上传位置可以尝试上传html，验证有无html解析（毕竟万年碰不到一个能传马的点了！），危害为钓鱼、挂马、挂黑页等。 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">          &lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br><span class=\"line\">    &lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li>\n<li>测越权，burp插件携带权限cookie批量请求值得拥有（实现该功能的插件很多，比如Autorize）。</li>\n<li>JS经常泄漏各种API接口（找链接： <a href=\"https://github.com/Threezh1/JSFinder\">https://github.com/Threezh1/JSFinder</a> ，也有非链接需要自己构造包含函数名称及参数的数据包的JS，被动搜索浏览器插件： <a href=\"https://github.com/momosecurity/FindSomething\">https://github.com/momosecurity/FindSomething</a> ）。</li>\n<li>链接里带有URL的点可以试试改成任意URL测重定向（大概算是依靠链接前半部分造成链接可信任，结合短链接等伪装手法，重定向钓鱼）。</li>\n</ol>\n<h1 id=\"骚操作\"><a href=\"#骚操作\" class=\"headerlink\" title=\"骚操作\"></a>骚操作</h1><h2 id=\"APP\"><a href=\"#APP\" class=\"headerlink\" title=\"APP\"></a>APP</h2><ol>\n<li><em><strong>逆向分析YYDS！</strong></em></li>\n<li>APP脱壳找证书，放进抓包工具反编译流量（适用于流量内容不可见的情况，具体教程找找看）。</li>\n<li><code>adb logcat &gt;&gt; x.txt</code>输出本地日志，可能包含本机用户使用APP时输入的敏感信息。</li>\n<li>快速并发数据包，可以实现批量发送短信、刷赞等。（burp-turbo）</li>\n<li>将拦截的<code>响应包</code>内容从fail改为success可以实现验证码绕过等（是原理清楚但从来没改过响应包的我），证明校验为前端校验。</li>\n<li>Activity劫持（涉及安卓端命令调用了，目测是比较冷门可挖的）。</li>\n<li>LaunchAnyWhere （<a href=\"https://chan-shaw.github.io/2020/04/12/LaunchAnyWhere%E7%BB%95%E8%BF%87%E5%8E%9F%E7%90%86/%EF%BC%89\">https://chan-shaw.github.io/2020/04/12/LaunchAnyWhere%E7%BB%95%E8%BF%87%E5%8E%9F%E7%90%86/）</a></li>\n<li>(这是一条防御办法)当APP做证书绑定后，可以在被抓包时不发送业务请求（但据说有办法仍然实现抓包）。<ol>\n<li>确认有效的绕过办法1：VirtualXposed + JustTrustMe，已验证可绕过防抓包加固，使用VirtualXposed是否可以绕过防root加固，目前没有样本，暂时未知。</li>\n</ol>\n</li>\n<li>以下是奇怪的root后替换人脸数据的工具：<ol>\n<li>Magisk <a href=\"https://github.com/topjohnwu/Magisk\">https://github.com/topjohnwu/Magisk</a></li>\n<li>Riru <a href=\"https://github.com/RikkaApps/Riru\">https://github.com/RikkaApps/Riru</a></li>\n<li>LSPosed <a href=\"https://github.com/LSPosed/LSPosed\">https://github.com/LSPosed/LSPosed</a></li>\n<li>virtualcam <a href=\"https://github.com/w2016561536/android_virtual_cam\">https://github.com/w2016561536/android_virtual_cam</a></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h2><ol>\n<li>发送请求参数被加密时，可解包找公钥。（这怕是不太能防？还是说果然RSA/RSA2不靠谱？）</li>\n<li>绕过批量发送限制：在参数末尾每次多加一个对整体无作用的<code>+</code>（猜测只有当参数在请求末端可行？）。</li>\n<li>测批量时，不仅可以考虑本网站用户的手机号被批量的问题，也可以加上非注册用户手机号实现批量轰炸的情况（扩大漏洞影响）。</li>\n</ol>\n<h2 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h2><ol>\n<li>api接口无法直接访问时（如swagger），把脚本配置文件（如dirsearch）的host改成网站IP。</li>\n<li>注意邮件、短信等携带的链接、短链接内容，可能存在参数可枚举的问题。</li>\n<li>必应、雅虎、搜狗、谷歌、etc，没准就有一个可以搜到奇怪的带权限链接。</li>\n<li>地址接口 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;fonts&#x2F;</span><br><span class=\"line\">&#x2F;pdf&#x2F;</span><br><span class=\"line\">&#x2F;js&#x2F;</span><br><span class=\"line\">&#x2F;css&#x2F;</span><br><span class=\"line\">&#x2F;img&#x2F;</span><br></pre></td></tr></table></figure></li>\n<li>浏览器开插件模拟手机端。</li>\n<li>在线客服处总容易出现奇怪的越权/敏感信息泄漏。</li>\n<li>抓包改发送的邮件内容搞钓鱼（有意思的思路）。</li>\n<li>HTTP请求走私（看来还是该多打CTF）</li>\n<li>ip/a/b 会强制跳转到登录口，但ip/a/c不会，则使用ip/a/c/../b绕过跳转。访问xx.jsp会强制转到访问aa.jsp，访问aa.jsp/../../(../多个)/xx.jsp实现绕过过滤。</li>\n<li>查询参数留空，可能会出现一次性相应所有查询内容的问题。（遇到过几次，和同事讨论过，大概是因为留空自动从where里排除了，导致全量查询。算是平时比较难去想到和测试的点。）</li>\n<li>LDAP 未授权访问 （相比于危害来说，利用未免太过轻松。。。）</li>\n<li>HOST碰撞（利用难度低，危害高，技术较新）</li>\n<li>API接口服务漏洞，关键词wsdl</li>\n<li>分块传输 bypass waf/ waf缓冲区溢出</li>\n<li>dirsearch与burp的简单联动，利用burp的proxy发送请求。但经过与dirsearch作者的讨论，目前dirsearch并不能支持与burp很紧密的联动（指从burp实时获取扫描目录等），有见过导出burp目录给dirsearch做扫描的插件，但与我理想中的实时扫描二级/多级目录下敏感目录的功能不太相符。 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 dirsearch.py -u http:&#x2F;&#x2F;whateveraa.test -w $HOME&#x2F;Desktop&#x2F;pentest&#x2F;SecLists&#x2F;Discovery&#x2F;Web-Content&#x2F;merged-no-duplicates.txt -e php -x 301,400,403 --proxy http:&#x2F;&#x2F;127.0.0.1:8080</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"IOT\"><a href=\"#IOT\" class=\"headerlink\" title=\"IOT\"></a>IOT</h2><ol>\n<li>MQTT协议越权/未授权</li>\n</ol>\n<h1 id=\"记录一下看到过的burp插件\"><a href=\"#记录一下看到过的burp插件\" class=\"headerlink\" title=\"记录一下看到过的burp插件\"></a>记录一下看到过的burp插件</h1><ol>\n<li>JSON Decoder 解码JSON（新burp不是可以直接美化json？）</li>\n<li>MarkINFO (<a href=\"https://github.com/UUUUnotfound/BurpSuite-Extender-MarkInfo\">https://github.com/UUUUnotfound/BurpSuite-Extender-MarkInfo</a>) 高亮敏感信息</li>\n<li>highlighter-and-extractor</li>\n<li>APIKit (<a href=\"https://github.com/API-Security/APIKit\">https://github.com/API-Security/APIKit</a>)</li>\n<li>BurpCrypto</li>\n<li>BurpDomain (<a href=\"https://github.com/404SEC/BurpDomain\">https://github.com/404SEC/BurpDomain</a>)</li>\n<li>turbo</li>\n<li>Logger++</li>\n<li>Bypass WAF</li>\n<li>JSON Web Tokens</li>\n<li>lazyCSRF <a href=\"https://github.com/tkmru/lazyCSRF/releases/\">https://github.com/tkmru/lazyCSRF/releases/</a></li>\n<li>ActiveScan++</li>\n<li>LinkFinder</li>\n</ol>\n<h1 id=\"记录一下其他脚本工具\"><a href=\"#记录一下其他脚本工具\" class=\"headerlink\" title=\"记录一下其他脚本工具\"></a>记录一下其他脚本工具</h1><ol>\n<li>reverse-sourcemap 还原jsmap （可以用curl命令对付不能直接下载的js.map文件）</li>\n<li>wxappUnpacker</li>\n<li>微信小程序加解密脚本：<a href=\"http://82.156.16.24/index.php/2021/05/26/4.html\">http://82.156.16.24/index.php/2021/05/26/4.html</a></li>\n<li>HOST碰撞 <a href=\"https://github.com/fofapro/Hosts_scan\">https://github.com/fofapro/Hosts_scan</a></li>\n<li>fiddler（虽然不是脚本工具但是有看到某个大佬用这个抓包，可能有特别之处）</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>(人菜就要多学习)</p>\n<h1 id=\"简单套路\"><a href=\"#简单套路\" class=\"headerlink\" title=\"简单套路\"></a>简单套路</h1><ol>\n<li>当请求为<code>数据更新操作（添加、删除、修改等）</code>，且请求包没添加（或可绕过）Referer来源地址、随机CSRF-token时，考虑CSRF/XSRF攻击（burp自动生成payload）</li>\n<li>上传位置可以尝试上传html，验证有无html解析（毕竟万年碰不到一个能传马的点了！），危害为钓鱼、挂马、挂黑页等。 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">          &lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br><span class=\"line\">    &lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li>\n<li>测越权，burp插件携带权限cookie批量请求值得拥有（实现该功能的插件很多，比如Autorize）。</li>\n<li>JS经常泄漏各种API接口（找链接： <a href=\"https://github.com/Threezh1/JSFinder\">https://github.com/Threezh1/JSFinder</a> ，也有非链接需要自己构造包含函数名称及参数的数据包的JS，被动搜索浏览器插件： <a href=\"https://github.com/momosecurity/FindSomething\">https://github.com/momosecurity/FindSomething</a> ）。</li>\n<li>链接里带有URL的点可以试试改成任意URL测重定向（大概算是依靠链接前半部分造成链接可信任，结合短链接等伪装手法，重定向钓鱼）。</li>\n</ol>\n<h1 id=\"骚操作\"><a href=\"#骚操作\" class=\"headerlink\" title=\"骚操作\"></a>骚操作</h1><h2 id=\"APP\"><a href=\"#APP\" class=\"headerlink\" title=\"APP\"></a>APP</h2><ol>\n<li><em><strong>逆向分析YYDS！</strong></em></li>\n<li>APP脱壳找证书，放进抓包工具反编译流量（适用于流量内容不可见的情况，具体教程找找看）。</li>\n<li><code>adb logcat &gt;&gt; x.txt</code>输出本地日志，可能包含本机用户使用APP时输入的敏感信息。</li>\n<li>快速并发数据包，可以实现批量发送短信、刷赞等。（burp-turbo）</li>\n<li>将拦截的<code>响应包</code>内容从fail改为success可以实现验证码绕过等（是原理清楚但从来没改过响应包的我），证明校验为前端校验。</li>\n<li>Activity劫持（涉及安卓端命令调用了，目测是比较冷门可挖的）。</li>\n<li>LaunchAnyWhere （<a href=\"https://chan-shaw.github.io/2020/04/12/LaunchAnyWhere%E7%BB%95%E8%BF%87%E5%8E%9F%E7%90%86/%EF%BC%89\">https://chan-shaw.github.io/2020/04/12/LaunchAnyWhere%E7%BB%95%E8%BF%87%E5%8E%9F%E7%90%86/）</a></li>\n<li>(这是一条防御办法)当APP做证书绑定后，可以在被抓包时不发送业务请求（但据说有办法仍然实现抓包）。<ol>\n<li>确认有效的绕过办法1：VirtualXposed + JustTrustMe，已验证可绕过防抓包加固，使用VirtualXposed是否可以绕过防root加固，目前没有样本，暂时未知。</li>\n</ol>\n</li>\n<li>以下是奇怪的root后替换人脸数据的工具：<ol>\n<li>Magisk <a href=\"https://github.com/topjohnwu/Magisk\">https://github.com/topjohnwu/Magisk</a></li>\n<li>Riru <a href=\"https://github.com/RikkaApps/Riru\">https://github.com/RikkaApps/Riru</a></li>\n<li>LSPosed <a href=\"https://github.com/LSPosed/LSPosed\">https://github.com/LSPosed/LSPosed</a></li>\n<li>virtualcam <a href=\"https://github.com/w2016561536/android_virtual_cam\">https://github.com/w2016561536/android_virtual_cam</a></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h2><ol>\n<li>发送请求参数被加密时，可解包找公钥。（这怕是不太能防？还是说果然RSA/RSA2不靠谱？）</li>\n<li>绕过批量发送限制：在参数末尾每次多加一个对整体无作用的<code>+</code>（猜测只有当参数在请求末端可行？）。</li>\n<li>测批量时，不仅可以考虑本网站用户的手机号被批量的问题，也可以加上非注册用户手机号实现批量轰炸的情况（扩大漏洞影响）。</li>\n</ol>\n<h2 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h2><ol>\n<li>api接口无法直接访问时（如swagger），把脚本配置文件（如dirsearch）的host改成网站IP。</li>\n<li>注意邮件、短信等携带的链接、短链接内容，可能存在参数可枚举的问题。</li>\n<li>必应、雅虎、搜狗、谷歌、etc，没准就有一个可以搜到奇怪的带权限链接。</li>\n<li>地址接口 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;fonts&#x2F;</span><br><span class=\"line\">&#x2F;pdf&#x2F;</span><br><span class=\"line\">&#x2F;js&#x2F;</span><br><span class=\"line\">&#x2F;css&#x2F;</span><br><span class=\"line\">&#x2F;img&#x2F;</span><br></pre></td></tr></table></figure></li>\n<li>浏览器开插件模拟手机端。</li>\n<li>在线客服处总容易出现奇怪的越权/敏感信息泄漏。</li>\n<li>抓包改发送的邮件内容搞钓鱼（有意思的思路）。</li>\n<li>HTTP请求走私（看来还是该多打CTF）</li>\n<li>ip/a/b 会强制跳转到登录口，但ip/a/c不会，则使用ip/a/c/../b绕过跳转。访问xx.jsp会强制转到访问aa.jsp，访问aa.jsp/../../(../多个)/xx.jsp实现绕过过滤。</li>\n<li>查询参数留空，可能会出现一次性相应所有查询内容的问题。（遇到过几次，和同事讨论过，大概是因为留空自动从where里排除了，导致全量查询。算是平时比较难去想到和测试的点。）</li>\n<li>LDAP 未授权访问 （相比于危害来说，利用未免太过轻松。。。）</li>\n<li>HOST碰撞（利用难度低，危害高，技术较新）</li>\n<li>API接口服务漏洞，关键词wsdl</li>\n<li>分块传输 bypass waf/ waf缓冲区溢出</li>\n<li>dirsearch与burp的简单联动，利用burp的proxy发送请求。但经过与dirsearch作者的讨论，目前dirsearch并不能支持与burp很紧密的联动（指从burp实时获取扫描目录等），有见过导出burp目录给dirsearch做扫描的插件，但与我理想中的实时扫描二级/多级目录下敏感目录的功能不太相符。 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 dirsearch.py -u http:&#x2F;&#x2F;whateveraa.test -w $HOME&#x2F;Desktop&#x2F;pentest&#x2F;SecLists&#x2F;Discovery&#x2F;Web-Content&#x2F;merged-no-duplicates.txt -e php -x 301,400,403 --proxy http:&#x2F;&#x2F;127.0.0.1:8080</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"IOT\"><a href=\"#IOT\" class=\"headerlink\" title=\"IOT\"></a>IOT</h2><ol>\n<li>MQTT协议越权/未授权</li>\n</ol>\n<h1 id=\"记录一下看到过的burp插件\"><a href=\"#记录一下看到过的burp插件\" class=\"headerlink\" title=\"记录一下看到过的burp插件\"></a>记录一下看到过的burp插件</h1><ol>\n<li>JSON Decoder 解码JSON（新burp不是可以直接美化json？）</li>\n<li>MarkINFO (<a href=\"https://github.com/UUUUnotfound/BurpSuite-Extender-MarkInfo\">https://github.com/UUUUnotfound/BurpSuite-Extender-MarkInfo</a>) 高亮敏感信息</li>\n<li>highlighter-and-extractor</li>\n<li>APIKit (<a href=\"https://github.com/API-Security/APIKit\">https://github.com/API-Security/APIKit</a>)</li>\n<li>BurpCrypto</li>\n<li>BurpDomain (<a href=\"https://github.com/404SEC/BurpDomain\">https://github.com/404SEC/BurpDomain</a>)</li>\n<li>turbo</li>\n<li>Logger++</li>\n<li>Bypass WAF</li>\n<li>JSON Web Tokens</li>\n<li>lazyCSRF <a href=\"https://github.com/tkmru/lazyCSRF/releases/\">https://github.com/tkmru/lazyCSRF/releases/</a></li>\n<li>ActiveScan++</li>\n<li>LinkFinder</li>\n</ol>\n<h1 id=\"记录一下其他脚本工具\"><a href=\"#记录一下其他脚本工具\" class=\"headerlink\" title=\"记录一下其他脚本工具\"></a>记录一下其他脚本工具</h1><ol>\n<li>reverse-sourcemap 还原jsmap （可以用curl命令对付不能直接下载的js.map文件）</li>\n<li>wxappUnpacker</li>\n<li>微信小程序加解密脚本：<a href=\"http://82.156.16.24/index.php/2021/05/26/4.html\">http://82.156.16.24/index.php/2021/05/26/4.html</a></li>\n<li>HOST碰撞 <a href=\"https://github.com/fofapro/Hosts_scan\">https://github.com/fofapro/Hosts_scan</a></li>\n<li>fiddler（虽然不是脚本工具但是有看到某个大佬用这个抓包，可能有特别之处）</li>\n</ol>\n"},{"title":"现阶段对blog的规划思考","toc":true,"date":"2022-04-01T02:44:05.000Z","_content":"\n难得有时间，想整理一下现在的东西。\n我见过的一些blog，似乎更加的“有人情味”。\n或者，每一篇是完整的，发出即完成，符合RSS订阅人的需求。\n有想过，要不要把这些内容迁移出去当知识库，但想了想，如果blog不能作为我自己的知识库来用，那似乎我也用不太上它。\n我的地盘即我的规则，还是就这样吧。\n但最一开始的那些从hunter-book收集来的东西，没准要再整理，去符合我自己的一些阅读习惯（主要是纯英文tab不方便阅读，英文特性如此）。\n也有在私下离线写一些东西，等着完整地发出来。\n也会想着去写一些更加有“情感波动”的东西出来，比如现在这个。\n不过更多的时候没有太多值得沉淀的“感情类”文字，有的只是不停的思考。","source":"_posts/现阶段对blog的规划思考.md","raw":"---\ntitle: 现阶段对blog的规划思考\ntoc: true\ndate: 2022-04-01 02:44:05\ntags: 随便叨叨\ncategories: [其它笔记]\n---\n\n难得有时间，想整理一下现在的东西。\n我见过的一些blog，似乎更加的“有人情味”。\n或者，每一篇是完整的，发出即完成，符合RSS订阅人的需求。\n有想过，要不要把这些内容迁移出去当知识库，但想了想，如果blog不能作为我自己的知识库来用，那似乎我也用不太上它。\n我的地盘即我的规则，还是就这样吧。\n但最一开始的那些从hunter-book收集来的东西，没准要再整理，去符合我自己的一些阅读习惯（主要是纯英文tab不方便阅读，英文特性如此）。\n也有在私下离线写一些东西，等着完整地发出来。\n也会想着去写一些更加有“情感波动”的东西出来，比如现在这个。\n不过更多的时候没有太多值得沉淀的“感情类”文字，有的只是不停的思考。","slug":"现阶段对blog的规划思考","published":1,"updated":"2023-02-20T06:34:23.973Z","_id":"clecfhfzo000bx940hrb79cg7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>难得有时间，想整理一下现在的东西。<br>我见过的一些blog，似乎更加的“有人情味”。<br>或者，每一篇是完整的，发出即完成，符合RSS订阅人的需求。<br>有想过，要不要把这些内容迁移出去当知识库，但想了想，如果blog不能作为我自己的知识库来用，那似乎我也用不太上它。<br>我的地盘即我的规则，还是就这样吧。<br>但最一开始的那些从hunter-book收集来的东西，没准要再整理，去符合我自己的一些阅读习惯（主要是纯英文tab不方便阅读，英文特性如此）。<br>也有在私下离线写一些东西，等着完整地发出来。<br>也会想着去写一些更加有“情感波动”的东西出来，比如现在这个。<br>不过更多的时候没有太多值得沉淀的“感情类”文字，有的只是不停的思考。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>难得有时间，想整理一下现在的东西。<br>我见过的一些blog，似乎更加的“有人情味”。<br>或者，每一篇是完整的，发出即完成，符合RSS订阅人的需求。<br>有想过，要不要把这些内容迁移出去当知识库，但想了想，如果blog不能作为我自己的知识库来用，那似乎我也用不太上它。<br>我的地盘即我的规则，还是就这样吧。<br>但最一开始的那些从hunter-book收集来的东西，没准要再整理，去符合我自己的一些阅读习惯（主要是纯英文tab不方便阅读，英文特性如此）。<br>也有在私下离线写一些东西，等着完整地发出来。<br>也会想着去写一些更加有“情感波动”的东西出来，比如现在这个。<br>不过更多的时候没有太多值得沉淀的“感情类”文字，有的只是不停的思考。</p>\n"},{"title":"Game of hacks 试玩","toc":true,"date":"2021-07-15T16:44:14.000Z","_content":"\n### 前言\n从Awesome-hacking_Cyber-skills看到的练习网站，粗略看了一下描述是关于代码审计的，正好一直在考虑提升一下代码审计的技能，最近就来试玩一下，顺便记录WP。\n\n### 准备工作\n一开始有难度选项，分别是beginner、intermediate和advanced。嗯，十分正常的分类。另外要选代码语言，一共十种，我比较在意的Android、Java、PHP、Python、.NET都在，令人满意。\n看了题目大概是每次随机抽五道题+计时+提供选项，所以WP就先简单记一下代码，最后整理思路。\n\n### PHP 代码审计\n\n#### Beginner\n\n```\nint i;\nchar inLine[64];\ncin >> inLine; // 将cin的二进制码向右移动inLine位（或将cin十进制除以2 inLine次）,但是在这里没有用到。\ni = atoi (inLine); // atoi()：字符串转换整数\nsleep(i);\n```\n\n\n```\nDim myPassWord As String\nmyPassWord = \"12345\"\n```\nuse of hardcoded password\n\n```\nPrivate Sub cmdRunNotePad_Click()\nDim str As String\nMyVar = window.Text()\nSleep myVar+1\ndblNotePadID = Sleep(myVar)\nEnd Sub\n```\n\n\n```\n<?php\n$dn = $_GET['host'];\n$filter=\"(|(sn=$person*)(givenname=$person*))\";\n$justthese = array(\"ou\", \"sn\", \"givenname\", \"mail\");\n$sr=ldap_search($ds, $dn, $dn, $justthese);\n$info = ldap_get_entries($ds, $sr);\necho $info[\"count\"].\" entries returned\n\";?>\n```\nLDAP injection\n\n```\nString url = req.getRequestURL().toString();\nRequestDispatcher disp = req.getRequestDispatcher(url.substring(url.lastIndexOf(req.getContextPath() + \"/\")\n+ req.getContextPath().length()));\ndisp.forward(request, response);\n```\n","source":"_posts/试玩Game-of-hacks.md","raw":"---\ntitle: Game of hacks 试玩\ntoc: true\ndate: 2021-07-15 16:44:14\ntags: 代码审计\ncategories: [学习笔记]\n---\n\n### 前言\n从Awesome-hacking_Cyber-skills看到的练习网站，粗略看了一下描述是关于代码审计的，正好一直在考虑提升一下代码审计的技能，最近就来试玩一下，顺便记录WP。\n\n### 准备工作\n一开始有难度选项，分别是beginner、intermediate和advanced。嗯，十分正常的分类。另外要选代码语言，一共十种，我比较在意的Android、Java、PHP、Python、.NET都在，令人满意。\n看了题目大概是每次随机抽五道题+计时+提供选项，所以WP就先简单记一下代码，最后整理思路。\n\n### PHP 代码审计\n\n#### Beginner\n\n```\nint i;\nchar inLine[64];\ncin >> inLine; // 将cin的二进制码向右移动inLine位（或将cin十进制除以2 inLine次）,但是在这里没有用到。\ni = atoi (inLine); // atoi()：字符串转换整数\nsleep(i);\n```\n\n\n```\nDim myPassWord As String\nmyPassWord = \"12345\"\n```\nuse of hardcoded password\n\n```\nPrivate Sub cmdRunNotePad_Click()\nDim str As String\nMyVar = window.Text()\nSleep myVar+1\ndblNotePadID = Sleep(myVar)\nEnd Sub\n```\n\n\n```\n<?php\n$dn = $_GET['host'];\n$filter=\"(|(sn=$person*)(givenname=$person*))\";\n$justthese = array(\"ou\", \"sn\", \"givenname\", \"mail\");\n$sr=ldap_search($ds, $dn, $dn, $justthese);\n$info = ldap_get_entries($ds, $sr);\necho $info[\"count\"].\" entries returned\n\";?>\n```\nLDAP injection\n\n```\nString url = req.getRequestURL().toString();\nRequestDispatcher disp = req.getRequestDispatcher(url.substring(url.lastIndexOf(req.getContextPath() + \"/\")\n+ req.getContextPath().length()));\ndisp.forward(request, response);\n```\n","slug":"试玩Game-of-hacks","published":1,"updated":"2023-02-20T06:35:04.389Z","_id":"clecfhfzq000cx9401hnc656m","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>从Awesome-hacking_Cyber-skills看到的练习网站，粗略看了一下描述是关于代码审计的，正好一直在考虑提升一下代码审计的技能，最近就来试玩一下，顺便记录WP。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>一开始有难度选项，分别是beginner、intermediate和advanced。嗯，十分正常的分类。另外要选代码语言，一共十种，我比较在意的Android、Java、PHP、Python、.NET都在，令人满意。<br>看了题目大概是每次随机抽五道题+计时+提供选项，所以WP就先简单记一下代码，最后整理思路。</p>\n<h3 id=\"PHP-代码审计\"><a href=\"#PHP-代码审计\" class=\"headerlink\" title=\"PHP 代码审计\"></a>PHP 代码审计</h3><h4 id=\"Beginner\"><a href=\"#Beginner\" class=\"headerlink\" title=\"Beginner\"></a>Beginner</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i;</span><br><span class=\"line\">char inLine[64];</span><br><span class=\"line\">cin &gt;&gt; inLine; &#x2F;&#x2F; 将cin的二进制码向右移动inLine位（或将cin十进制除以2 inLine次）,但是在这里没有用到。</span><br><span class=\"line\">i &#x3D; atoi (inLine); &#x2F;&#x2F; atoi()：字符串转换整数</span><br><span class=\"line\">sleep(i);</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dim myPassWord As String</span><br><span class=\"line\">myPassWord &#x3D; &quot;12345&quot;</span><br></pre></td></tr></table></figure>\n<p>use of hardcoded password</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Private Sub cmdRunNotePad_Click()</span><br><span class=\"line\">Dim str As String</span><br><span class=\"line\">MyVar &#x3D; window.Text()</span><br><span class=\"line\">Sleep myVar+1</span><br><span class=\"line\">dblNotePadID &#x3D; Sleep(myVar)</span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$dn &#x3D; $_GET[&#39;host&#39;];</span><br><span class=\"line\">$filter&#x3D;&quot;(|(sn&#x3D;$person*)(givenname&#x3D;$person*))&quot;;</span><br><span class=\"line\">$justthese &#x3D; array(&quot;ou&quot;, &quot;sn&quot;, &quot;givenname&quot;, &quot;mail&quot;);</span><br><span class=\"line\">$sr&#x3D;ldap_search($ds, $dn, $dn, $justthese);</span><br><span class=\"line\">$info &#x3D; ldap_get_entries($ds, $sr);</span><br><span class=\"line\">echo $info[&quot;count&quot;].&quot; entries returned</span><br><span class=\"line\">&quot;;?&gt;</span><br></pre></td></tr></table></figure>\n<p>LDAP injection</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String url &#x3D; req.getRequestURL().toString();</span><br><span class=\"line\">RequestDispatcher disp &#x3D; req.getRequestDispatcher(url.substring(url.lastIndexOf(req.getContextPath() + &quot;&#x2F;&quot;)</span><br><span class=\"line\">+ req.getContextPath().length()));</span><br><span class=\"line\">disp.forward(request, response);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>从Awesome-hacking_Cyber-skills看到的练习网站，粗略看了一下描述是关于代码审计的，正好一直在考虑提升一下代码审计的技能，最近就来试玩一下，顺便记录WP。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>一开始有难度选项，分别是beginner、intermediate和advanced。嗯，十分正常的分类。另外要选代码语言，一共十种，我比较在意的Android、Java、PHP、Python、.NET都在，令人满意。<br>看了题目大概是每次随机抽五道题+计时+提供选项，所以WP就先简单记一下代码，最后整理思路。</p>\n<h3 id=\"PHP-代码审计\"><a href=\"#PHP-代码审计\" class=\"headerlink\" title=\"PHP 代码审计\"></a>PHP 代码审计</h3><h4 id=\"Beginner\"><a href=\"#Beginner\" class=\"headerlink\" title=\"Beginner\"></a>Beginner</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i;</span><br><span class=\"line\">char inLine[64];</span><br><span class=\"line\">cin &gt;&gt; inLine; &#x2F;&#x2F; 将cin的二进制码向右移动inLine位（或将cin十进制除以2 inLine次）,但是在这里没有用到。</span><br><span class=\"line\">i &#x3D; atoi (inLine); &#x2F;&#x2F; atoi()：字符串转换整数</span><br><span class=\"line\">sleep(i);</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dim myPassWord As String</span><br><span class=\"line\">myPassWord &#x3D; &quot;12345&quot;</span><br></pre></td></tr></table></figure>\n<p>use of hardcoded password</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Private Sub cmdRunNotePad_Click()</span><br><span class=\"line\">Dim str As String</span><br><span class=\"line\">MyVar &#x3D; window.Text()</span><br><span class=\"line\">Sleep myVar+1</span><br><span class=\"line\">dblNotePadID &#x3D; Sleep(myVar)</span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$dn &#x3D; $_GET[&#39;host&#39;];</span><br><span class=\"line\">$filter&#x3D;&quot;(|(sn&#x3D;$person*)(givenname&#x3D;$person*))&quot;;</span><br><span class=\"line\">$justthese &#x3D; array(&quot;ou&quot;, &quot;sn&quot;, &quot;givenname&quot;, &quot;mail&quot;);</span><br><span class=\"line\">$sr&#x3D;ldap_search($ds, $dn, $dn, $justthese);</span><br><span class=\"line\">$info &#x3D; ldap_get_entries($ds, $sr);</span><br><span class=\"line\">echo $info[&quot;count&quot;].&quot; entries returned</span><br><span class=\"line\">&quot;;?&gt;</span><br></pre></td></tr></table></figure>\n<p>LDAP injection</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String url &#x3D; req.getRequestURL().toString();</span><br><span class=\"line\">RequestDispatcher disp &#x3D; req.getRequestDispatcher(url.substring(url.lastIndexOf(req.getContextPath() + &quot;&#x2F;&quot;)</span><br><span class=\"line\">+ req.getContextPath().length()));</span><br><span class=\"line\">disp.forward(request, response);</span><br></pre></td></tr></table></figure>\n"},{"title":"0 to 1 the road of CTFer 第一章 Web入门","toc":true,"date":"2021-04-26T13:49:07.000Z","_content":"\n# 第一章 Web入门\n\n## 信息收集\n\n### 敏感信息泄漏\n\n#### git泄漏\n\n1. 常规git泄漏：flag在源码内，可直接利用工具或脚本获取。\n1. git回滚：flag被修改，但依然保存在commit记录里。\n    * 利用`git reset --hard [版本号]`获取flag。\n    * 更简单的方法是通过`git log-stat`查看每个commit修改了哪些文件，再用`git diff HEAD [commit-id]`比较当前版本和想看的commit之间的变化。\n1. git分支：命令`git reflog`查看分支间切换的记录。从原url下载分支内容并恢复（目前的恢复分支记录需要下载分支HEAD并修改GitHacker.py代码实现自动恢复分支，先简单记录下来，后续看是否有其它更简单的方式。）\n1. git stash：stash是对当前工作的“保存”，以备后续恢复。`git stash list`查看保存的列表，`git stash pop`恢复工作现场，`git stash show`显示做了哪些改动。\n1. git index：index是暂存区，用于通过git add .命令暂存新建文件等待commit。使用`git checkout-index`命令恢复文件。\n1. git泄漏的其他利用方式：泄漏的git中也可能有其他有用的信息。\n    * .git/config文件夹中可能含有access_token信息，从而访问该用户的其它仓库。\n\n#### SVN泄漏\nSVN是源代码版本管理软件，如果存在泄漏，可以利用.svn/entries或wc.db文件获取服务器源码等信息。\n* https://github.com/kost/dvcs-ripper\n* Seay-svn（Win）\n\n#### HG泄漏\n.hg隐藏文件中包含代码和分支修改记录等信息。\n* https://github.com/kost/dvcs-ripper\n\n#### 总结\nCTF线上赛往往会有重定向的问题，例如，只要访问`.git`便会返回403,此时访问`.git/config`，如果有文件内容返回，说明存在git泄漏，反之，一般不存在。而在SVN泄漏中，一般是在entries中爬取源代码，但有时会出现entries为空的情况，这时注意wc.db文件存在与否，便可通过其中的checksum在pristine文件夹中获取源代码。\n\n### 敏感备份文件\n\n#### gedit备份文件\n在Linux下，用gedit编辑器保存文件后，当前目录下会生成一个`[文件名]~`的备份文件，访问这个文件即可获得文件内容。\n\n#### vim备份文件\nvim在意外退出时会生成一个备份文件，文件名格式为`.filename.swp`，再次生成备份文件时则为`.filename.swo`，第三次为`.filename.swn`，以此类推。恢复备份的办法是，先在当前目录下创建一个flag文件，再使用`vim-r flag`，即可恢复.flag.swp。\n\n#### 常规文件\n主要靠丰富字典。(dirsearch+自己收集字典)\n* phpinfo()\n* 备份文件后缀\n```\n    back.rar\n    back.tar\n    back.tar.gz\n    back.zip\n    backup.rar\n    backup.tar\n    backup.tar.gz\n    backup.zip\n    temp.rar\n    temp.tar\n    temp.tar.gz\n    temp.zip\n    web.rar\n    web.tar\n    web.tar.gz\n    web.zip\n    website.rar\n    website.tar\n    website.tar.gz\n    website.zip\n    www.rar\n    www.tar\n    www.tar.gz\n    www.zip\n    wwwroot.rar\n    wwwroot.tar\n    wwwroot.tar.gz\n    wwwroot.zip\n    index.php.bak\n```\n\n#### 总结\n线上赛过程中，出题人往往会在线运维题目，有时会导致swp备份文件的生成。所以读者在比赛过程中可以编写实时监控脚本，对题目服务进行监控。\n\n### Banner识别\n在线上赛中，网站的Banner对解题有着十分重要的作用，选手往往可以通过Banner信息来获得解题思路。\n如得知网站是用ThinkPHP的Web框架编写时，我们可以尝试ThinkPHP框架的相关历史漏洞。或者得知这个网站是Windows服务器，那么我们在测试上传漏洞时可以根据Windows的特性进行尝试。\n\n#### 自行收集指纹库\n* Github CMS指纹库\n* 扫描器识别\n\n#### 使用已有工具\n* Wappalyzer（pip install python-Wappalyzer）：在data目录下，apps.json是其规则库，读者可以根据自己需求自由添加。\n\n#### 总结\n除了以上两种识别方式，我们还可以通过随意输入一些URL，观察404和302跳转页面中是否包含CMS及版本号。\n\n## CTF中的SQL注入\n\n### SQL注入（mysql）\n\n#### 数字型注入\ntest.php?id=2 -> true。返回记录。\ntest.php?id=3-1 -> true，返回id=2的记录。\n说明mysql对3-1进行了计算，从数字运算这个特征可以判断该注入点为数字型注入，输入点$_GET['id']附近没有引号包裹，可以直接输入SQL查询语句。\n\nmysql查询出两行记录（union select联合查询注入）但PHP源码限制只能显示一行记录的办法：\n    1. 在原有数据后面加上`limit 1,1`参数，显示查询结果的第二条记录。\n    1. 指定id=-1或一个很大的值，使第一条数据无法被查询到。（常用）\n\n#### 字符型注入\n与数字型注入相比，只是在GET参数输入的地方包裹了单引号（少部分情况为双引号）让其变成字符串。\n在MySQL中，等号两边如果类型不一致则会发生强制转换，当数字和字符串数据比较时，字符串将被转换为数字再进行比较。\ntest.php?id=3-2，无返回结果，证明注入点不是数字型。继续尝试test.php?id=2a，返回id=2的结果，证明存在字符型注入。\n\n    1. 尝试使用单引号闭合前面的单引号，（插入查询语句），再用`--%20`或`%23`注释后面的语句，注意在URL框输入时，`-- `和`#`以及`''`要进行URL编码。\n    1. 除了注释，也可以使用单引号来闭合后面的单引号，eg: test.php?id=2'union select xxx '\n\n#### 布尔盲注\ntest.php?id=1'and'f'='a'，猜中则返回id=1内容\n更快的方法为 test.php?id=1'and'f'<'n'，二分法。\n如何获取每一位字符？利用mysql的substring(),mid(),substr()等。\n\n#### 时间盲注\nphp?id=1'or sleep(10)\n\n#### 报错注入\nmysql会将语句执行后的报错信息输出。\nupdatexml在执行时，第二个参数应该为合法的XPATH路径，否则会在引发报错时输出传入的参数。\nid='1' or updatexml(1,concat(0x7e,(select pwd from wp_user)),1)\nupdatexml()报错注入，ref: https://blog.csdn.net/qq_37873738/article/details/88042610\n\n#### 堆叠注入\n当目标开启多语句执行时，可以采用多语句执行的方式修改数据库结构和数据。\n\n### 注入点\n\n#### 注入点在select_expr\nAS别名：id=(select%20pwd%20from%20wp_user)%20as%20title\n\n#### 注入点在table_reference\n仍可以用别名取出数据：SELECT title FROM (SELECT pwd AS title FROM wp_user)x;\n\n在该两处的注入，如果注入点有反引号包裹，那么需要先闭合反引号。\n\n#### 注入点在WHERE或HAVING后\n代码：`$res = mysqli_query($conn, \"SELECT title FROM wp_news WHERE id = ${_GET[id]}\");`\n现实中最常遇到的情况，要先判断有无引号包裹，再闭合前面可能存在的括号，即可进行注入来获取数据。\n\n注入点在HAVING后的情况与之类似。\n\n#### 注入点在GROUP BY或ORDER BY后\n当遇到不是WHERE后的注入点时，先在本地MySQL中进行尝试，看语句后面能加什么，从而判断当前可以注入的位置，进而进行有针对的注入。\n\n假设代码如下：`$res = mysqli_query($conn, \"SELECT title FROM wp_news GROUP BY ${_GET['title']}\");`\n测试可得，title=id desc,(if(1,sleep(1),1))，可以利用时间注入获取数据。\n\n```\n事实上只要对输入值进行白名单比对，基本就能防御这种注入。\n```\n\n#### 注入点在LIMIT后\n该注入比较简单，通过更改数字大小，页面会显示更多或更少的记录数。由于语法限制，LIMIT后只能是数字，在整个SQL语句没有ORDER BY关键字的情况下，可以直接使用UNION注入。另外可以根据SELECT语法，通过加入PROCEDURE来尝试注入（只适用于MySQL 5.6前的版本）\n\n### INSERT注入\n通常注入位于字段名或字段值的地方，且没有回显信息。\n\n#### 注入点位于tbl_name\n如果能够通过注释符注释后续语句，则可直接插入特定数据到想要的表内，如管理员表。\n\n#### 注入点位于VALUES\n\n### UPDATE注入\n\n### DELETE注入\n对id参数进行注入时，如果使WHERE后的值变为true，数据就会被删除。为了保证正常数据不会被干扰，通常使用`and sleep (1)`保证WHERE后的结果返回为false，让语句无法成功执行，后续步骤参考时间盲注。\n\n## 注入防御及绕过思路\n\n其它ref：https://blog.csdn.net/wy_97/article/details/78085664\n\n### 关键字替换或匹配拦截\n\n#### 过滤空格\n替代空格的空白符有：`%0a, %0b, %0c, %0d, %09, %a0`（均为URL编码，%a0在特定字符集才能利用）和`/**/`组合、括号等。\n\n#### 将SELECT替换成空\n可以采用嵌套的方式，如SESELECTLECT。\n\n#### 大小写匹配\n在MySQL中，关键字是不区分大小写的，如果只匹配了SELECT就可以通过大小写混写的方式绕过。\n\n#### 正则匹配\n正则匹配关键字`\\bselect\\b`可以用形如`/*!50000select*/`的方式绕过。\n\n#### 替换了单引号或双引号，没有过滤反斜杠\n`id='a\\' AND title = 'OR sleep(1)#'`\n反斜杠转义了预置的单引号，实现绕过。\n\n### 逃逸引号\n\n#### 编码解码\n当用户输入待转义函数时，如果数据处于编码状态则引号无法被转义。\n同样的情况也发生在加密/解密、字符集转换的情况。\n* 宽字节注入\n\n#### 意料之外的输入点\n被遗漏的可控点，例如PHP中，上传的文件名、http header、$_SERVER['PHP_SELF'] 等变量。\n\n#### 二次注入\n由于开发者信任数据库中取出的数据是无害的，从而导致二次注入漏洞的出现。\n*  用户名为`admin'or'1`\n\n#### 字符串截断\n在标题、抬头等位置，开发者可能限制其字符不能超过x个字符，超过就会被截断。\n假如攻击者输入`aaaa'`，自动转义为`aaaa\\'`，由于长度限制被截取为`aaaa\\`，正好转义预置的单引号，实现注入。\n\n### 注入应用\n* 在有写文件权限的情况下，直接用INTO OUTFILE或DUMPFILE向Web目录写文件，或写文件后结合文件包含漏洞实现代码执行。ref:https://baijiahao.baidu.com/s?id=1650711425682220792&wfr=spider&for=pc\n* 在有读文件权限的情况下，用load_file()函数读取网站源码和配置信息，获取敏感数据。\n* 提升权限，绕过登录，添加用户，调整用户权限。\n* 通过数据，控制如缓存、模板等文件内容来获取权限，或者删除、读取某些关键文件。\n* 在可以执行多语句的情况下，控制整个数据库，包括控制任意数据、任意字段长度等。\n* 在SQL Server这类数据库中可以直接执行系统命令。\n\n### 总结\n实际比赛中，应根据不同的SQL服务器类型查找相关资料，通过fuzz得出被过滤的字符、函数、关键词等，在文档中查找未过滤的替代，完成绕过。\n* 练习靶场：github-sqli-labs\n\n## 任意文件读取漏洞\n\n### 文件读取漏洞常见触发点\n\n#### PHP\n有关文件读取的标准函数（审计中重点关注）。\n包括但不限于：\n* `file_get_contents(),file(),fopen()`函数，(及其文件指针操作函数fread(),fgets()等);\n* 与文件包含相关的函数`include(),require(),include_once(),require_once()`等;\n* 通过PHP读文件的执行系统命令：`system(),exec()`等。\nPHP扩展中读取文件的函数：\n* php-curl扩展\n* XML模块XXE\n\n相关源码阅读：Wrapper和Filter\n\nPHP文件包含的实际问题：\n    1. 文件路径前面可控，后面不可控：在较低PHP及容器版本中可以使用`\\x00`截断，对应的URL编码是`%00`。当服务端存在文件上传功能时，也可以尝试利用zip或phar协议直接进行文件包含执行PHP代码。\n    1. 文件路径后面可控，前面不可控：通过`../`进行目录穿越读取文件，但这种情况无法使用Wrapper，如果服务器是利用include等文件包含类的函数，将无法读取PHP文件中的PHP代码。\n    1. 文件路径中间可控：和第一种相似，但无法利用Wrapper进行文件包含。\n\n#### Python\n漏洞经常出现在框架请求静态资源文件部分，也就是最后读取文件内容的open函数。但直接导致漏洞的原因往往是Python函数的feature被忽略。\n\n除了Python框架，很多其它涉及文件操作的应用也可能因为滥用open函数、模板的不当渲染导致任意文件读取。\n\n#### JAVA\n* 文件读取函数FileInputStream\n* XXE\n* JAVA模块所支持的`file://`协议\n* Spring Cloud Config Server 路径穿越与任意文件读取漏洞 CVE-2019-3799, Jenkins 任意文件读取漏洞 CVE-2018-1999002\n\n#### Ruby\n* 通常与Rails框架相关。\n* Ruby on Rails 远程代码执行漏洞 CVE-2016-0752，Ruby on Rails 路径穿越与任意文件读取漏洞 CVE-2018-3760，Ruby on Rails 路径穿越与任意文件读取漏洞 CVE-2019-5418\n\n#### Node\n* 通常为模板注入、代码注入等。\n* Node.js express 模块任意文件读取漏洞 CVE-2017-14849\n\n### 中间件/服务器相关\n\n#### Nginx错误配置\n常搭配Python-Web应用一起出现。\n* /static../ -> /home/myapp/static/../，产生目录穿越，穿越至myapp目录。原因：location最后没有加‘/’限制\n```\nlocation /static {\n  alias /home/myapp/static/;\n}\n```\n\n#### 数据库\nMySQL：\n* load_file(),利用条件严格，但仍然常出相关文件读取题目。\n* load data infile，需要执行完整的SQL语句且需要FILE权限，比较少见，除了SSRF攻击MySQL以外，很少能够直接执行整条非基本SQL语句的机会。\n\n#### 软链接\n又称符号链接，即soft link或symbolic link。相当于win下的快捷方式。\n\n硬链接与软链接的区别： https://www.jianshu.com/p/b035d94fa959\n\nbash命令`ln-s`可以创建一个指向指定文件的软链接文件，然后将该文件上传至服务器，访问该链接文件时，实际上是在请求服务端它指向的文件。\n\n#### FFmpeg\nCISCN 2017 FFmpeg 任意文件读取漏洞\n\n#### Doker-API\nDocker-API可以控制Docker的行为，Docker-API通过UNIX Socket通信，也可以通过HTTP直接通信。当可以通过SSRF漏洞进行UNIX Socket通信时，就可以通过操纵Docker-API把本地文件载入Docker新容器进行读取（利用Docker的ADD、COPY操作）。\n\n### 客户端相关\n客户端文件读取漏洞，大多基于XSS读取本地文件。\n\n#### 浏览器/Flash XSS\njs读取本地文件\n* Safari浏览器 客户端本地文件读取漏洞\n\n#### MarkDown语法解析器XSS\n具有解析js的能力，且缺乏浏览器的读取本地文件限制。\n\n## 文件读取漏洞常见读取路径\n\n### Linux\n\n#### flag名称（相对路径）\nfuzz方式获取\n```\n../../../../../../../../../flag(.txt|.php|.pyc|.py ...)\nflag(.txt|.php|.pyc|.py ...)\n[dir_you_know]/flag(.txt|.php|.pyc|.py ...)\n../../../../../../../../../etc/flag(.txt|.php|.pyc|.py ...)\n../../../../../../../../../tmp/flag(.txt|.php|.pyc|.py ...)\n../flag(.txt|.php|.pyc|.py ...)\n../../../../../../../../root/flag(.txt|.php|.pyc|.py ...)\n../../../../../../../../home/flag(.txt|.php|.pyc|.py ...)\n../../../../../../../../home/[user_you_know]/flag(.txt|.php|.pyc|.py ...)\n```\n\n#### 服务器信息（绝对路径）\nCTF中常见的部分须知目录和文件\n\n1.  /etc目录\n    多是各种应用或系统配置文件，是进行文件读取的首要目标。\n1.  /etc/passwd （详细解析：http://c.biancheng.net/view/839.html）\n    Linux系统保存用户信息及其工作目录的文件，所有用户/组可读，一般用作Linux系统下文件读取漏洞存在判断的基准。从该文件可得系统中存在哪些用户，及其所属组和工作目录。\n1.  /etc/shadow （详细解析： http://c.biancheng.net/view/840.html）\n    是Linux系统保存用户信息及（可能存在）密码（hash）的文件，权限是root用户可读写、shadow组可读。所以一般情况下该文件不可读。\n1.  /etc/apache2/*\n    是Apache的配置文件，可以获知Web目录、服务端口等信息。\n1.  /etc/nginx/*\n    是Nginx配置文件（Ubuntu等系统），可以获知Web目录、服务端口等信息。\n1.  /etc/apparmor(.d)/*\n    是Apparmor配置文件，可以获知各应用系统调用的白名单、黑名单。（如查看MySQL是否禁用系统调用，确定是否可以使用UDF执行系统命令）\n1.  /etc/(cron.d/*|crontab)\n    是定时任务文件。有些题会设置一些定时任务，读取这些配置文件就可以发现隐藏的目录或其它文件。\n1.  /etc/environment\n    是环境变量配置文件之一。环境变量可能存在大量目录信息的泄漏，甚至可能出现secret key泄漏的情况。\n1.  /etc/hostname\n    主机名\n1.  /etc/hosts\n    主机名查询静态表，包含知道域名解析IP的成对信息。通过该文件，可以探测网卡信息和内网IP/域名。\n1.  /etc/issue\n    指明系统版本。\n1.  /etc/mysql/*\n    MySQL配置文件。\n1.  /etc/php/*\n    PHP配置文件。\n1.  /proc目录\n    通常存储进程动态运行的各种信息，本质上是一种虚拟目录。\n    *如果查看非当前进程的信息，pid是可以暴力破解的，如果要查看当前进程，只需/proc/self/代替/proc/[pid]/即可。*\n    对应目录下的cmdline可读出比较敏感的信息。`/proc/[pid]/cmdline`\n    有时我们无法获取当前应用所在的目录，通过cwd命令可以直接跳转到当前目录。`/proc/[pid]/cwd/`\n    环境变量中可能存在secret_key，也可以通过environ读取。`/proc/[pid]/environ`\n1.  其它目录\n    \n","source":"_posts/Notes_0-to-1-the-road-of-CTFer_1.md","raw":"---\ntitle: 0 to 1 the road of CTFer 第一章 Web入门\ntoc: true\ndate: 2021-04-26 13:49:07\ntags: CTF\ncategories: [读书笔记]\n---\n\n# 第一章 Web入门\n\n## 信息收集\n\n### 敏感信息泄漏\n\n#### git泄漏\n\n1. 常规git泄漏：flag在源码内，可直接利用工具或脚本获取。\n1. git回滚：flag被修改，但依然保存在commit记录里。\n    * 利用`git reset --hard [版本号]`获取flag。\n    * 更简单的方法是通过`git log-stat`查看每个commit修改了哪些文件，再用`git diff HEAD [commit-id]`比较当前版本和想看的commit之间的变化。\n1. git分支：命令`git reflog`查看分支间切换的记录。从原url下载分支内容并恢复（目前的恢复分支记录需要下载分支HEAD并修改GitHacker.py代码实现自动恢复分支，先简单记录下来，后续看是否有其它更简单的方式。）\n1. git stash：stash是对当前工作的“保存”，以备后续恢复。`git stash list`查看保存的列表，`git stash pop`恢复工作现场，`git stash show`显示做了哪些改动。\n1. git index：index是暂存区，用于通过git add .命令暂存新建文件等待commit。使用`git checkout-index`命令恢复文件。\n1. git泄漏的其他利用方式：泄漏的git中也可能有其他有用的信息。\n    * .git/config文件夹中可能含有access_token信息，从而访问该用户的其它仓库。\n\n#### SVN泄漏\nSVN是源代码版本管理软件，如果存在泄漏，可以利用.svn/entries或wc.db文件获取服务器源码等信息。\n* https://github.com/kost/dvcs-ripper\n* Seay-svn（Win）\n\n#### HG泄漏\n.hg隐藏文件中包含代码和分支修改记录等信息。\n* https://github.com/kost/dvcs-ripper\n\n#### 总结\nCTF线上赛往往会有重定向的问题，例如，只要访问`.git`便会返回403,此时访问`.git/config`，如果有文件内容返回，说明存在git泄漏，反之，一般不存在。而在SVN泄漏中，一般是在entries中爬取源代码，但有时会出现entries为空的情况，这时注意wc.db文件存在与否，便可通过其中的checksum在pristine文件夹中获取源代码。\n\n### 敏感备份文件\n\n#### gedit备份文件\n在Linux下，用gedit编辑器保存文件后，当前目录下会生成一个`[文件名]~`的备份文件，访问这个文件即可获得文件内容。\n\n#### vim备份文件\nvim在意外退出时会生成一个备份文件，文件名格式为`.filename.swp`，再次生成备份文件时则为`.filename.swo`，第三次为`.filename.swn`，以此类推。恢复备份的办法是，先在当前目录下创建一个flag文件，再使用`vim-r flag`，即可恢复.flag.swp。\n\n#### 常规文件\n主要靠丰富字典。(dirsearch+自己收集字典)\n* phpinfo()\n* 备份文件后缀\n```\n    back.rar\n    back.tar\n    back.tar.gz\n    back.zip\n    backup.rar\n    backup.tar\n    backup.tar.gz\n    backup.zip\n    temp.rar\n    temp.tar\n    temp.tar.gz\n    temp.zip\n    web.rar\n    web.tar\n    web.tar.gz\n    web.zip\n    website.rar\n    website.tar\n    website.tar.gz\n    website.zip\n    www.rar\n    www.tar\n    www.tar.gz\n    www.zip\n    wwwroot.rar\n    wwwroot.tar\n    wwwroot.tar.gz\n    wwwroot.zip\n    index.php.bak\n```\n\n#### 总结\n线上赛过程中，出题人往往会在线运维题目，有时会导致swp备份文件的生成。所以读者在比赛过程中可以编写实时监控脚本，对题目服务进行监控。\n\n### Banner识别\n在线上赛中，网站的Banner对解题有着十分重要的作用，选手往往可以通过Banner信息来获得解题思路。\n如得知网站是用ThinkPHP的Web框架编写时，我们可以尝试ThinkPHP框架的相关历史漏洞。或者得知这个网站是Windows服务器，那么我们在测试上传漏洞时可以根据Windows的特性进行尝试。\n\n#### 自行收集指纹库\n* Github CMS指纹库\n* 扫描器识别\n\n#### 使用已有工具\n* Wappalyzer（pip install python-Wappalyzer）：在data目录下，apps.json是其规则库，读者可以根据自己需求自由添加。\n\n#### 总结\n除了以上两种识别方式，我们还可以通过随意输入一些URL，观察404和302跳转页面中是否包含CMS及版本号。\n\n## CTF中的SQL注入\n\n### SQL注入（mysql）\n\n#### 数字型注入\ntest.php?id=2 -> true。返回记录。\ntest.php?id=3-1 -> true，返回id=2的记录。\n说明mysql对3-1进行了计算，从数字运算这个特征可以判断该注入点为数字型注入，输入点$_GET['id']附近没有引号包裹，可以直接输入SQL查询语句。\n\nmysql查询出两行记录（union select联合查询注入）但PHP源码限制只能显示一行记录的办法：\n    1. 在原有数据后面加上`limit 1,1`参数，显示查询结果的第二条记录。\n    1. 指定id=-1或一个很大的值，使第一条数据无法被查询到。（常用）\n\n#### 字符型注入\n与数字型注入相比，只是在GET参数输入的地方包裹了单引号（少部分情况为双引号）让其变成字符串。\n在MySQL中，等号两边如果类型不一致则会发生强制转换，当数字和字符串数据比较时，字符串将被转换为数字再进行比较。\ntest.php?id=3-2，无返回结果，证明注入点不是数字型。继续尝试test.php?id=2a，返回id=2的结果，证明存在字符型注入。\n\n    1. 尝试使用单引号闭合前面的单引号，（插入查询语句），再用`--%20`或`%23`注释后面的语句，注意在URL框输入时，`-- `和`#`以及`''`要进行URL编码。\n    1. 除了注释，也可以使用单引号来闭合后面的单引号，eg: test.php?id=2'union select xxx '\n\n#### 布尔盲注\ntest.php?id=1'and'f'='a'，猜中则返回id=1内容\n更快的方法为 test.php?id=1'and'f'<'n'，二分法。\n如何获取每一位字符？利用mysql的substring(),mid(),substr()等。\n\n#### 时间盲注\nphp?id=1'or sleep(10)\n\n#### 报错注入\nmysql会将语句执行后的报错信息输出。\nupdatexml在执行时，第二个参数应该为合法的XPATH路径，否则会在引发报错时输出传入的参数。\nid='1' or updatexml(1,concat(0x7e,(select pwd from wp_user)),1)\nupdatexml()报错注入，ref: https://blog.csdn.net/qq_37873738/article/details/88042610\n\n#### 堆叠注入\n当目标开启多语句执行时，可以采用多语句执行的方式修改数据库结构和数据。\n\n### 注入点\n\n#### 注入点在select_expr\nAS别名：id=(select%20pwd%20from%20wp_user)%20as%20title\n\n#### 注入点在table_reference\n仍可以用别名取出数据：SELECT title FROM (SELECT pwd AS title FROM wp_user)x;\n\n在该两处的注入，如果注入点有反引号包裹，那么需要先闭合反引号。\n\n#### 注入点在WHERE或HAVING后\n代码：`$res = mysqli_query($conn, \"SELECT title FROM wp_news WHERE id = ${_GET[id]}\");`\n现实中最常遇到的情况，要先判断有无引号包裹，再闭合前面可能存在的括号，即可进行注入来获取数据。\n\n注入点在HAVING后的情况与之类似。\n\n#### 注入点在GROUP BY或ORDER BY后\n当遇到不是WHERE后的注入点时，先在本地MySQL中进行尝试，看语句后面能加什么，从而判断当前可以注入的位置，进而进行有针对的注入。\n\n假设代码如下：`$res = mysqli_query($conn, \"SELECT title FROM wp_news GROUP BY ${_GET['title']}\");`\n测试可得，title=id desc,(if(1,sleep(1),1))，可以利用时间注入获取数据。\n\n```\n事实上只要对输入值进行白名单比对，基本就能防御这种注入。\n```\n\n#### 注入点在LIMIT后\n该注入比较简单，通过更改数字大小，页面会显示更多或更少的记录数。由于语法限制，LIMIT后只能是数字，在整个SQL语句没有ORDER BY关键字的情况下，可以直接使用UNION注入。另外可以根据SELECT语法，通过加入PROCEDURE来尝试注入（只适用于MySQL 5.6前的版本）\n\n### INSERT注入\n通常注入位于字段名或字段值的地方，且没有回显信息。\n\n#### 注入点位于tbl_name\n如果能够通过注释符注释后续语句，则可直接插入特定数据到想要的表内，如管理员表。\n\n#### 注入点位于VALUES\n\n### UPDATE注入\n\n### DELETE注入\n对id参数进行注入时，如果使WHERE后的值变为true，数据就会被删除。为了保证正常数据不会被干扰，通常使用`and sleep (1)`保证WHERE后的结果返回为false，让语句无法成功执行，后续步骤参考时间盲注。\n\n## 注入防御及绕过思路\n\n其它ref：https://blog.csdn.net/wy_97/article/details/78085664\n\n### 关键字替换或匹配拦截\n\n#### 过滤空格\n替代空格的空白符有：`%0a, %0b, %0c, %0d, %09, %a0`（均为URL编码，%a0在特定字符集才能利用）和`/**/`组合、括号等。\n\n#### 将SELECT替换成空\n可以采用嵌套的方式，如SESELECTLECT。\n\n#### 大小写匹配\n在MySQL中，关键字是不区分大小写的，如果只匹配了SELECT就可以通过大小写混写的方式绕过。\n\n#### 正则匹配\n正则匹配关键字`\\bselect\\b`可以用形如`/*!50000select*/`的方式绕过。\n\n#### 替换了单引号或双引号，没有过滤反斜杠\n`id='a\\' AND title = 'OR sleep(1)#'`\n反斜杠转义了预置的单引号，实现绕过。\n\n### 逃逸引号\n\n#### 编码解码\n当用户输入待转义函数时，如果数据处于编码状态则引号无法被转义。\n同样的情况也发生在加密/解密、字符集转换的情况。\n* 宽字节注入\n\n#### 意料之外的输入点\n被遗漏的可控点，例如PHP中，上传的文件名、http header、$_SERVER['PHP_SELF'] 等变量。\n\n#### 二次注入\n由于开发者信任数据库中取出的数据是无害的，从而导致二次注入漏洞的出现。\n*  用户名为`admin'or'1`\n\n#### 字符串截断\n在标题、抬头等位置，开发者可能限制其字符不能超过x个字符，超过就会被截断。\n假如攻击者输入`aaaa'`，自动转义为`aaaa\\'`，由于长度限制被截取为`aaaa\\`，正好转义预置的单引号，实现注入。\n\n### 注入应用\n* 在有写文件权限的情况下，直接用INTO OUTFILE或DUMPFILE向Web目录写文件，或写文件后结合文件包含漏洞实现代码执行。ref:https://baijiahao.baidu.com/s?id=1650711425682220792&wfr=spider&for=pc\n* 在有读文件权限的情况下，用load_file()函数读取网站源码和配置信息，获取敏感数据。\n* 提升权限，绕过登录，添加用户，调整用户权限。\n* 通过数据，控制如缓存、模板等文件内容来获取权限，或者删除、读取某些关键文件。\n* 在可以执行多语句的情况下，控制整个数据库，包括控制任意数据、任意字段长度等。\n* 在SQL Server这类数据库中可以直接执行系统命令。\n\n### 总结\n实际比赛中，应根据不同的SQL服务器类型查找相关资料，通过fuzz得出被过滤的字符、函数、关键词等，在文档中查找未过滤的替代，完成绕过。\n* 练习靶场：github-sqli-labs\n\n## 任意文件读取漏洞\n\n### 文件读取漏洞常见触发点\n\n#### PHP\n有关文件读取的标准函数（审计中重点关注）。\n包括但不限于：\n* `file_get_contents(),file(),fopen()`函数，(及其文件指针操作函数fread(),fgets()等);\n* 与文件包含相关的函数`include(),require(),include_once(),require_once()`等;\n* 通过PHP读文件的执行系统命令：`system(),exec()`等。\nPHP扩展中读取文件的函数：\n* php-curl扩展\n* XML模块XXE\n\n相关源码阅读：Wrapper和Filter\n\nPHP文件包含的实际问题：\n    1. 文件路径前面可控，后面不可控：在较低PHP及容器版本中可以使用`\\x00`截断，对应的URL编码是`%00`。当服务端存在文件上传功能时，也可以尝试利用zip或phar协议直接进行文件包含执行PHP代码。\n    1. 文件路径后面可控，前面不可控：通过`../`进行目录穿越读取文件，但这种情况无法使用Wrapper，如果服务器是利用include等文件包含类的函数，将无法读取PHP文件中的PHP代码。\n    1. 文件路径中间可控：和第一种相似，但无法利用Wrapper进行文件包含。\n\n#### Python\n漏洞经常出现在框架请求静态资源文件部分，也就是最后读取文件内容的open函数。但直接导致漏洞的原因往往是Python函数的feature被忽略。\n\n除了Python框架，很多其它涉及文件操作的应用也可能因为滥用open函数、模板的不当渲染导致任意文件读取。\n\n#### JAVA\n* 文件读取函数FileInputStream\n* XXE\n* JAVA模块所支持的`file://`协议\n* Spring Cloud Config Server 路径穿越与任意文件读取漏洞 CVE-2019-3799, Jenkins 任意文件读取漏洞 CVE-2018-1999002\n\n#### Ruby\n* 通常与Rails框架相关。\n* Ruby on Rails 远程代码执行漏洞 CVE-2016-0752，Ruby on Rails 路径穿越与任意文件读取漏洞 CVE-2018-3760，Ruby on Rails 路径穿越与任意文件读取漏洞 CVE-2019-5418\n\n#### Node\n* 通常为模板注入、代码注入等。\n* Node.js express 模块任意文件读取漏洞 CVE-2017-14849\n\n### 中间件/服务器相关\n\n#### Nginx错误配置\n常搭配Python-Web应用一起出现。\n* /static../ -> /home/myapp/static/../，产生目录穿越，穿越至myapp目录。原因：location最后没有加‘/’限制\n```\nlocation /static {\n  alias /home/myapp/static/;\n}\n```\n\n#### 数据库\nMySQL：\n* load_file(),利用条件严格，但仍然常出相关文件读取题目。\n* load data infile，需要执行完整的SQL语句且需要FILE权限，比较少见，除了SSRF攻击MySQL以外，很少能够直接执行整条非基本SQL语句的机会。\n\n#### 软链接\n又称符号链接，即soft link或symbolic link。相当于win下的快捷方式。\n\n硬链接与软链接的区别： https://www.jianshu.com/p/b035d94fa959\n\nbash命令`ln-s`可以创建一个指向指定文件的软链接文件，然后将该文件上传至服务器，访问该链接文件时，实际上是在请求服务端它指向的文件。\n\n#### FFmpeg\nCISCN 2017 FFmpeg 任意文件读取漏洞\n\n#### Doker-API\nDocker-API可以控制Docker的行为，Docker-API通过UNIX Socket通信，也可以通过HTTP直接通信。当可以通过SSRF漏洞进行UNIX Socket通信时，就可以通过操纵Docker-API把本地文件载入Docker新容器进行读取（利用Docker的ADD、COPY操作）。\n\n### 客户端相关\n客户端文件读取漏洞，大多基于XSS读取本地文件。\n\n#### 浏览器/Flash XSS\njs读取本地文件\n* Safari浏览器 客户端本地文件读取漏洞\n\n#### MarkDown语法解析器XSS\n具有解析js的能力，且缺乏浏览器的读取本地文件限制。\n\n## 文件读取漏洞常见读取路径\n\n### Linux\n\n#### flag名称（相对路径）\nfuzz方式获取\n```\n../../../../../../../../../flag(.txt|.php|.pyc|.py ...)\nflag(.txt|.php|.pyc|.py ...)\n[dir_you_know]/flag(.txt|.php|.pyc|.py ...)\n../../../../../../../../../etc/flag(.txt|.php|.pyc|.py ...)\n../../../../../../../../../tmp/flag(.txt|.php|.pyc|.py ...)\n../flag(.txt|.php|.pyc|.py ...)\n../../../../../../../../root/flag(.txt|.php|.pyc|.py ...)\n../../../../../../../../home/flag(.txt|.php|.pyc|.py ...)\n../../../../../../../../home/[user_you_know]/flag(.txt|.php|.pyc|.py ...)\n```\n\n#### 服务器信息（绝对路径）\nCTF中常见的部分须知目录和文件\n\n1.  /etc目录\n    多是各种应用或系统配置文件，是进行文件读取的首要目标。\n1.  /etc/passwd （详细解析：http://c.biancheng.net/view/839.html）\n    Linux系统保存用户信息及其工作目录的文件，所有用户/组可读，一般用作Linux系统下文件读取漏洞存在判断的基准。从该文件可得系统中存在哪些用户，及其所属组和工作目录。\n1.  /etc/shadow （详细解析： http://c.biancheng.net/view/840.html）\n    是Linux系统保存用户信息及（可能存在）密码（hash）的文件，权限是root用户可读写、shadow组可读。所以一般情况下该文件不可读。\n1.  /etc/apache2/*\n    是Apache的配置文件，可以获知Web目录、服务端口等信息。\n1.  /etc/nginx/*\n    是Nginx配置文件（Ubuntu等系统），可以获知Web目录、服务端口等信息。\n1.  /etc/apparmor(.d)/*\n    是Apparmor配置文件，可以获知各应用系统调用的白名单、黑名单。（如查看MySQL是否禁用系统调用，确定是否可以使用UDF执行系统命令）\n1.  /etc/(cron.d/*|crontab)\n    是定时任务文件。有些题会设置一些定时任务，读取这些配置文件就可以发现隐藏的目录或其它文件。\n1.  /etc/environment\n    是环境变量配置文件之一。环境变量可能存在大量目录信息的泄漏，甚至可能出现secret key泄漏的情况。\n1.  /etc/hostname\n    主机名\n1.  /etc/hosts\n    主机名查询静态表，包含知道域名解析IP的成对信息。通过该文件，可以探测网卡信息和内网IP/域名。\n1.  /etc/issue\n    指明系统版本。\n1.  /etc/mysql/*\n    MySQL配置文件。\n1.  /etc/php/*\n    PHP配置文件。\n1.  /proc目录\n    通常存储进程动态运行的各种信息，本质上是一种虚拟目录。\n    *如果查看非当前进程的信息，pid是可以暴力破解的，如果要查看当前进程，只需/proc/self/代替/proc/[pid]/即可。*\n    对应目录下的cmdline可读出比较敏感的信息。`/proc/[pid]/cmdline`\n    有时我们无法获取当前应用所在的目录，通过cwd命令可以直接跳转到当前目录。`/proc/[pid]/cwd/`\n    环境变量中可能存在secret_key，也可以通过environ读取。`/proc/[pid]/environ`\n1.  其它目录\n    \n","slug":"Notes_0-to-1-the-road-of-CTFer_1","published":1,"updated":"2023-02-20T06:35:56.985Z","_id":"clecfhg0m0013x940axti8mlb","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"第一章-Web入门\"><a href=\"#第一章-Web入门\" class=\"headerlink\" title=\"第一章 Web入门\"></a>第一章 Web入门</h1><h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><h3 id=\"敏感信息泄漏\"><a href=\"#敏感信息泄漏\" class=\"headerlink\" title=\"敏感信息泄漏\"></a>敏感信息泄漏</h3><h4 id=\"git泄漏\"><a href=\"#git泄漏\" class=\"headerlink\" title=\"git泄漏\"></a>git泄漏</h4><ol>\n<li>常规git泄漏：flag在源码内，可直接利用工具或脚本获取。</li>\n<li>git回滚：flag被修改，但依然保存在commit记录里。<ul>\n<li>利用<code>git reset --hard [版本号]</code>获取flag。</li>\n<li>更简单的方法是通过<code>git log-stat</code>查看每个commit修改了哪些文件，再用<code>git diff HEAD [commit-id]</code>比较当前版本和想看的commit之间的变化。</li>\n</ul>\n</li>\n<li>git分支：命令<code>git reflog</code>查看分支间切换的记录。从原url下载分支内容并恢复（目前的恢复分支记录需要下载分支HEAD并修改GitHacker.py代码实现自动恢复分支，先简单记录下来，后续看是否有其它更简单的方式。）</li>\n<li>git stash：stash是对当前工作的“保存”，以备后续恢复。<code>git stash list</code>查看保存的列表，<code>git stash pop</code>恢复工作现场，<code>git stash show</code>显示做了哪些改动。</li>\n<li>git index：index是暂存区，用于通过git add .命令暂存新建文件等待commit。使用<code>git checkout-index</code>命令恢复文件。</li>\n<li>git泄漏的其他利用方式：泄漏的git中也可能有其他有用的信息。<ul>\n<li>.git/config文件夹中可能含有access_token信息，从而访问该用户的其它仓库。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"SVN泄漏\"><a href=\"#SVN泄漏\" class=\"headerlink\" title=\"SVN泄漏\"></a>SVN泄漏</h4><p>SVN是源代码版本管理软件，如果存在泄漏，可以利用.svn/entries或wc.db文件获取服务器源码等信息。</p>\n<ul>\n<li><a href=\"https://github.com/kost/dvcs-ripper\">https://github.com/kost/dvcs-ripper</a></li>\n<li>Seay-svn（Win）</li>\n</ul>\n<h4 id=\"HG泄漏\"><a href=\"#HG泄漏\" class=\"headerlink\" title=\"HG泄漏\"></a>HG泄漏</h4><p>.hg隐藏文件中包含代码和分支修改记录等信息。</p>\n<ul>\n<li><a href=\"https://github.com/kost/dvcs-ripper\">https://github.com/kost/dvcs-ripper</a></li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>CTF线上赛往往会有重定向的问题，例如，只要访问<code>.git</code>便会返回403,此时访问<code>.git/config</code>，如果有文件内容返回，说明存在git泄漏，反之，一般不存在。而在SVN泄漏中，一般是在entries中爬取源代码，但有时会出现entries为空的情况，这时注意wc.db文件存在与否，便可通过其中的checksum在pristine文件夹中获取源代码。</p>\n<h3 id=\"敏感备份文件\"><a href=\"#敏感备份文件\" class=\"headerlink\" title=\"敏感备份文件\"></a>敏感备份文件</h3><h4 id=\"gedit备份文件\"><a href=\"#gedit备份文件\" class=\"headerlink\" title=\"gedit备份文件\"></a>gedit备份文件</h4><p>在Linux下，用gedit编辑器保存文件后，当前目录下会生成一个<code>[文件名]~</code>的备份文件，访问这个文件即可获得文件内容。</p>\n<h4 id=\"vim备份文件\"><a href=\"#vim备份文件\" class=\"headerlink\" title=\"vim备份文件\"></a>vim备份文件</h4><p>vim在意外退出时会生成一个备份文件，文件名格式为<code>.filename.swp</code>，再次生成备份文件时则为<code>.filename.swo</code>，第三次为<code>.filename.swn</code>，以此类推。恢复备份的办法是，先在当前目录下创建一个flag文件，再使用<code>vim-r flag</code>，即可恢复.flag.swp。</p>\n<h4 id=\"常规文件\"><a href=\"#常规文件\" class=\"headerlink\" title=\"常规文件\"></a>常规文件</h4><p>主要靠丰富字典。(dirsearch+自己收集字典)</p>\n<ul>\n<li>phpinfo()</li>\n<li>备份文件后缀<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">back.rar</span><br><span class=\"line\">back.tar</span><br><span class=\"line\">back.tar.gz</span><br><span class=\"line\">back.zip</span><br><span class=\"line\">backup.rar</span><br><span class=\"line\">backup.tar</span><br><span class=\"line\">backup.tar.gz</span><br><span class=\"line\">backup.zip</span><br><span class=\"line\">temp.rar</span><br><span class=\"line\">temp.tar</span><br><span class=\"line\">temp.tar.gz</span><br><span class=\"line\">temp.zip</span><br><span class=\"line\">web.rar</span><br><span class=\"line\">web.tar</span><br><span class=\"line\">web.tar.gz</span><br><span class=\"line\">web.zip</span><br><span class=\"line\">website.rar</span><br><span class=\"line\">website.tar</span><br><span class=\"line\">website.tar.gz</span><br><span class=\"line\">website.zip</span><br><span class=\"line\">www.rar</span><br><span class=\"line\">www.tar</span><br><span class=\"line\">www.tar.gz</span><br><span class=\"line\">www.zip</span><br><span class=\"line\">wwwroot.rar</span><br><span class=\"line\">wwwroot.tar</span><br><span class=\"line\">wwwroot.tar.gz</span><br><span class=\"line\">wwwroot.zip</span><br><span class=\"line\">index.php.bak</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>线上赛过程中，出题人往往会在线运维题目，有时会导致swp备份文件的生成。所以读者在比赛过程中可以编写实时监控脚本，对题目服务进行监控。</p>\n<h3 id=\"Banner识别\"><a href=\"#Banner识别\" class=\"headerlink\" title=\"Banner识别\"></a>Banner识别</h3><p>在线上赛中，网站的Banner对解题有着十分重要的作用，选手往往可以通过Banner信息来获得解题思路。<br>如得知网站是用ThinkPHP的Web框架编写时，我们可以尝试ThinkPHP框架的相关历史漏洞。或者得知这个网站是Windows服务器，那么我们在测试上传漏洞时可以根据Windows的特性进行尝试。</p>\n<h4 id=\"自行收集指纹库\"><a href=\"#自行收集指纹库\" class=\"headerlink\" title=\"自行收集指纹库\"></a>自行收集指纹库</h4><ul>\n<li>Github CMS指纹库</li>\n<li>扫描器识别</li>\n</ul>\n<h4 id=\"使用已有工具\"><a href=\"#使用已有工具\" class=\"headerlink\" title=\"使用已有工具\"></a>使用已有工具</h4><ul>\n<li>Wappalyzer（pip install python-Wappalyzer）：在data目录下，apps.json是其规则库，读者可以根据自己需求自由添加。</li>\n</ul>\n<h4 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>除了以上两种识别方式，我们还可以通过随意输入一些URL，观察404和302跳转页面中是否包含CMS及版本号。</p>\n<h2 id=\"CTF中的SQL注入\"><a href=\"#CTF中的SQL注入\" class=\"headerlink\" title=\"CTF中的SQL注入\"></a>CTF中的SQL注入</h2><h3 id=\"SQL注入（mysql）\"><a href=\"#SQL注入（mysql）\" class=\"headerlink\" title=\"SQL注入（mysql）\"></a>SQL注入（mysql）</h3><h4 id=\"数字型注入\"><a href=\"#数字型注入\" class=\"headerlink\" title=\"数字型注入\"></a>数字型注入</h4><p>test.php?id=2 -&gt; true。返回记录。<br>test.php?id=3-1 -&gt; true，返回id=2的记录。<br>说明mysql对3-1进行了计算，从数字运算这个特征可以判断该注入点为数字型注入，输入点$_GET[‘id’]附近没有引号包裹，可以直接输入SQL查询语句。</p>\n<p>mysql查询出两行记录（union select联合查询注入）但PHP源码限制只能显示一行记录的办法：<br>    1. 在原有数据后面加上<code>limit 1,1</code>参数，显示查询结果的第二条记录。<br>    1. 指定id=-1或一个很大的值，使第一条数据无法被查询到。（常用）</p>\n<h4 id=\"字符型注入\"><a href=\"#字符型注入\" class=\"headerlink\" title=\"字符型注入\"></a>字符型注入</h4><p>与数字型注入相比，只是在GET参数输入的地方包裹了单引号（少部分情况为双引号）让其变成字符串。<br>在MySQL中，等号两边如果类型不一致则会发生强制转换，当数字和字符串数据比较时，字符串将被转换为数字再进行比较。<br>test.php?id=3-2，无返回结果，证明注入点不是数字型。继续尝试test.php?id=2a，返回id=2的结果，证明存在字符型注入。</p>\n<pre><code>1. 尝试使用单引号闭合前面的单引号，（插入查询语句），再用`--%20`或`%23`注释后面的语句，注意在URL框输入时，`-- `和`#`以及`&#39;&#39;`要进行URL编码。\n1. 除了注释，也可以使用单引号来闭合后面的单引号，eg: test.php?id=2&#39;union select xxx &#39;\n</code></pre>\n<h4 id=\"布尔盲注\"><a href=\"#布尔盲注\" class=\"headerlink\" title=\"布尔盲注\"></a>布尔盲注</h4><p>test.php?id=1’and’f’=’a’，猜中则返回id=1内容<br>更快的方法为 test.php?id=1’and’f’&lt;’n’，二分法。<br>如何获取每一位字符？利用mysql的substring(),mid(),substr()等。</p>\n<h4 id=\"时间盲注\"><a href=\"#时间盲注\" class=\"headerlink\" title=\"时间盲注\"></a>时间盲注</h4><p>php?id=1’or sleep(10)</p>\n<h4 id=\"报错注入\"><a href=\"#报错注入\" class=\"headerlink\" title=\"报错注入\"></a>报错注入</h4><p>mysql会将语句执行后的报错信息输出。<br>updatexml在执行时，第二个参数应该为合法的XPATH路径，否则会在引发报错时输出传入的参数。<br>id=’1’ or updatexml(1,concat(0x7e,(select pwd from wp_user)),1)<br>updatexml()报错注入，ref: <a href=\"https://blog.csdn.net/qq_37873738/article/details/88042610\">https://blog.csdn.net/qq_37873738/article/details/88042610</a></p>\n<h4 id=\"堆叠注入\"><a href=\"#堆叠注入\" class=\"headerlink\" title=\"堆叠注入\"></a>堆叠注入</h4><p>当目标开启多语句执行时，可以采用多语句执行的方式修改数据库结构和数据。</p>\n<h3 id=\"注入点\"><a href=\"#注入点\" class=\"headerlink\" title=\"注入点\"></a>注入点</h3><h4 id=\"注入点在select-expr\"><a href=\"#注入点在select-expr\" class=\"headerlink\" title=\"注入点在select_expr\"></a>注入点在select_expr</h4><p>AS别名：id=(select%20pwd%20from%20wp_user)%20as%20title</p>\n<h4 id=\"注入点在table-reference\"><a href=\"#注入点在table-reference\" class=\"headerlink\" title=\"注入点在table_reference\"></a>注入点在table_reference</h4><p>仍可以用别名取出数据：SELECT title FROM (SELECT pwd AS title FROM wp_user)x;</p>\n<p>在该两处的注入，如果注入点有反引号包裹，那么需要先闭合反引号。</p>\n<h4 id=\"注入点在WHERE或HAVING后\"><a href=\"#注入点在WHERE或HAVING后\" class=\"headerlink\" title=\"注入点在WHERE或HAVING后\"></a>注入点在WHERE或HAVING后</h4><p>代码：<code>$res = mysqli_query($conn, &quot;SELECT title FROM wp_news WHERE id = $&#123;_GET[id]&#125;&quot;);</code><br>现实中最常遇到的情况，要先判断有无引号包裹，再闭合前面可能存在的括号，即可进行注入来获取数据。</p>\n<p>注入点在HAVING后的情况与之类似。</p>\n<h4 id=\"注入点在GROUP-BY或ORDER-BY后\"><a href=\"#注入点在GROUP-BY或ORDER-BY后\" class=\"headerlink\" title=\"注入点在GROUP BY或ORDER BY后\"></a>注入点在GROUP BY或ORDER BY后</h4><p>当遇到不是WHERE后的注入点时，先在本地MySQL中进行尝试，看语句后面能加什么，从而判断当前可以注入的位置，进而进行有针对的注入。</p>\n<p>假设代码如下：<code>$res = mysqli_query($conn, &quot;SELECT title FROM wp_news GROUP BY $&#123;_GET[&#39;title&#39;]&#125;&quot;);</code><br>测试可得，title=id desc,(if(1,sleep(1),1))，可以利用时间注入获取数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">事实上只要对输入值进行白名单比对，基本就能防御这种注入。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注入点在LIMIT后\"><a href=\"#注入点在LIMIT后\" class=\"headerlink\" title=\"注入点在LIMIT后\"></a>注入点在LIMIT后</h4><p>该注入比较简单，通过更改数字大小，页面会显示更多或更少的记录数。由于语法限制，LIMIT后只能是数字，在整个SQL语句没有ORDER BY关键字的情况下，可以直接使用UNION注入。另外可以根据SELECT语法，通过加入PROCEDURE来尝试注入（只适用于MySQL 5.6前的版本）</p>\n<h3 id=\"INSERT注入\"><a href=\"#INSERT注入\" class=\"headerlink\" title=\"INSERT注入\"></a>INSERT注入</h3><p>通常注入位于字段名或字段值的地方，且没有回显信息。</p>\n<h4 id=\"注入点位于tbl-name\"><a href=\"#注入点位于tbl-name\" class=\"headerlink\" title=\"注入点位于tbl_name\"></a>注入点位于tbl_name</h4><p>如果能够通过注释符注释后续语句，则可直接插入特定数据到想要的表内，如管理员表。</p>\n<h4 id=\"注入点位于VALUES\"><a href=\"#注入点位于VALUES\" class=\"headerlink\" title=\"注入点位于VALUES\"></a>注入点位于VALUES</h4><h3 id=\"UPDATE注入\"><a href=\"#UPDATE注入\" class=\"headerlink\" title=\"UPDATE注入\"></a>UPDATE注入</h3><h3 id=\"DELETE注入\"><a href=\"#DELETE注入\" class=\"headerlink\" title=\"DELETE注入\"></a>DELETE注入</h3><p>对id参数进行注入时，如果使WHERE后的值变为true，数据就会被删除。为了保证正常数据不会被干扰，通常使用<code>and sleep (1)</code>保证WHERE后的结果返回为false，让语句无法成功执行，后续步骤参考时间盲注。</p>\n<h2 id=\"注入防御及绕过思路\"><a href=\"#注入防御及绕过思路\" class=\"headerlink\" title=\"注入防御及绕过思路\"></a>注入防御及绕过思路</h2><p>其它ref：<a href=\"https://blog.csdn.net/wy_97/article/details/78085664\">https://blog.csdn.net/wy_97/article/details/78085664</a></p>\n<h3 id=\"关键字替换或匹配拦截\"><a href=\"#关键字替换或匹配拦截\" class=\"headerlink\" title=\"关键字替换或匹配拦截\"></a>关键字替换或匹配拦截</h3><h4 id=\"过滤空格\"><a href=\"#过滤空格\" class=\"headerlink\" title=\"过滤空格\"></a>过滤空格</h4><p>替代空格的空白符有：<code>%0a, %0b, %0c, %0d, %09, %a0</code>（均为URL编码，%a0在特定字符集才能利用）和<code>/**/</code>组合、括号等。</p>\n<h4 id=\"将SELECT替换成空\"><a href=\"#将SELECT替换成空\" class=\"headerlink\" title=\"将SELECT替换成空\"></a>将SELECT替换成空</h4><p>可以采用嵌套的方式，如SESELECTLECT。</p>\n<h4 id=\"大小写匹配\"><a href=\"#大小写匹配\" class=\"headerlink\" title=\"大小写匹配\"></a>大小写匹配</h4><p>在MySQL中，关键字是不区分大小写的，如果只匹配了SELECT就可以通过大小写混写的方式绕过。</p>\n<h4 id=\"正则匹配\"><a href=\"#正则匹配\" class=\"headerlink\" title=\"正则匹配\"></a>正则匹配</h4><p>正则匹配关键字<code>\\bselect\\b</code>可以用形如<code>/*!50000select*/</code>的方式绕过。</p>\n<h4 id=\"替换了单引号或双引号，没有过滤反斜杠\"><a href=\"#替换了单引号或双引号，没有过滤反斜杠\" class=\"headerlink\" title=\"替换了单引号或双引号，没有过滤反斜杠\"></a>替换了单引号或双引号，没有过滤反斜杠</h4><p><code>id=&#39;a\\&#39; AND title = &#39;OR sleep(1)#&#39;</code><br>反斜杠转义了预置的单引号，实现绕过。</p>\n<h3 id=\"逃逸引号\"><a href=\"#逃逸引号\" class=\"headerlink\" title=\"逃逸引号\"></a>逃逸引号</h3><h4 id=\"编码解码\"><a href=\"#编码解码\" class=\"headerlink\" title=\"编码解码\"></a>编码解码</h4><p>当用户输入待转义函数时，如果数据处于编码状态则引号无法被转义。<br>同样的情况也发生在加密/解密、字符集转换的情况。</p>\n<ul>\n<li>宽字节注入</li>\n</ul>\n<h4 id=\"意料之外的输入点\"><a href=\"#意料之外的输入点\" class=\"headerlink\" title=\"意料之外的输入点\"></a>意料之外的输入点</h4><p>被遗漏的可控点，例如PHP中，上传的文件名、http header、$_SERVER[‘PHP_SELF’] 等变量。</p>\n<h4 id=\"二次注入\"><a href=\"#二次注入\" class=\"headerlink\" title=\"二次注入\"></a>二次注入</h4><p>由于开发者信任数据库中取出的数据是无害的，从而导致二次注入漏洞的出现。</p>\n<ul>\n<li> 用户名为<code>admin&#39;or&#39;1</code></li>\n</ul>\n<h4 id=\"字符串截断\"><a href=\"#字符串截断\" class=\"headerlink\" title=\"字符串截断\"></a>字符串截断</h4><p>在标题、抬头等位置，开发者可能限制其字符不能超过x个字符，超过就会被截断。<br>假如攻击者输入<code>aaaa&#39;</code>，自动转义为<code>aaaa\\&#39;</code>，由于长度限制被截取为<code>aaaa\\</code>，正好转义预置的单引号，实现注入。</p>\n<h3 id=\"注入应用\"><a href=\"#注入应用\" class=\"headerlink\" title=\"注入应用\"></a>注入应用</h3><ul>\n<li>在有写文件权限的情况下，直接用INTO OUTFILE或DUMPFILE向Web目录写文件，或写文件后结合文件包含漏洞实现代码执行。ref:<a href=\"https://baijiahao.baidu.com/s?id=1650711425682220792&amp;wfr=spider&amp;for=pc\">https://baijiahao.baidu.com/s?id=1650711425682220792&amp;wfr=spider&amp;for=pc</a></li>\n<li>在有读文件权限的情况下，用load_file()函数读取网站源码和配置信息，获取敏感数据。</li>\n<li>提升权限，绕过登录，添加用户，调整用户权限。</li>\n<li>通过数据，控制如缓存、模板等文件内容来获取权限，或者删除、读取某些关键文件。</li>\n<li>在可以执行多语句的情况下，控制整个数据库，包括控制任意数据、任意字段长度等。</li>\n<li>在SQL Server这类数据库中可以直接执行系统命令。</li>\n</ul>\n<h3 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>实际比赛中，应根据不同的SQL服务器类型查找相关资料，通过fuzz得出被过滤的字符、函数、关键词等，在文档中查找未过滤的替代，完成绕过。</p>\n<ul>\n<li>练习靶场：github-sqli-labs</li>\n</ul>\n<h2 id=\"任意文件读取漏洞\"><a href=\"#任意文件读取漏洞\" class=\"headerlink\" title=\"任意文件读取漏洞\"></a>任意文件读取漏洞</h2><h3 id=\"文件读取漏洞常见触发点\"><a href=\"#文件读取漏洞常见触发点\" class=\"headerlink\" title=\"文件读取漏洞常见触发点\"></a>文件读取漏洞常见触发点</h3><h4 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h4><p>有关文件读取的标准函数（审计中重点关注）。<br>包括但不限于：</p>\n<ul>\n<li><code>file_get_contents(),file(),fopen()</code>函数，(及其文件指针操作函数fread(),fgets()等);</li>\n<li>与文件包含相关的函数<code>include(),require(),include_once(),require_once()</code>等;</li>\n<li>通过PHP读文件的执行系统命令：<code>system(),exec()</code>等。<br>PHP扩展中读取文件的函数：</li>\n<li>php-curl扩展</li>\n<li>XML模块XXE</li>\n</ul>\n<p>相关源码阅读：Wrapper和Filter</p>\n<p>PHP文件包含的实际问题：<br>    1. 文件路径前面可控，后面不可控：在较低PHP及容器版本中可以使用<code>\\x00</code>截断，对应的URL编码是<code>%00</code>。当服务端存在文件上传功能时，也可以尝试利用zip或phar协议直接进行文件包含执行PHP代码。<br>    1. 文件路径后面可控，前面不可控：通过<code>../</code>进行目录穿越读取文件，但这种情况无法使用Wrapper，如果服务器是利用include等文件包含类的函数，将无法读取PHP文件中的PHP代码。<br>    1. 文件路径中间可控：和第一种相似，但无法利用Wrapper进行文件包含。</p>\n<h4 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h4><p>漏洞经常出现在框架请求静态资源文件部分，也就是最后读取文件内容的open函数。但直接导致漏洞的原因往往是Python函数的feature被忽略。</p>\n<p>除了Python框架，很多其它涉及文件操作的应用也可能因为滥用open函数、模板的不当渲染导致任意文件读取。</p>\n<h4 id=\"JAVA\"><a href=\"#JAVA\" class=\"headerlink\" title=\"JAVA\"></a>JAVA</h4><ul>\n<li>文件读取函数FileInputStream</li>\n<li>XXE</li>\n<li>JAVA模块所支持的<code>file://</code>协议</li>\n<li>Spring Cloud Config Server 路径穿越与任意文件读取漏洞 CVE-2019-3799, Jenkins 任意文件读取漏洞 CVE-2018-1999002</li>\n</ul>\n<h4 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h4><ul>\n<li>通常与Rails框架相关。</li>\n<li>Ruby on Rails 远程代码执行漏洞 CVE-2016-0752，Ruby on Rails 路径穿越与任意文件读取漏洞 CVE-2018-3760，Ruby on Rails 路径穿越与任意文件读取漏洞 CVE-2019-5418</li>\n</ul>\n<h4 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h4><ul>\n<li>通常为模板注入、代码注入等。</li>\n<li>Node.js express 模块任意文件读取漏洞 CVE-2017-14849</li>\n</ul>\n<h3 id=\"中间件-服务器相关\"><a href=\"#中间件-服务器相关\" class=\"headerlink\" title=\"中间件/服务器相关\"></a>中间件/服务器相关</h3><h4 id=\"Nginx错误配置\"><a href=\"#Nginx错误配置\" class=\"headerlink\" title=\"Nginx错误配置\"></a>Nginx错误配置</h4><p>常搭配Python-Web应用一起出现。</p>\n<ul>\n<li>/static../ -&gt; /home/myapp/static/../，产生目录穿越，穿越至myapp目录。原因：location最后没有加‘/’限制<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;static &#123;</span><br><span class=\"line\">  alias &#x2F;home&#x2F;myapp&#x2F;static&#x2F;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>MySQL：</p>\n<ul>\n<li>load_file(),利用条件严格，但仍然常出相关文件读取题目。</li>\n<li>load data infile，需要执行完整的SQL语句且需要FILE权限，比较少见，除了SSRF攻击MySQL以外，很少能够直接执行整条非基本SQL语句的机会。</li>\n</ul>\n<h4 id=\"软链接\"><a href=\"#软链接\" class=\"headerlink\" title=\"软链接\"></a>软链接</h4><p>又称符号链接，即soft link或symbolic link。相当于win下的快捷方式。</p>\n<p>硬链接与软链接的区别： <a href=\"https://www.jianshu.com/p/b035d94fa959\">https://www.jianshu.com/p/b035d94fa959</a></p>\n<p>bash命令<code>ln-s</code>可以创建一个指向指定文件的软链接文件，然后将该文件上传至服务器，访问该链接文件时，实际上是在请求服务端它指向的文件。</p>\n<h4 id=\"FFmpeg\"><a href=\"#FFmpeg\" class=\"headerlink\" title=\"FFmpeg\"></a>FFmpeg</h4><p>CISCN 2017 FFmpeg 任意文件读取漏洞</p>\n<h4 id=\"Doker-API\"><a href=\"#Doker-API\" class=\"headerlink\" title=\"Doker-API\"></a>Doker-API</h4><p>Docker-API可以控制Docker的行为，Docker-API通过UNIX Socket通信，也可以通过HTTP直接通信。当可以通过SSRF漏洞进行UNIX Socket通信时，就可以通过操纵Docker-API把本地文件载入Docker新容器进行读取（利用Docker的ADD、COPY操作）。</p>\n<h3 id=\"客户端相关\"><a href=\"#客户端相关\" class=\"headerlink\" title=\"客户端相关\"></a>客户端相关</h3><p>客户端文件读取漏洞，大多基于XSS读取本地文件。</p>\n<h4 id=\"浏览器-Flash-XSS\"><a href=\"#浏览器-Flash-XSS\" class=\"headerlink\" title=\"浏览器/Flash XSS\"></a>浏览器/Flash XSS</h4><p>js读取本地文件</p>\n<ul>\n<li>Safari浏览器 客户端本地文件读取漏洞</li>\n</ul>\n<h4 id=\"MarkDown语法解析器XSS\"><a href=\"#MarkDown语法解析器XSS\" class=\"headerlink\" title=\"MarkDown语法解析器XSS\"></a>MarkDown语法解析器XSS</h4><p>具有解析js的能力，且缺乏浏览器的读取本地文件限制。</p>\n<h2 id=\"文件读取漏洞常见读取路径\"><a href=\"#文件读取漏洞常见读取路径\" class=\"headerlink\" title=\"文件读取漏洞常见读取路径\"></a>文件读取漏洞常见读取路径</h2><h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><h4 id=\"flag名称（相对路径）\"><a href=\"#flag名称（相对路径）\" class=\"headerlink\" title=\"flag名称（相对路径）\"></a>flag名称（相对路径）</h4><p>fuzz方式获取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class=\"line\">flag(.txt|.php|.pyc|.py ...)</span><br><span class=\"line\">[dir_you_know]&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class=\"line\">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class=\"line\">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class=\"line\">..&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class=\"line\">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;root&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class=\"line\">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;home&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class=\"line\">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;home&#x2F;[user_you_know]&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"服务器信息（绝对路径）\"><a href=\"#服务器信息（绝对路径）\" class=\"headerlink\" title=\"服务器信息（绝对路径）\"></a>服务器信息（绝对路径）</h4><p>CTF中常见的部分须知目录和文件</p>\n<ol>\n<li>/etc目录<br> 多是各种应用或系统配置文件，是进行文件读取的首要目标。</li>\n<li>/etc/passwd （详细解析：<a href=\"http://c.biancheng.net/view/839.html%EF%BC%89\">http://c.biancheng.net/view/839.html）</a><br> Linux系统保存用户信息及其工作目录的文件，所有用户/组可读，一般用作Linux系统下文件读取漏洞存在判断的基准。从该文件可得系统中存在哪些用户，及其所属组和工作目录。</li>\n<li>/etc/shadow （详细解析： <a href=\"http://c.biancheng.net/view/840.html%EF%BC%89\">http://c.biancheng.net/view/840.html）</a><br> 是Linux系统保存用户信息及（可能存在）密码（hash）的文件，权限是root用户可读写、shadow组可读。所以一般情况下该文件不可读。</li>\n<li>/etc/apache2/*<br> 是Apache的配置文件，可以获知Web目录、服务端口等信息。</li>\n<li>/etc/nginx/*<br> 是Nginx配置文件（Ubuntu等系统），可以获知Web目录、服务端口等信息。</li>\n<li>/etc/apparmor(.d)/*<br> 是Apparmor配置文件，可以获知各应用系统调用的白名单、黑名单。（如查看MySQL是否禁用系统调用，确定是否可以使用UDF执行系统命令）</li>\n<li>/etc/(cron.d/*|crontab)<br> 是定时任务文件。有些题会设置一些定时任务，读取这些配置文件就可以发现隐藏的目录或其它文件。</li>\n<li>/etc/environment<br> 是环境变量配置文件之一。环境变量可能存在大量目录信息的泄漏，甚至可能出现secret key泄漏的情况。</li>\n<li>/etc/hostname<br> 主机名</li>\n<li>/etc/hosts<br> 主机名查询静态表，包含知道域名解析IP的成对信息。通过该文件，可以探测网卡信息和内网IP/域名。</li>\n<li>/etc/issue<br> 指明系统版本。</li>\n<li>/etc/mysql/*<br> MySQL配置文件。</li>\n<li>/etc/php/*<br> PHP配置文件。</li>\n<li>/proc目录<br> 通常存储进程动态运行的各种信息，本质上是一种虚拟目录。<br> <em>如果查看非当前进程的信息，pid是可以暴力破解的，如果要查看当前进程，只需/proc/self/代替/proc/[pid]/即可。</em><br> 对应目录下的cmdline可读出比较敏感的信息。<code>/proc/[pid]/cmdline</code><br> 有时我们无法获取当前应用所在的目录，通过cwd命令可以直接跳转到当前目录。<code>/proc/[pid]/cwd/</code><br> 环境变量中可能存在secret_key，也可以通过environ读取。<code>/proc/[pid]/environ</code></li>\n<li>其它目录</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第一章-Web入门\"><a href=\"#第一章-Web入门\" class=\"headerlink\" title=\"第一章 Web入门\"></a>第一章 Web入门</h1><h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><h3 id=\"敏感信息泄漏\"><a href=\"#敏感信息泄漏\" class=\"headerlink\" title=\"敏感信息泄漏\"></a>敏感信息泄漏</h3><h4 id=\"git泄漏\"><a href=\"#git泄漏\" class=\"headerlink\" title=\"git泄漏\"></a>git泄漏</h4><ol>\n<li>常规git泄漏：flag在源码内，可直接利用工具或脚本获取。</li>\n<li>git回滚：flag被修改，但依然保存在commit记录里。<ul>\n<li>利用<code>git reset --hard [版本号]</code>获取flag。</li>\n<li>更简单的方法是通过<code>git log-stat</code>查看每个commit修改了哪些文件，再用<code>git diff HEAD [commit-id]</code>比较当前版本和想看的commit之间的变化。</li>\n</ul>\n</li>\n<li>git分支：命令<code>git reflog</code>查看分支间切换的记录。从原url下载分支内容并恢复（目前的恢复分支记录需要下载分支HEAD并修改GitHacker.py代码实现自动恢复分支，先简单记录下来，后续看是否有其它更简单的方式。）</li>\n<li>git stash：stash是对当前工作的“保存”，以备后续恢复。<code>git stash list</code>查看保存的列表，<code>git stash pop</code>恢复工作现场，<code>git stash show</code>显示做了哪些改动。</li>\n<li>git index：index是暂存区，用于通过git add .命令暂存新建文件等待commit。使用<code>git checkout-index</code>命令恢复文件。</li>\n<li>git泄漏的其他利用方式：泄漏的git中也可能有其他有用的信息。<ul>\n<li>.git/config文件夹中可能含有access_token信息，从而访问该用户的其它仓库。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"SVN泄漏\"><a href=\"#SVN泄漏\" class=\"headerlink\" title=\"SVN泄漏\"></a>SVN泄漏</h4><p>SVN是源代码版本管理软件，如果存在泄漏，可以利用.svn/entries或wc.db文件获取服务器源码等信息。</p>\n<ul>\n<li><a href=\"https://github.com/kost/dvcs-ripper\">https://github.com/kost/dvcs-ripper</a></li>\n<li>Seay-svn（Win）</li>\n</ul>\n<h4 id=\"HG泄漏\"><a href=\"#HG泄漏\" class=\"headerlink\" title=\"HG泄漏\"></a>HG泄漏</h4><p>.hg隐藏文件中包含代码和分支修改记录等信息。</p>\n<ul>\n<li><a href=\"https://github.com/kost/dvcs-ripper\">https://github.com/kost/dvcs-ripper</a></li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>CTF线上赛往往会有重定向的问题，例如，只要访问<code>.git</code>便会返回403,此时访问<code>.git/config</code>，如果有文件内容返回，说明存在git泄漏，反之，一般不存在。而在SVN泄漏中，一般是在entries中爬取源代码，但有时会出现entries为空的情况，这时注意wc.db文件存在与否，便可通过其中的checksum在pristine文件夹中获取源代码。</p>\n<h3 id=\"敏感备份文件\"><a href=\"#敏感备份文件\" class=\"headerlink\" title=\"敏感备份文件\"></a>敏感备份文件</h3><h4 id=\"gedit备份文件\"><a href=\"#gedit备份文件\" class=\"headerlink\" title=\"gedit备份文件\"></a>gedit备份文件</h4><p>在Linux下，用gedit编辑器保存文件后，当前目录下会生成一个<code>[文件名]~</code>的备份文件，访问这个文件即可获得文件内容。</p>\n<h4 id=\"vim备份文件\"><a href=\"#vim备份文件\" class=\"headerlink\" title=\"vim备份文件\"></a>vim备份文件</h4><p>vim在意外退出时会生成一个备份文件，文件名格式为<code>.filename.swp</code>，再次生成备份文件时则为<code>.filename.swo</code>，第三次为<code>.filename.swn</code>，以此类推。恢复备份的办法是，先在当前目录下创建一个flag文件，再使用<code>vim-r flag</code>，即可恢复.flag.swp。</p>\n<h4 id=\"常规文件\"><a href=\"#常规文件\" class=\"headerlink\" title=\"常规文件\"></a>常规文件</h4><p>主要靠丰富字典。(dirsearch+自己收集字典)</p>\n<ul>\n<li>phpinfo()</li>\n<li>备份文件后缀<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">back.rar</span><br><span class=\"line\">back.tar</span><br><span class=\"line\">back.tar.gz</span><br><span class=\"line\">back.zip</span><br><span class=\"line\">backup.rar</span><br><span class=\"line\">backup.tar</span><br><span class=\"line\">backup.tar.gz</span><br><span class=\"line\">backup.zip</span><br><span class=\"line\">temp.rar</span><br><span class=\"line\">temp.tar</span><br><span class=\"line\">temp.tar.gz</span><br><span class=\"line\">temp.zip</span><br><span class=\"line\">web.rar</span><br><span class=\"line\">web.tar</span><br><span class=\"line\">web.tar.gz</span><br><span class=\"line\">web.zip</span><br><span class=\"line\">website.rar</span><br><span class=\"line\">website.tar</span><br><span class=\"line\">website.tar.gz</span><br><span class=\"line\">website.zip</span><br><span class=\"line\">www.rar</span><br><span class=\"line\">www.tar</span><br><span class=\"line\">www.tar.gz</span><br><span class=\"line\">www.zip</span><br><span class=\"line\">wwwroot.rar</span><br><span class=\"line\">wwwroot.tar</span><br><span class=\"line\">wwwroot.tar.gz</span><br><span class=\"line\">wwwroot.zip</span><br><span class=\"line\">index.php.bak</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>线上赛过程中，出题人往往会在线运维题目，有时会导致swp备份文件的生成。所以读者在比赛过程中可以编写实时监控脚本，对题目服务进行监控。</p>\n<h3 id=\"Banner识别\"><a href=\"#Banner识别\" class=\"headerlink\" title=\"Banner识别\"></a>Banner识别</h3><p>在线上赛中，网站的Banner对解题有着十分重要的作用，选手往往可以通过Banner信息来获得解题思路。<br>如得知网站是用ThinkPHP的Web框架编写时，我们可以尝试ThinkPHP框架的相关历史漏洞。或者得知这个网站是Windows服务器，那么我们在测试上传漏洞时可以根据Windows的特性进行尝试。</p>\n<h4 id=\"自行收集指纹库\"><a href=\"#自行收集指纹库\" class=\"headerlink\" title=\"自行收集指纹库\"></a>自行收集指纹库</h4><ul>\n<li>Github CMS指纹库</li>\n<li>扫描器识别</li>\n</ul>\n<h4 id=\"使用已有工具\"><a href=\"#使用已有工具\" class=\"headerlink\" title=\"使用已有工具\"></a>使用已有工具</h4><ul>\n<li>Wappalyzer（pip install python-Wappalyzer）：在data目录下，apps.json是其规则库，读者可以根据自己需求自由添加。</li>\n</ul>\n<h4 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>除了以上两种识别方式，我们还可以通过随意输入一些URL，观察404和302跳转页面中是否包含CMS及版本号。</p>\n<h2 id=\"CTF中的SQL注入\"><a href=\"#CTF中的SQL注入\" class=\"headerlink\" title=\"CTF中的SQL注入\"></a>CTF中的SQL注入</h2><h3 id=\"SQL注入（mysql）\"><a href=\"#SQL注入（mysql）\" class=\"headerlink\" title=\"SQL注入（mysql）\"></a>SQL注入（mysql）</h3><h4 id=\"数字型注入\"><a href=\"#数字型注入\" class=\"headerlink\" title=\"数字型注入\"></a>数字型注入</h4><p>test.php?id=2 -&gt; true。返回记录。<br>test.php?id=3-1 -&gt; true，返回id=2的记录。<br>说明mysql对3-1进行了计算，从数字运算这个特征可以判断该注入点为数字型注入，输入点$_GET[‘id’]附近没有引号包裹，可以直接输入SQL查询语句。</p>\n<p>mysql查询出两行记录（union select联合查询注入）但PHP源码限制只能显示一行记录的办法：<br>    1. 在原有数据后面加上<code>limit 1,1</code>参数，显示查询结果的第二条记录。<br>    1. 指定id=-1或一个很大的值，使第一条数据无法被查询到。（常用）</p>\n<h4 id=\"字符型注入\"><a href=\"#字符型注入\" class=\"headerlink\" title=\"字符型注入\"></a>字符型注入</h4><p>与数字型注入相比，只是在GET参数输入的地方包裹了单引号（少部分情况为双引号）让其变成字符串。<br>在MySQL中，等号两边如果类型不一致则会发生强制转换，当数字和字符串数据比较时，字符串将被转换为数字再进行比较。<br>test.php?id=3-2，无返回结果，证明注入点不是数字型。继续尝试test.php?id=2a，返回id=2的结果，证明存在字符型注入。</p>\n<pre><code>1. 尝试使用单引号闭合前面的单引号，（插入查询语句），再用`--%20`或`%23`注释后面的语句，注意在URL框输入时，`-- `和`#`以及`&#39;&#39;`要进行URL编码。\n1. 除了注释，也可以使用单引号来闭合后面的单引号，eg: test.php?id=2&#39;union select xxx &#39;\n</code></pre>\n<h4 id=\"布尔盲注\"><a href=\"#布尔盲注\" class=\"headerlink\" title=\"布尔盲注\"></a>布尔盲注</h4><p>test.php?id=1’and’f’=’a’，猜中则返回id=1内容<br>更快的方法为 test.php?id=1’and’f’&lt;’n’，二分法。<br>如何获取每一位字符？利用mysql的substring(),mid(),substr()等。</p>\n<h4 id=\"时间盲注\"><a href=\"#时间盲注\" class=\"headerlink\" title=\"时间盲注\"></a>时间盲注</h4><p>php?id=1’or sleep(10)</p>\n<h4 id=\"报错注入\"><a href=\"#报错注入\" class=\"headerlink\" title=\"报错注入\"></a>报错注入</h4><p>mysql会将语句执行后的报错信息输出。<br>updatexml在执行时，第二个参数应该为合法的XPATH路径，否则会在引发报错时输出传入的参数。<br>id=’1’ or updatexml(1,concat(0x7e,(select pwd from wp_user)),1)<br>updatexml()报错注入，ref: <a href=\"https://blog.csdn.net/qq_37873738/article/details/88042610\">https://blog.csdn.net/qq_37873738/article/details/88042610</a></p>\n<h4 id=\"堆叠注入\"><a href=\"#堆叠注入\" class=\"headerlink\" title=\"堆叠注入\"></a>堆叠注入</h4><p>当目标开启多语句执行时，可以采用多语句执行的方式修改数据库结构和数据。</p>\n<h3 id=\"注入点\"><a href=\"#注入点\" class=\"headerlink\" title=\"注入点\"></a>注入点</h3><h4 id=\"注入点在select-expr\"><a href=\"#注入点在select-expr\" class=\"headerlink\" title=\"注入点在select_expr\"></a>注入点在select_expr</h4><p>AS别名：id=(select%20pwd%20from%20wp_user)%20as%20title</p>\n<h4 id=\"注入点在table-reference\"><a href=\"#注入点在table-reference\" class=\"headerlink\" title=\"注入点在table_reference\"></a>注入点在table_reference</h4><p>仍可以用别名取出数据：SELECT title FROM (SELECT pwd AS title FROM wp_user)x;</p>\n<p>在该两处的注入，如果注入点有反引号包裹，那么需要先闭合反引号。</p>\n<h4 id=\"注入点在WHERE或HAVING后\"><a href=\"#注入点在WHERE或HAVING后\" class=\"headerlink\" title=\"注入点在WHERE或HAVING后\"></a>注入点在WHERE或HAVING后</h4><p>代码：<code>$res = mysqli_query($conn, &quot;SELECT title FROM wp_news WHERE id = $&#123;_GET[id]&#125;&quot;);</code><br>现实中最常遇到的情况，要先判断有无引号包裹，再闭合前面可能存在的括号，即可进行注入来获取数据。</p>\n<p>注入点在HAVING后的情况与之类似。</p>\n<h4 id=\"注入点在GROUP-BY或ORDER-BY后\"><a href=\"#注入点在GROUP-BY或ORDER-BY后\" class=\"headerlink\" title=\"注入点在GROUP BY或ORDER BY后\"></a>注入点在GROUP BY或ORDER BY后</h4><p>当遇到不是WHERE后的注入点时，先在本地MySQL中进行尝试，看语句后面能加什么，从而判断当前可以注入的位置，进而进行有针对的注入。</p>\n<p>假设代码如下：<code>$res = mysqli_query($conn, &quot;SELECT title FROM wp_news GROUP BY $&#123;_GET[&#39;title&#39;]&#125;&quot;);</code><br>测试可得，title=id desc,(if(1,sleep(1),1))，可以利用时间注入获取数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">事实上只要对输入值进行白名单比对，基本就能防御这种注入。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注入点在LIMIT后\"><a href=\"#注入点在LIMIT后\" class=\"headerlink\" title=\"注入点在LIMIT后\"></a>注入点在LIMIT后</h4><p>该注入比较简单，通过更改数字大小，页面会显示更多或更少的记录数。由于语法限制，LIMIT后只能是数字，在整个SQL语句没有ORDER BY关键字的情况下，可以直接使用UNION注入。另外可以根据SELECT语法，通过加入PROCEDURE来尝试注入（只适用于MySQL 5.6前的版本）</p>\n<h3 id=\"INSERT注入\"><a href=\"#INSERT注入\" class=\"headerlink\" title=\"INSERT注入\"></a>INSERT注入</h3><p>通常注入位于字段名或字段值的地方，且没有回显信息。</p>\n<h4 id=\"注入点位于tbl-name\"><a href=\"#注入点位于tbl-name\" class=\"headerlink\" title=\"注入点位于tbl_name\"></a>注入点位于tbl_name</h4><p>如果能够通过注释符注释后续语句，则可直接插入特定数据到想要的表内，如管理员表。</p>\n<h4 id=\"注入点位于VALUES\"><a href=\"#注入点位于VALUES\" class=\"headerlink\" title=\"注入点位于VALUES\"></a>注入点位于VALUES</h4><h3 id=\"UPDATE注入\"><a href=\"#UPDATE注入\" class=\"headerlink\" title=\"UPDATE注入\"></a>UPDATE注入</h3><h3 id=\"DELETE注入\"><a href=\"#DELETE注入\" class=\"headerlink\" title=\"DELETE注入\"></a>DELETE注入</h3><p>对id参数进行注入时，如果使WHERE后的值变为true，数据就会被删除。为了保证正常数据不会被干扰，通常使用<code>and sleep (1)</code>保证WHERE后的结果返回为false，让语句无法成功执行，后续步骤参考时间盲注。</p>\n<h2 id=\"注入防御及绕过思路\"><a href=\"#注入防御及绕过思路\" class=\"headerlink\" title=\"注入防御及绕过思路\"></a>注入防御及绕过思路</h2><p>其它ref：<a href=\"https://blog.csdn.net/wy_97/article/details/78085664\">https://blog.csdn.net/wy_97/article/details/78085664</a></p>\n<h3 id=\"关键字替换或匹配拦截\"><a href=\"#关键字替换或匹配拦截\" class=\"headerlink\" title=\"关键字替换或匹配拦截\"></a>关键字替换或匹配拦截</h3><h4 id=\"过滤空格\"><a href=\"#过滤空格\" class=\"headerlink\" title=\"过滤空格\"></a>过滤空格</h4><p>替代空格的空白符有：<code>%0a, %0b, %0c, %0d, %09, %a0</code>（均为URL编码，%a0在特定字符集才能利用）和<code>/**/</code>组合、括号等。</p>\n<h4 id=\"将SELECT替换成空\"><a href=\"#将SELECT替换成空\" class=\"headerlink\" title=\"将SELECT替换成空\"></a>将SELECT替换成空</h4><p>可以采用嵌套的方式，如SESELECTLECT。</p>\n<h4 id=\"大小写匹配\"><a href=\"#大小写匹配\" class=\"headerlink\" title=\"大小写匹配\"></a>大小写匹配</h4><p>在MySQL中，关键字是不区分大小写的，如果只匹配了SELECT就可以通过大小写混写的方式绕过。</p>\n<h4 id=\"正则匹配\"><a href=\"#正则匹配\" class=\"headerlink\" title=\"正则匹配\"></a>正则匹配</h4><p>正则匹配关键字<code>\\bselect\\b</code>可以用形如<code>/*!50000select*/</code>的方式绕过。</p>\n<h4 id=\"替换了单引号或双引号，没有过滤反斜杠\"><a href=\"#替换了单引号或双引号，没有过滤反斜杠\" class=\"headerlink\" title=\"替换了单引号或双引号，没有过滤反斜杠\"></a>替换了单引号或双引号，没有过滤反斜杠</h4><p><code>id=&#39;a\\&#39; AND title = &#39;OR sleep(1)#&#39;</code><br>反斜杠转义了预置的单引号，实现绕过。</p>\n<h3 id=\"逃逸引号\"><a href=\"#逃逸引号\" class=\"headerlink\" title=\"逃逸引号\"></a>逃逸引号</h3><h4 id=\"编码解码\"><a href=\"#编码解码\" class=\"headerlink\" title=\"编码解码\"></a>编码解码</h4><p>当用户输入待转义函数时，如果数据处于编码状态则引号无法被转义。<br>同样的情况也发生在加密/解密、字符集转换的情况。</p>\n<ul>\n<li>宽字节注入</li>\n</ul>\n<h4 id=\"意料之外的输入点\"><a href=\"#意料之外的输入点\" class=\"headerlink\" title=\"意料之外的输入点\"></a>意料之外的输入点</h4><p>被遗漏的可控点，例如PHP中，上传的文件名、http header、$_SERVER[‘PHP_SELF’] 等变量。</p>\n<h4 id=\"二次注入\"><a href=\"#二次注入\" class=\"headerlink\" title=\"二次注入\"></a>二次注入</h4><p>由于开发者信任数据库中取出的数据是无害的，从而导致二次注入漏洞的出现。</p>\n<ul>\n<li> 用户名为<code>admin&#39;or&#39;1</code></li>\n</ul>\n<h4 id=\"字符串截断\"><a href=\"#字符串截断\" class=\"headerlink\" title=\"字符串截断\"></a>字符串截断</h4><p>在标题、抬头等位置，开发者可能限制其字符不能超过x个字符，超过就会被截断。<br>假如攻击者输入<code>aaaa&#39;</code>，自动转义为<code>aaaa\\&#39;</code>，由于长度限制被截取为<code>aaaa\\</code>，正好转义预置的单引号，实现注入。</p>\n<h3 id=\"注入应用\"><a href=\"#注入应用\" class=\"headerlink\" title=\"注入应用\"></a>注入应用</h3><ul>\n<li>在有写文件权限的情况下，直接用INTO OUTFILE或DUMPFILE向Web目录写文件，或写文件后结合文件包含漏洞实现代码执行。ref:<a href=\"https://baijiahao.baidu.com/s?id=1650711425682220792&amp;wfr=spider&amp;for=pc\">https://baijiahao.baidu.com/s?id=1650711425682220792&amp;wfr=spider&amp;for=pc</a></li>\n<li>在有读文件权限的情况下，用load_file()函数读取网站源码和配置信息，获取敏感数据。</li>\n<li>提升权限，绕过登录，添加用户，调整用户权限。</li>\n<li>通过数据，控制如缓存、模板等文件内容来获取权限，或者删除、读取某些关键文件。</li>\n<li>在可以执行多语句的情况下，控制整个数据库，包括控制任意数据、任意字段长度等。</li>\n<li>在SQL Server这类数据库中可以直接执行系统命令。</li>\n</ul>\n<h3 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>实际比赛中，应根据不同的SQL服务器类型查找相关资料，通过fuzz得出被过滤的字符、函数、关键词等，在文档中查找未过滤的替代，完成绕过。</p>\n<ul>\n<li>练习靶场：github-sqli-labs</li>\n</ul>\n<h2 id=\"任意文件读取漏洞\"><a href=\"#任意文件读取漏洞\" class=\"headerlink\" title=\"任意文件读取漏洞\"></a>任意文件读取漏洞</h2><h3 id=\"文件读取漏洞常见触发点\"><a href=\"#文件读取漏洞常见触发点\" class=\"headerlink\" title=\"文件读取漏洞常见触发点\"></a>文件读取漏洞常见触发点</h3><h4 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h4><p>有关文件读取的标准函数（审计中重点关注）。<br>包括但不限于：</p>\n<ul>\n<li><code>file_get_contents(),file(),fopen()</code>函数，(及其文件指针操作函数fread(),fgets()等);</li>\n<li>与文件包含相关的函数<code>include(),require(),include_once(),require_once()</code>等;</li>\n<li>通过PHP读文件的执行系统命令：<code>system(),exec()</code>等。<br>PHP扩展中读取文件的函数：</li>\n<li>php-curl扩展</li>\n<li>XML模块XXE</li>\n</ul>\n<p>相关源码阅读：Wrapper和Filter</p>\n<p>PHP文件包含的实际问题：<br>    1. 文件路径前面可控，后面不可控：在较低PHP及容器版本中可以使用<code>\\x00</code>截断，对应的URL编码是<code>%00</code>。当服务端存在文件上传功能时，也可以尝试利用zip或phar协议直接进行文件包含执行PHP代码。<br>    1. 文件路径后面可控，前面不可控：通过<code>../</code>进行目录穿越读取文件，但这种情况无法使用Wrapper，如果服务器是利用include等文件包含类的函数，将无法读取PHP文件中的PHP代码。<br>    1. 文件路径中间可控：和第一种相似，但无法利用Wrapper进行文件包含。</p>\n<h4 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h4><p>漏洞经常出现在框架请求静态资源文件部分，也就是最后读取文件内容的open函数。但直接导致漏洞的原因往往是Python函数的feature被忽略。</p>\n<p>除了Python框架，很多其它涉及文件操作的应用也可能因为滥用open函数、模板的不当渲染导致任意文件读取。</p>\n<h4 id=\"JAVA\"><a href=\"#JAVA\" class=\"headerlink\" title=\"JAVA\"></a>JAVA</h4><ul>\n<li>文件读取函数FileInputStream</li>\n<li>XXE</li>\n<li>JAVA模块所支持的<code>file://</code>协议</li>\n<li>Spring Cloud Config Server 路径穿越与任意文件读取漏洞 CVE-2019-3799, Jenkins 任意文件读取漏洞 CVE-2018-1999002</li>\n</ul>\n<h4 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h4><ul>\n<li>通常与Rails框架相关。</li>\n<li>Ruby on Rails 远程代码执行漏洞 CVE-2016-0752，Ruby on Rails 路径穿越与任意文件读取漏洞 CVE-2018-3760，Ruby on Rails 路径穿越与任意文件读取漏洞 CVE-2019-5418</li>\n</ul>\n<h4 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h4><ul>\n<li>通常为模板注入、代码注入等。</li>\n<li>Node.js express 模块任意文件读取漏洞 CVE-2017-14849</li>\n</ul>\n<h3 id=\"中间件-服务器相关\"><a href=\"#中间件-服务器相关\" class=\"headerlink\" title=\"中间件/服务器相关\"></a>中间件/服务器相关</h3><h4 id=\"Nginx错误配置\"><a href=\"#Nginx错误配置\" class=\"headerlink\" title=\"Nginx错误配置\"></a>Nginx错误配置</h4><p>常搭配Python-Web应用一起出现。</p>\n<ul>\n<li>/static../ -&gt; /home/myapp/static/../，产生目录穿越，穿越至myapp目录。原因：location最后没有加‘/’限制<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;static &#123;</span><br><span class=\"line\">  alias &#x2F;home&#x2F;myapp&#x2F;static&#x2F;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>MySQL：</p>\n<ul>\n<li>load_file(),利用条件严格，但仍然常出相关文件读取题目。</li>\n<li>load data infile，需要执行完整的SQL语句且需要FILE权限，比较少见，除了SSRF攻击MySQL以外，很少能够直接执行整条非基本SQL语句的机会。</li>\n</ul>\n<h4 id=\"软链接\"><a href=\"#软链接\" class=\"headerlink\" title=\"软链接\"></a>软链接</h4><p>又称符号链接，即soft link或symbolic link。相当于win下的快捷方式。</p>\n<p>硬链接与软链接的区别： <a href=\"https://www.jianshu.com/p/b035d94fa959\">https://www.jianshu.com/p/b035d94fa959</a></p>\n<p>bash命令<code>ln-s</code>可以创建一个指向指定文件的软链接文件，然后将该文件上传至服务器，访问该链接文件时，实际上是在请求服务端它指向的文件。</p>\n<h4 id=\"FFmpeg\"><a href=\"#FFmpeg\" class=\"headerlink\" title=\"FFmpeg\"></a>FFmpeg</h4><p>CISCN 2017 FFmpeg 任意文件读取漏洞</p>\n<h4 id=\"Doker-API\"><a href=\"#Doker-API\" class=\"headerlink\" title=\"Doker-API\"></a>Doker-API</h4><p>Docker-API可以控制Docker的行为，Docker-API通过UNIX Socket通信，也可以通过HTTP直接通信。当可以通过SSRF漏洞进行UNIX Socket通信时，就可以通过操纵Docker-API把本地文件载入Docker新容器进行读取（利用Docker的ADD、COPY操作）。</p>\n<h3 id=\"客户端相关\"><a href=\"#客户端相关\" class=\"headerlink\" title=\"客户端相关\"></a>客户端相关</h3><p>客户端文件读取漏洞，大多基于XSS读取本地文件。</p>\n<h4 id=\"浏览器-Flash-XSS\"><a href=\"#浏览器-Flash-XSS\" class=\"headerlink\" title=\"浏览器/Flash XSS\"></a>浏览器/Flash XSS</h4><p>js读取本地文件</p>\n<ul>\n<li>Safari浏览器 客户端本地文件读取漏洞</li>\n</ul>\n<h4 id=\"MarkDown语法解析器XSS\"><a href=\"#MarkDown语法解析器XSS\" class=\"headerlink\" title=\"MarkDown语法解析器XSS\"></a>MarkDown语法解析器XSS</h4><p>具有解析js的能力，且缺乏浏览器的读取本地文件限制。</p>\n<h2 id=\"文件读取漏洞常见读取路径\"><a href=\"#文件读取漏洞常见读取路径\" class=\"headerlink\" title=\"文件读取漏洞常见读取路径\"></a>文件读取漏洞常见读取路径</h2><h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><h4 id=\"flag名称（相对路径）\"><a href=\"#flag名称（相对路径）\" class=\"headerlink\" title=\"flag名称（相对路径）\"></a>flag名称（相对路径）</h4><p>fuzz方式获取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class=\"line\">flag(.txt|.php|.pyc|.py ...)</span><br><span class=\"line\">[dir_you_know]&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class=\"line\">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class=\"line\">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class=\"line\">..&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class=\"line\">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;root&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class=\"line\">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;home&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br><span class=\"line\">..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;home&#x2F;[user_you_know]&#x2F;flag(.txt|.php|.pyc|.py ...)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"服务器信息（绝对路径）\"><a href=\"#服务器信息（绝对路径）\" class=\"headerlink\" title=\"服务器信息（绝对路径）\"></a>服务器信息（绝对路径）</h4><p>CTF中常见的部分须知目录和文件</p>\n<ol>\n<li>/etc目录<br> 多是各种应用或系统配置文件，是进行文件读取的首要目标。</li>\n<li>/etc/passwd （详细解析：<a href=\"http://c.biancheng.net/view/839.html%EF%BC%89\">http://c.biancheng.net/view/839.html）</a><br> Linux系统保存用户信息及其工作目录的文件，所有用户/组可读，一般用作Linux系统下文件读取漏洞存在判断的基准。从该文件可得系统中存在哪些用户，及其所属组和工作目录。</li>\n<li>/etc/shadow （详细解析： <a href=\"http://c.biancheng.net/view/840.html%EF%BC%89\">http://c.biancheng.net/view/840.html）</a><br> 是Linux系统保存用户信息及（可能存在）密码（hash）的文件，权限是root用户可读写、shadow组可读。所以一般情况下该文件不可读。</li>\n<li>/etc/apache2/*<br> 是Apache的配置文件，可以获知Web目录、服务端口等信息。</li>\n<li>/etc/nginx/*<br> 是Nginx配置文件（Ubuntu等系统），可以获知Web目录、服务端口等信息。</li>\n<li>/etc/apparmor(.d)/*<br> 是Apparmor配置文件，可以获知各应用系统调用的白名单、黑名单。（如查看MySQL是否禁用系统调用，确定是否可以使用UDF执行系统命令）</li>\n<li>/etc/(cron.d/*|crontab)<br> 是定时任务文件。有些题会设置一些定时任务，读取这些配置文件就可以发现隐藏的目录或其它文件。</li>\n<li>/etc/environment<br> 是环境变量配置文件之一。环境变量可能存在大量目录信息的泄漏，甚至可能出现secret key泄漏的情况。</li>\n<li>/etc/hostname<br> 主机名</li>\n<li>/etc/hosts<br> 主机名查询静态表，包含知道域名解析IP的成对信息。通过该文件，可以探测网卡信息和内网IP/域名。</li>\n<li>/etc/issue<br> 指明系统版本。</li>\n<li>/etc/mysql/*<br> MySQL配置文件。</li>\n<li>/etc/php/*<br> PHP配置文件。</li>\n<li>/proc目录<br> 通常存储进程动态运行的各种信息，本质上是一种虚拟目录。<br> <em>如果查看非当前进程的信息，pid是可以暴力破解的，如果要查看当前进程，只需/proc/self/代替/proc/[pid]/即可。</em><br> 对应目录下的cmdline可读出比较敏感的信息。<code>/proc/[pid]/cmdline</code><br> 有时我们无法获取当前应用所在的目录，通过cwd命令可以直接跳转到当前目录。<code>/proc/[pid]/cwd/</code><br> 环境变量中可能存在secret_key，也可以通过environ读取。<code>/proc/[pid]/environ</code></li>\n<li>其它目录</li>\n</ol>\n"},{"title":"Notes for HowToHunt.md","toc":true,"date":"2021-04-08T16:05:57.000Z","_content":"\n## Account takeover\n\n1. Have a session hijacking -> Look for xss to stole the cookies n expand the impact\n1. The target has weak password policy -> Create a (very) weak password n brute force this account to show the POC\n1. Password reset poisoning:\n    * Go to password reset function -> Enter email n intercept\n    * Change host header to some other host i.e,\n          * Host:target.com\n           * Host:attacker.com\nalso try to add some headers without changing host like\n          * X-Forwarded-Host: evil.com\n           * Referrer: https ://evil.com\n    * Forward this if you found that in next request attacker.com means you successfully theft the token.:)\n1. Using CSRF:\n    * Change Password function\n    * Email change\n    * Change Security Question\n1. Use git recon or google recon to find sensitive data (depends on luck :))\n1. Token leaks in response:\n    * For registration:\n        * Intercept the signup request that contains data you have entered.\n        * Click on action -> do -> intercept response to this request.\n        * Click forward.\n        * Check response it that contains any link,any token or otp(one-time password).\n    * For password reset:\n        * Intercept the forget password option.\n        * Click on action -> do -> intercept response to this request.\n        * Click forward.\n        * Check response it that contains any link,any token or otp.\n\n## Application level DoS\n\n1. Email bounce issues:\n  ***ref: https://infosecwriteups.com/an-unexpected-bounty-email-bounce-issues-b9f24a35eb68***\n1. Long password DoS:\n    * Test in Forgot Password Page n Change Password, cuz the registration usually have length limit but others don't.\n    * Use a password around 150-200 words to check if there has length limit. Then choose a longer password n keep checking the response time, to see if the app crashes for few seconds.\n    * reason: The long password will cause a problem while hashing it for storing in dataset.\n1. Long string DoS:\n    * Create app and put field like username or address or even profile picture name parameter (second reference) like 1000 character of string .\n    * Search A's account from B's account either it will either keeping searching for long time or crash(500 Error code).\n      ***ref: https://shahjerry33.medium.com/long-string-dos-6ba8ceab3aa0***\n      ***https://hackerone.com/reports/764434***\n\n## Authentication bypass\n\n1. 2FA bypass\n    * Response Manipulation\n      * change the response value of (eg: login) success to 'true' from 'false'\n    * Status Code Manipulation\n      * change the status code from 4xx to 200 to see if if can bypass\n    * 2FA Code Leakage in Response\n      * check the response of the 2FA Code Triggering Request to see if the code is leaked\n    * JS File Analysis (rare)\n      * some JS files may contain info about the 2FA code\n    * 2FA Code Reusability\n      * same code can be reused\n    * Lack of Brute-Force Protection\n      * (possible)\n    * Missing 2FA Code Integrity Validation\n      * Code for any user acc can be used to bypass the 2FA\n    * CSRF on 2FA Disabling\n      * signup for two account -> Login into attacker account & capture the disable 2FA request -> generate CSRF POC with .HTML extension -> Login into victim account and fire the request — — -> It disable 2FA which leads to 2FA Bypass.\n    * Password Reset Disable 2FA\n      * 2FA gets disabled on password change/email change\n    * Backup Code Abuse\n      ***ref: https://medium.com/@surendirans7777/2fa-bypass-techniques-32ec135fb7fe***\n    * Clickjacking on 2FA Disabling Page\n      * misleading victim to disable the 2FA for the 2FA disabling page\n    * Enabling 2FA doesn't expire Previously active Sessions\n      * if the previous session is hijacked n app has session timeout vlun\n    * Bypass 2FA with null or 000000\n      * enter null or 000000 to bypass\n1. OTP bypass by repeating requests\n    * create an acc with a non-existing ph num\n    * intercept the request n send to repeater n forward\n    * change the non-existing num to attacker num, get the OTP n register that non-existing num\n      ***ref: https://medium.com/@AGNIHACKERS/otp-bypass-through-response-manipulation-beeb467359d8***\n1. OTP bypass via response manipulation\n    * change any status, false, error, 0, to true, success, 1. And see if it can bypass the OTP\n      ***ref: https://medium.com/@MAALP/authentication-bypass-using-response-manipulation-6c33eb1257ac***\n\n## Broken-link hijacking\n1. Broken-link hijacking\n    * manual check the external link\n    * broken-link-checker\n          * blc -rof --filter-level 3 https://example.com/\n    * register the broken link or try to get that username or url\n    * extra ways:\n          * https://ahrefs.com/broken-link-checker\n           * https://brokenlinkcheck.com/\n\n## Broken auth and session management\n1. Session based bugs\n    * Old session does not expire\n      * log in the account through two browser(eg. firefox n chrome)\n      * change pwd or reset pwd on one browser, then refresh the other browser to see if still logged in\n    * Session hijacking (intended behavior)\n      * login the acc\n      * copy all cookies n logout\n      * paste the cookies n refresh\n    *  Password reset link token not expire (insecure configurability)\n      * create acc, request a forget pwd link\n      * don't use it, instead, change the email to new one\n      * now use the forget pwd link to sent info to the old email n see if pwd is able to change\n    * Server security misconfiguration\n      * login, play around n logout, goback one page, see if acc is logged in or can view pages limits to the user\n\n## Bypassing CSP\n1. CSP (Content Security Policy) bypass\n  ***ref: https://kathan19.gitbook.io/howtohunt/bypassing-csp/csp_bypass***\n\n## CMS\n1. Wordpress\n    * Wordpress Detection\n      * Wappalyzer\n      * WhatRuns\n      * BuildWith\n    * General Scan Tool\n      * WpScan\n    * xmlrpc.php\n      * one of the common issue on wp, to get credit, u need to fully exploit n show the impact.\n      * detection:\n        * site.com/xmlrpc.php\n        * Get the error message about POST request only\n      * exploit\n        ***ref: https://nitesculucian.github.io/2019/07/01/exploiting-the-xmlrpc-php-on-all-wordpress-versions/***\n        ***https://the-bilal-rizwan.medium.com/wordpress-xmlrpc-php-common-vulnerabilites-how-to-exploit-them-d8d3c8600b32***\n        * Intercept the request and change the method GET to POST\n        * List all Methods\n    ```\n    <methodCall>\n    <methodName>system.listMethods</methodName>\n    <params></params>\n    </methodCall>\n    ```\n      * pingback.ping DDoS\n\n    ```\n    <methodCall>\n    <methodName>pingback.ping</methodName>\n    <params><param>\n    <value><string>http://<YOUR SERVER >:<port></string></value>\n    </param><param><value><string>http://<SOME VALID BLOG FROM THE SITE ></string>\n    </value></param></params>\n    </methodCall>\n    ```\n\n      * pingback.ping SSRF (internal PORT scan only)\n\n    ```\n    <methodCall>\n    <methodName>pingback.ping</methodName>\n    <params><param>\n    <value><string>http://<YOUR SERVER >:<port></string></value>\n    </param><param><value><string>http://<SOME VALID BLOG FROM THE SITE ></string>\n    </value></param></params>\n    </methodCall>\n    ```\n      * tools\n      xmlrpc-scan https://github.com/nullfil3/xmlrpc-scan\n\n    * CVE-2018-6389 (wp <= 4.9.3)\n      * detection\n        * https://gist.github.com/remonsec/4877e9ee2b045aae96be7e2653c41df9\n      * exploit\n        * use DDoS (Doser https://github.com/quitten/doser.py)\n\n        ```\npython3 doser.py -t 999 -g 'https://site.com/fullUrlFromLoadsxploit'\n        ```\n\n    * WP Cornjob DOS\n      * detection\n        * view site.com/wp-cron.php, You will see a Blank page with 200 HTTP status code\n      * exploit\n        * same tool as above (Doser)\n\n        ```\n        You will see a Blank page with 200 HTTP status code\n        ```\n        ***ref: https://medium.com/@thecpanelguy/the-nightmare-that-is-wpcron-php-ae31c1d3ae30***\n    * WP User Enumeration\n      * site.com/wp-json/wp/v2/users/\n      * mostly not acceptable, can be used to extend the impact tho\n\n## CORS\n1. CORS (***ref: https://www.packetlabs.net/cross-origin-resource-sharing-cors/***)\n  * misconfigured CORS\n    * hunting method 1 (single target)\n      * crawl the target website n search Access-Control using burp\n      * Try to add Origin Header i.e, Origin:attacker.com or Origin:null or Origin:attacker.target.com or Origin:target.attacker.com\n      * If origin is reflected in response means the target is vuln to CORS\n    * hunting method 2 (multiple means including subdomains)\n      * find alive subdomains (i.e, subfinder -d domain.com -o target.txt; grep alive: cat target.txt | httpx | tee -a alive.txt), send each subdomain into burp\n      * same as above method\n    * automated tools\n      * https://github.com/chenjj/CORScanner\n      * https://github.com/lc/theftfuzzer\n      * https://github.com/s0md3v/Corsy\n      * https://github.com/Shivangx01b/CorsMe\n2. CORS bypass\n  * Origin:null\n  * Origin:attacker.com\n  * Origin:attacker.target.com\n  * Origin:attackertarget.com\n  * Origin:sub.attackertarget.com\n  * Origin:attacker.com and then change the method Get to post/Post to Get\n  * Origin:sub.attacker target.com\n  * Origin:sub.attacker%target.com\n  * Origin:attacker.com/target.com\n  * https://twitter.com/trbughunters/status/1287023673845612546\n  * https://twitter.com/Paresh_parmar1/status/1265251507655630848\n  * https://www.corben.io/tricky-CORS/\n  * https://medium.com/@virus0x01/cors-misconfiguration-leading-to-private-information-disclosure-3034cfcb4b93\n\n## CSRF\n1. CSRF\n    * https://kathan19.gitbook.io/howtohunt/csrf/csrf\n1. CSRF bypass\n    * -Change Request Method [POST => GET]\n    * -Remove Total Token Parameter\n    * -Remove The Token, And Give a Blank Parameter\n    * -Copy a Unused Valid Token , By Dropping The Request and Use That Token\n    * -Use Own CSRF Token To Feed it to Victim\n    * -Replace Value With Of A Token of Same Length\n    * -Reverse Engineer The Token\n    * -Extract Token via HTML injection\n    * -Switch From Non-Form `Content-Type: application/json` or `Content-Type: application/x-url-encoded` To `Content-Type: form-multipart`\n    * -Change/delete the last or frist character from the token\n    * -Change referrer to Referrer\n    * -Bypass the regex\n      * If the site is looking for “bank.com” in the referer URL, maybe “bank.com.attacker.com” or “attacker.com/bank.com” will work.\n    * -Remove the referer header (add this <meta name=”referrer” content=”no-referrer”> in your payload or html code)\n    * -Clickjacking (https://owasp.org/www-community/attacks/Clickjacking)\n      * Exploiting clickjacking on the same endpoint bypasses all CSRF protection. Because technically, the request is indeed originating from the legitimate site. If the page where the vulnerable endpoint is located on is vulnerable to clickjacking, all CSRF protection will be rendered irrelevant and you will be able to achieve the same results as a CSRF   attack on the endpoint, albeit with a bit more effort.\n\n## Finding CVEs\n1. CVEs\n      1.Grab all the subdomains i.e, subfinder -d domain.com | tee -a domains.txt\n      2.Grap all alive domains i.e,  cat domains.txt | httpx -status-code | grep 200 | cut -d \" \" -f1 | tee -a alive.txt\n      3.Run nuclei basic-detection,panels,workflows,cves templates differently and store results in different file. i.e, cat alive.txt | nuclei -t nuclei-templates/workflows | tee -a workflows.\n      4.Read each output carefully with patience.\n      5.Find interest tech used by target. i.e, jira\n      6.put that link into browser check the version used by target.\n      7.Go on google search with jira version exploit.\n      8.grep the cves\n      9.Go to twitter in explore tab search CVE(that you found from google) poc or CVE exploit\n      10.Go to google and put cve or some details grab from   twitter for a better poc read writeups related to that.\n      11.Try all cves if success report it.:)\n\n## Check list\n1. Web application pentesting checklist\nhttps://kathan19.gitbook.io/howtohunt/checklist/web-application-pentesting-checklist\n1. Web checklist 2\nhttps://github.com/KathanP19/HowToHunt/blob/master/CheckList/Web_Checklist_by_Chintan_Gurjar.pdf\n1. Web checklist 3\nhttps://github.com/KathanP19/HowToHunt/blob/master/CheckList/mindmap.png\n\n## Source code review\n1. code review tips\n    * important functions first\n      When reading source code, focus on important functions such as authentication, password reset, state-changing actions and sensitive info reads. (What is the most important would depend on the application.) Then, review how these components interact with other functionality. Finally, audit other less sensitive parts of the application.\n    * follow user input\n      Another approach is to follow the code that processes user input. User input such as HTTP request parameters, HTTP headers, HTTP request paths, database entries, file reads, and file uploads provide the entry points for attackers to exploit the application’s vulnerabilities.This may also help us to find some critical vulnerabilities like xxe,xxs,sql injection\n    * hard-coded secrets n credentials\n      Hard-coded secrets such as API keys, encryption keys and database passwords can be easily discovered during a source code review. You can grep for keywords such as “key”, “secret”, “password”, “encrypt” or regex search for hex or base64 strings (depending on the key format in use).\n    * use of dangerous functions n outdated dependencies\n      Unchecked use of dangerous functions and outdated dependencies are a huge source of bugs. Grep for specific functions for the language you are using and search through the dependency versions list to see if they are outdated.\n    * developer comments, hidden debug functionalities, configuration files, and the .git directory\n      These are things that developers often forget about and they leave the application in a dangerous state. Developer comments can point out obvious programming mistakes, hidden debug functionalities often lead to privilege escalation, config files allow attackers to gather more information about your infrastructure and finally, an exposed .git directory allows attackers to reconstruct your source code.\n    * hidden paths, deprecated endpoints, and endpoints in development\n      These are endpoints that users might not encounter when using the application normally. But if they work and they are discovered by an attacker, it can lead to vulnerabilities such as authentication bypass and sensitive information leak, depending on the exposed endpoint.\n    * weak cryptography or hashing algorithms\n      This is an issue that is hard to find during a black-box test, but easy to spot when reviewing source code. Look for issues such as weak encryption keys, breakable encryption algorithms, and weak hashing algorithms. Grep for terms like ECB, MD4, and MD5.\n    * missing security checks on user input and regex strength\n      Reviewing source code is a great way to find out what kind of security checks are missing. Read through the application’s documentation and test all the edge cases that you can think of. A great resource for what kind of edge cases that you should consider is PayloadsAllTheThings.(github)\n    * missing cookie flags\n      Look out for missing cookie flags such as httpOnly and secure.\n    * unexpected behavior, conditionals, unnecessarily complex and verbose functions\n      Additionally, pay special attention to the application’s unexpected behavior, conditionals, and complex functions. These locations are where obscure bugs are often discovered.\n\n## EXIF geo data not stripped\n1. EXIF geo data not stripped (sensitive info leaked)\n    * tools\n      http://exif.regex.info/exif.cgi\n\n## File upload bypass\n1. File upload bypass\n    * bypassing normal extension\n        sth.php.jpg or sth.jpg.php\n    * bypassing the magic byte validation\n        polyglots\n\n## Find origin IP\n1. find origin\n    * https://kathan19.gitbook.io/howtohunt/find-origin-ip/findorigin\n\n## HTTP desync attack\n1. HTTP_Desync\n    * HTTP request smuggling\n        * how to do\n        ref: https://portswigger.net/web-security/request-smuggling/finding\n          https://portswigger.net/web-security/request-smuggling/exploiting\n          https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn\n          https://paper.seebug.org/1048/\n        * tools\n          https://github.com/defparam/smuggler\n          https://github.com/PortSwigger/http-request-smuggler\n        * testing lab\n          https://portswigger.net/web-security/request-smuggling\n\n## Host-header attack\n1. host-header\n    https://kathan19.gitbook.io/howtohunt/host-header-attack/host-header\n\n## HTML-injection\n1. HTML-injection\n    * Password reset links are usually addressed to your account name followed by the reset link. Also if the application allows you to have your account name with tags and special characters then you should try this.\n    * steps\n        * Create ur acc, edit the name to`<h1>attacker</h1>` or `\"abc><h1>attacker</h1>`\n        and save it.\n        * request a password reset n check the reset email.\n        * see if the `<h1>` tag executed.\n    * tips\n        * HTML injection are usually considered as low to medium severity bugs but you can escalate the severity by serving a malicious link by using `<a href>` for eg:\n        `<h1>attacker</h1><a href=\"your-controlled-domain\"Click here</a>`\n\n        * You can redirect the user to your malicious domain and serve a fake reset password page to steal credentials Also you can serve a previously found XSS page and steal user cookies etc.\n\n## IDOR\n1. IDOR\n    https://kathan19.gitbook.io/howtohunt/idor/idor\n\n## JWT attack\n1. JWT\n    https://kathan19.gitbook.io/howtohunt/jwt-attack/jwt_attack\n\n## MFA bypass\n1. MFA bypasses\n    https://kathan19.gitbook.io/howtohunt/mfa-bypass/mfa_bypasses\n2. 2FA bypass\n    https://kathan19.gitbook.io/howtohunt/mfa-bypass/2fa_bypass\n\n## Misconfigurations\n1. default credential n admin panel\n    * default credentials basics\n    default software configurations, ie.:\n\n    ```\nhttps://www.target.com/admin\nhttps://www.target.com/admin-console\nhttps://www.target.com/console\nhttps://admin.target.com\nhttps://admin-console.target.com\nhttps://console.target.com\n```\n\n    * get access from third party\n        * search the service default credentials if the admin is working on a third party\n    * bypass to get access to login page\n        * when visiting admin login page is denied, use header injection to bypass, eg, `X-Orginal-URL: /admin` or `X-Rewrite-URL:/admin`\n\n## OAuth\n1. OAuth\n    https://kathan19.gitbook.io/howtohunt/oauth/oauth\n\n## Open redirection\n1. find OpenRedirect trick\n    * steps\n        * create an acc, record the user profile link, logout n clean all the cookies.\n        * paste n visit the profile link, it may redirect u to the login like `https://samplesite.me/login?next=accounts/profile` or `https://samplesite.me/login?retUrl=accounts/profile`\n        * try to exploit the parameter by adding an external domain eg: `https://samplesite.me/login?next=https://evil.com/` or `https://samplesite.me/login?next=https://samplesite.me@evil.com/ #`or `https://targetweb.com?url=www.targetweb.com.attackersite.com (with created subdomain)` (to beat the bad regex filter)\n        * else, try the XSS eg: ` https://samplesite.me/login?next=javascript:alert(1);//`\n\n## Parameter pollution\n1. Parameter pollution in social sharing buttons\n    * find a social sharing button n get the sharing link.\n    * modified it from `https://taget.com/how-to-hunt ` to such as `https://taget.com/how-to-hunt?&u=https://attacker.com/vaya&text=another_site:https://attacker.com/vaya`\n    * click the share button n see if the attack website is in the sharing content\n## Password reset functionality\nMindmap https://kathan19.gitbook.io/howtohunt/password-reset-functionality/password_reset_functionality\n1. password reset token leakage\n      1. Sent a password reset request using forget password\n      2. Check your email\n      3. Copy your reset page link and paste in another tab and make burp intercept on.\n      4. Look for every request if you find similar token that is in reset link with other domain like: bat.bing.com or facebook.com\n      5. Then there is reset password token leakage.\n1. account takeover by password reset functionality\n      1. email= victim@gmail.com&email=attacker@gmil.com\n      2. email= victim@gmail.com%20email=attacker@gmil.com\n      3. email= victim@gmail.com |email=attacker@gmil.com\n      4. email= victim@gmail.com%0d%0acc:attacker@gmil.com\n      5. email= victim@gmail.com&code= my password reset token\n\n## Rate limit\n1. rate-limit bypass\n    * customizing HTTP methods\n        * change the GET request to POST, PUT, etc.\n        * bypassing rate-limit in API's try HEAD method\n        * using header to bypass the rate limit\n          (use the following just below the host header)\n\n          ```\nX-Forwarded-For: IP\nX-Forwarded-IP: IP\nX-Client-IP: IP\nX-Remote-IP: IP\nX-Originating-IP: IP\nX-Host: IP\nX-Client: IP\n\n#or use double X-Forwarded-For header\nX-Forwarded-For:\nX-Forwarded-For: IP\n```\n\n    * addding headers to spoof IP\n        * add HTTP headers to spoof IP n evade detection\n\n        ```\nX-Forwarded: 127.0.0.1\nX-Forwarded-By: 127.0.0.1\nX-Forwarded-For: 127.0.0.1\nX-Forwarded-For-Original: 127.0.0.1\nX-Forwarder-For: 127.0.0.1\nX-Forward-For: 127.0.0.1\nForwarded-For: 127.0.0.1\nForwarded-For-Ip: 127.0.0.1\nX-Custom-IP-Authorization: 127.0.0.1\nX-Originating-IP: 127.0.0.1\nX-Remote-IP: 127.0.0.1\nX-Remote-Addr: 127.0.0.1\n```\n\n        * bypass rate limit using special characters\n          * adding null byte (%00) at the end of the email\n          * try add a space after the email (not encoded)\n          * other characters can be tried to bypass rate limit `%0d , %2e , %09 , %20 , %0, %00, %0d%0a, %0a, %0C`\n          * add a slash (/) at the end of api endpoint\n            from`domain.com/v1/login` to `domain.com/v1/login/`\n          eg: https://hackerone.com/reports/1067533\n        * using IP rotate burp extension\n        other ref: https://kathan19.gitbook.io/howtohunt/rate-limit/ratelimitbypass\n\n## Recon\n1. recon workflow\nhttps://kathan19.gitbook.io/howtohunt/recon/workflow\n1. subdomain enumeration\nhttps://kathan19.gitbook.io/howtohunt/recon/subdomain_enumeration\n\n## SQLI\n1. SQL injection\n    * send request to burp scanner n proceed with active scan\n    * https://twitter.com/El3ctr0Byt3s/status/1302706241240731649\n    * for getting hidden parameters\n        1. Use subdomain enumeration tools on the domain.\n        2. Gather all urls using hakcrawler, waybackurls, gau for the domain and subdomains.\n        3. You can use the same method described above in 2nd point.\n        4. Use Arjun to scan for the hidden params in the urls.\n        5. Use --urls flag to include all urls.\n        6. Check the params as https://domain.com?`<hiddenparam>=<value>`\n        7. Send request to file and process it through sqlmap.\n    * https://kathan19.gitbook.io/howtohunt/sqli/sql_injection\n","source":"_posts/Notes_HowToHunt-md.md","raw":"---\ntitle: Notes for HowToHunt.md\ntoc: true\ndate: 2021-04-08 16:05:57\ncategories: [读书笔记]\ntag: 渗透测试\n---\n\n## Account takeover\n\n1. Have a session hijacking -> Look for xss to stole the cookies n expand the impact\n1. The target has weak password policy -> Create a (very) weak password n brute force this account to show the POC\n1. Password reset poisoning:\n    * Go to password reset function -> Enter email n intercept\n    * Change host header to some other host i.e,\n          * Host:target.com\n           * Host:attacker.com\nalso try to add some headers without changing host like\n          * X-Forwarded-Host: evil.com\n           * Referrer: https ://evil.com\n    * Forward this if you found that in next request attacker.com means you successfully theft the token.:)\n1. Using CSRF:\n    * Change Password function\n    * Email change\n    * Change Security Question\n1. Use git recon or google recon to find sensitive data (depends on luck :))\n1. Token leaks in response:\n    * For registration:\n        * Intercept the signup request that contains data you have entered.\n        * Click on action -> do -> intercept response to this request.\n        * Click forward.\n        * Check response it that contains any link,any token or otp(one-time password).\n    * For password reset:\n        * Intercept the forget password option.\n        * Click on action -> do -> intercept response to this request.\n        * Click forward.\n        * Check response it that contains any link,any token or otp.\n\n## Application level DoS\n\n1. Email bounce issues:\n  ***ref: https://infosecwriteups.com/an-unexpected-bounty-email-bounce-issues-b9f24a35eb68***\n1. Long password DoS:\n    * Test in Forgot Password Page n Change Password, cuz the registration usually have length limit but others don't.\n    * Use a password around 150-200 words to check if there has length limit. Then choose a longer password n keep checking the response time, to see if the app crashes for few seconds.\n    * reason: The long password will cause a problem while hashing it for storing in dataset.\n1. Long string DoS:\n    * Create app and put field like username or address or even profile picture name parameter (second reference) like 1000 character of string .\n    * Search A's account from B's account either it will either keeping searching for long time or crash(500 Error code).\n      ***ref: https://shahjerry33.medium.com/long-string-dos-6ba8ceab3aa0***\n      ***https://hackerone.com/reports/764434***\n\n## Authentication bypass\n\n1. 2FA bypass\n    * Response Manipulation\n      * change the response value of (eg: login) success to 'true' from 'false'\n    * Status Code Manipulation\n      * change the status code from 4xx to 200 to see if if can bypass\n    * 2FA Code Leakage in Response\n      * check the response of the 2FA Code Triggering Request to see if the code is leaked\n    * JS File Analysis (rare)\n      * some JS files may contain info about the 2FA code\n    * 2FA Code Reusability\n      * same code can be reused\n    * Lack of Brute-Force Protection\n      * (possible)\n    * Missing 2FA Code Integrity Validation\n      * Code for any user acc can be used to bypass the 2FA\n    * CSRF on 2FA Disabling\n      * signup for two account -> Login into attacker account & capture the disable 2FA request -> generate CSRF POC with .HTML extension -> Login into victim account and fire the request — — -> It disable 2FA which leads to 2FA Bypass.\n    * Password Reset Disable 2FA\n      * 2FA gets disabled on password change/email change\n    * Backup Code Abuse\n      ***ref: https://medium.com/@surendirans7777/2fa-bypass-techniques-32ec135fb7fe***\n    * Clickjacking on 2FA Disabling Page\n      * misleading victim to disable the 2FA for the 2FA disabling page\n    * Enabling 2FA doesn't expire Previously active Sessions\n      * if the previous session is hijacked n app has session timeout vlun\n    * Bypass 2FA with null or 000000\n      * enter null or 000000 to bypass\n1. OTP bypass by repeating requests\n    * create an acc with a non-existing ph num\n    * intercept the request n send to repeater n forward\n    * change the non-existing num to attacker num, get the OTP n register that non-existing num\n      ***ref: https://medium.com/@AGNIHACKERS/otp-bypass-through-response-manipulation-beeb467359d8***\n1. OTP bypass via response manipulation\n    * change any status, false, error, 0, to true, success, 1. And see if it can bypass the OTP\n      ***ref: https://medium.com/@MAALP/authentication-bypass-using-response-manipulation-6c33eb1257ac***\n\n## Broken-link hijacking\n1. Broken-link hijacking\n    * manual check the external link\n    * broken-link-checker\n          * blc -rof --filter-level 3 https://example.com/\n    * register the broken link or try to get that username or url\n    * extra ways:\n          * https://ahrefs.com/broken-link-checker\n           * https://brokenlinkcheck.com/\n\n## Broken auth and session management\n1. Session based bugs\n    * Old session does not expire\n      * log in the account through two browser(eg. firefox n chrome)\n      * change pwd or reset pwd on one browser, then refresh the other browser to see if still logged in\n    * Session hijacking (intended behavior)\n      * login the acc\n      * copy all cookies n logout\n      * paste the cookies n refresh\n    *  Password reset link token not expire (insecure configurability)\n      * create acc, request a forget pwd link\n      * don't use it, instead, change the email to new one\n      * now use the forget pwd link to sent info to the old email n see if pwd is able to change\n    * Server security misconfiguration\n      * login, play around n logout, goback one page, see if acc is logged in or can view pages limits to the user\n\n## Bypassing CSP\n1. CSP (Content Security Policy) bypass\n  ***ref: https://kathan19.gitbook.io/howtohunt/bypassing-csp/csp_bypass***\n\n## CMS\n1. Wordpress\n    * Wordpress Detection\n      * Wappalyzer\n      * WhatRuns\n      * BuildWith\n    * General Scan Tool\n      * WpScan\n    * xmlrpc.php\n      * one of the common issue on wp, to get credit, u need to fully exploit n show the impact.\n      * detection:\n        * site.com/xmlrpc.php\n        * Get the error message about POST request only\n      * exploit\n        ***ref: https://nitesculucian.github.io/2019/07/01/exploiting-the-xmlrpc-php-on-all-wordpress-versions/***\n        ***https://the-bilal-rizwan.medium.com/wordpress-xmlrpc-php-common-vulnerabilites-how-to-exploit-them-d8d3c8600b32***\n        * Intercept the request and change the method GET to POST\n        * List all Methods\n    ```\n    <methodCall>\n    <methodName>system.listMethods</methodName>\n    <params></params>\n    </methodCall>\n    ```\n      * pingback.ping DDoS\n\n    ```\n    <methodCall>\n    <methodName>pingback.ping</methodName>\n    <params><param>\n    <value><string>http://<YOUR SERVER >:<port></string></value>\n    </param><param><value><string>http://<SOME VALID BLOG FROM THE SITE ></string>\n    </value></param></params>\n    </methodCall>\n    ```\n\n      * pingback.ping SSRF (internal PORT scan only)\n\n    ```\n    <methodCall>\n    <methodName>pingback.ping</methodName>\n    <params><param>\n    <value><string>http://<YOUR SERVER >:<port></string></value>\n    </param><param><value><string>http://<SOME VALID BLOG FROM THE SITE ></string>\n    </value></param></params>\n    </methodCall>\n    ```\n      * tools\n      xmlrpc-scan https://github.com/nullfil3/xmlrpc-scan\n\n    * CVE-2018-6389 (wp <= 4.9.3)\n      * detection\n        * https://gist.github.com/remonsec/4877e9ee2b045aae96be7e2653c41df9\n      * exploit\n        * use DDoS (Doser https://github.com/quitten/doser.py)\n\n        ```\npython3 doser.py -t 999 -g 'https://site.com/fullUrlFromLoadsxploit'\n        ```\n\n    * WP Cornjob DOS\n      * detection\n        * view site.com/wp-cron.php, You will see a Blank page with 200 HTTP status code\n      * exploit\n        * same tool as above (Doser)\n\n        ```\n        You will see a Blank page with 200 HTTP status code\n        ```\n        ***ref: https://medium.com/@thecpanelguy/the-nightmare-that-is-wpcron-php-ae31c1d3ae30***\n    * WP User Enumeration\n      * site.com/wp-json/wp/v2/users/\n      * mostly not acceptable, can be used to extend the impact tho\n\n## CORS\n1. CORS (***ref: https://www.packetlabs.net/cross-origin-resource-sharing-cors/***)\n  * misconfigured CORS\n    * hunting method 1 (single target)\n      * crawl the target website n search Access-Control using burp\n      * Try to add Origin Header i.e, Origin:attacker.com or Origin:null or Origin:attacker.target.com or Origin:target.attacker.com\n      * If origin is reflected in response means the target is vuln to CORS\n    * hunting method 2 (multiple means including subdomains)\n      * find alive subdomains (i.e, subfinder -d domain.com -o target.txt; grep alive: cat target.txt | httpx | tee -a alive.txt), send each subdomain into burp\n      * same as above method\n    * automated tools\n      * https://github.com/chenjj/CORScanner\n      * https://github.com/lc/theftfuzzer\n      * https://github.com/s0md3v/Corsy\n      * https://github.com/Shivangx01b/CorsMe\n2. CORS bypass\n  * Origin:null\n  * Origin:attacker.com\n  * Origin:attacker.target.com\n  * Origin:attackertarget.com\n  * Origin:sub.attackertarget.com\n  * Origin:attacker.com and then change the method Get to post/Post to Get\n  * Origin:sub.attacker target.com\n  * Origin:sub.attacker%target.com\n  * Origin:attacker.com/target.com\n  * https://twitter.com/trbughunters/status/1287023673845612546\n  * https://twitter.com/Paresh_parmar1/status/1265251507655630848\n  * https://www.corben.io/tricky-CORS/\n  * https://medium.com/@virus0x01/cors-misconfiguration-leading-to-private-information-disclosure-3034cfcb4b93\n\n## CSRF\n1. CSRF\n    * https://kathan19.gitbook.io/howtohunt/csrf/csrf\n1. CSRF bypass\n    * -Change Request Method [POST => GET]\n    * -Remove Total Token Parameter\n    * -Remove The Token, And Give a Blank Parameter\n    * -Copy a Unused Valid Token , By Dropping The Request and Use That Token\n    * -Use Own CSRF Token To Feed it to Victim\n    * -Replace Value With Of A Token of Same Length\n    * -Reverse Engineer The Token\n    * -Extract Token via HTML injection\n    * -Switch From Non-Form `Content-Type: application/json` or `Content-Type: application/x-url-encoded` To `Content-Type: form-multipart`\n    * -Change/delete the last or frist character from the token\n    * -Change referrer to Referrer\n    * -Bypass the regex\n      * If the site is looking for “bank.com” in the referer URL, maybe “bank.com.attacker.com” or “attacker.com/bank.com” will work.\n    * -Remove the referer header (add this <meta name=”referrer” content=”no-referrer”> in your payload or html code)\n    * -Clickjacking (https://owasp.org/www-community/attacks/Clickjacking)\n      * Exploiting clickjacking on the same endpoint bypasses all CSRF protection. Because technically, the request is indeed originating from the legitimate site. If the page where the vulnerable endpoint is located on is vulnerable to clickjacking, all CSRF protection will be rendered irrelevant and you will be able to achieve the same results as a CSRF   attack on the endpoint, albeit with a bit more effort.\n\n## Finding CVEs\n1. CVEs\n      1.Grab all the subdomains i.e, subfinder -d domain.com | tee -a domains.txt\n      2.Grap all alive domains i.e,  cat domains.txt | httpx -status-code | grep 200 | cut -d \" \" -f1 | tee -a alive.txt\n      3.Run nuclei basic-detection,panels,workflows,cves templates differently and store results in different file. i.e, cat alive.txt | nuclei -t nuclei-templates/workflows | tee -a workflows.\n      4.Read each output carefully with patience.\n      5.Find interest tech used by target. i.e, jira\n      6.put that link into browser check the version used by target.\n      7.Go on google search with jira version exploit.\n      8.grep the cves\n      9.Go to twitter in explore tab search CVE(that you found from google) poc or CVE exploit\n      10.Go to google and put cve or some details grab from   twitter for a better poc read writeups related to that.\n      11.Try all cves if success report it.:)\n\n## Check list\n1. Web application pentesting checklist\nhttps://kathan19.gitbook.io/howtohunt/checklist/web-application-pentesting-checklist\n1. Web checklist 2\nhttps://github.com/KathanP19/HowToHunt/blob/master/CheckList/Web_Checklist_by_Chintan_Gurjar.pdf\n1. Web checklist 3\nhttps://github.com/KathanP19/HowToHunt/blob/master/CheckList/mindmap.png\n\n## Source code review\n1. code review tips\n    * important functions first\n      When reading source code, focus on important functions such as authentication, password reset, state-changing actions and sensitive info reads. (What is the most important would depend on the application.) Then, review how these components interact with other functionality. Finally, audit other less sensitive parts of the application.\n    * follow user input\n      Another approach is to follow the code that processes user input. User input such as HTTP request parameters, HTTP headers, HTTP request paths, database entries, file reads, and file uploads provide the entry points for attackers to exploit the application’s vulnerabilities.This may also help us to find some critical vulnerabilities like xxe,xxs,sql injection\n    * hard-coded secrets n credentials\n      Hard-coded secrets such as API keys, encryption keys and database passwords can be easily discovered during a source code review. You can grep for keywords such as “key”, “secret”, “password”, “encrypt” or regex search for hex or base64 strings (depending on the key format in use).\n    * use of dangerous functions n outdated dependencies\n      Unchecked use of dangerous functions and outdated dependencies are a huge source of bugs. Grep for specific functions for the language you are using and search through the dependency versions list to see if they are outdated.\n    * developer comments, hidden debug functionalities, configuration files, and the .git directory\n      These are things that developers often forget about and they leave the application in a dangerous state. Developer comments can point out obvious programming mistakes, hidden debug functionalities often lead to privilege escalation, config files allow attackers to gather more information about your infrastructure and finally, an exposed .git directory allows attackers to reconstruct your source code.\n    * hidden paths, deprecated endpoints, and endpoints in development\n      These are endpoints that users might not encounter when using the application normally. But if they work and they are discovered by an attacker, it can lead to vulnerabilities such as authentication bypass and sensitive information leak, depending on the exposed endpoint.\n    * weak cryptography or hashing algorithms\n      This is an issue that is hard to find during a black-box test, but easy to spot when reviewing source code. Look for issues such as weak encryption keys, breakable encryption algorithms, and weak hashing algorithms. Grep for terms like ECB, MD4, and MD5.\n    * missing security checks on user input and regex strength\n      Reviewing source code is a great way to find out what kind of security checks are missing. Read through the application’s documentation and test all the edge cases that you can think of. A great resource for what kind of edge cases that you should consider is PayloadsAllTheThings.(github)\n    * missing cookie flags\n      Look out for missing cookie flags such as httpOnly and secure.\n    * unexpected behavior, conditionals, unnecessarily complex and verbose functions\n      Additionally, pay special attention to the application’s unexpected behavior, conditionals, and complex functions. These locations are where obscure bugs are often discovered.\n\n## EXIF geo data not stripped\n1. EXIF geo data not stripped (sensitive info leaked)\n    * tools\n      http://exif.regex.info/exif.cgi\n\n## File upload bypass\n1. File upload bypass\n    * bypassing normal extension\n        sth.php.jpg or sth.jpg.php\n    * bypassing the magic byte validation\n        polyglots\n\n## Find origin IP\n1. find origin\n    * https://kathan19.gitbook.io/howtohunt/find-origin-ip/findorigin\n\n## HTTP desync attack\n1. HTTP_Desync\n    * HTTP request smuggling\n        * how to do\n        ref: https://portswigger.net/web-security/request-smuggling/finding\n          https://portswigger.net/web-security/request-smuggling/exploiting\n          https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn\n          https://paper.seebug.org/1048/\n        * tools\n          https://github.com/defparam/smuggler\n          https://github.com/PortSwigger/http-request-smuggler\n        * testing lab\n          https://portswigger.net/web-security/request-smuggling\n\n## Host-header attack\n1. host-header\n    https://kathan19.gitbook.io/howtohunt/host-header-attack/host-header\n\n## HTML-injection\n1. HTML-injection\n    * Password reset links are usually addressed to your account name followed by the reset link. Also if the application allows you to have your account name with tags and special characters then you should try this.\n    * steps\n        * Create ur acc, edit the name to`<h1>attacker</h1>` or `\"abc><h1>attacker</h1>`\n        and save it.\n        * request a password reset n check the reset email.\n        * see if the `<h1>` tag executed.\n    * tips\n        * HTML injection are usually considered as low to medium severity bugs but you can escalate the severity by serving a malicious link by using `<a href>` for eg:\n        `<h1>attacker</h1><a href=\"your-controlled-domain\"Click here</a>`\n\n        * You can redirect the user to your malicious domain and serve a fake reset password page to steal credentials Also you can serve a previously found XSS page and steal user cookies etc.\n\n## IDOR\n1. IDOR\n    https://kathan19.gitbook.io/howtohunt/idor/idor\n\n## JWT attack\n1. JWT\n    https://kathan19.gitbook.io/howtohunt/jwt-attack/jwt_attack\n\n## MFA bypass\n1. MFA bypasses\n    https://kathan19.gitbook.io/howtohunt/mfa-bypass/mfa_bypasses\n2. 2FA bypass\n    https://kathan19.gitbook.io/howtohunt/mfa-bypass/2fa_bypass\n\n## Misconfigurations\n1. default credential n admin panel\n    * default credentials basics\n    default software configurations, ie.:\n\n    ```\nhttps://www.target.com/admin\nhttps://www.target.com/admin-console\nhttps://www.target.com/console\nhttps://admin.target.com\nhttps://admin-console.target.com\nhttps://console.target.com\n```\n\n    * get access from third party\n        * search the service default credentials if the admin is working on a third party\n    * bypass to get access to login page\n        * when visiting admin login page is denied, use header injection to bypass, eg, `X-Orginal-URL: /admin` or `X-Rewrite-URL:/admin`\n\n## OAuth\n1. OAuth\n    https://kathan19.gitbook.io/howtohunt/oauth/oauth\n\n## Open redirection\n1. find OpenRedirect trick\n    * steps\n        * create an acc, record the user profile link, logout n clean all the cookies.\n        * paste n visit the profile link, it may redirect u to the login like `https://samplesite.me/login?next=accounts/profile` or `https://samplesite.me/login?retUrl=accounts/profile`\n        * try to exploit the parameter by adding an external domain eg: `https://samplesite.me/login?next=https://evil.com/` or `https://samplesite.me/login?next=https://samplesite.me@evil.com/ #`or `https://targetweb.com?url=www.targetweb.com.attackersite.com (with created subdomain)` (to beat the bad regex filter)\n        * else, try the XSS eg: ` https://samplesite.me/login?next=javascript:alert(1);//`\n\n## Parameter pollution\n1. Parameter pollution in social sharing buttons\n    * find a social sharing button n get the sharing link.\n    * modified it from `https://taget.com/how-to-hunt ` to such as `https://taget.com/how-to-hunt?&u=https://attacker.com/vaya&text=another_site:https://attacker.com/vaya`\n    * click the share button n see if the attack website is in the sharing content\n## Password reset functionality\nMindmap https://kathan19.gitbook.io/howtohunt/password-reset-functionality/password_reset_functionality\n1. password reset token leakage\n      1. Sent a password reset request using forget password\n      2. Check your email\n      3. Copy your reset page link and paste in another tab and make burp intercept on.\n      4. Look for every request if you find similar token that is in reset link with other domain like: bat.bing.com or facebook.com\n      5. Then there is reset password token leakage.\n1. account takeover by password reset functionality\n      1. email= victim@gmail.com&email=attacker@gmil.com\n      2. email= victim@gmail.com%20email=attacker@gmil.com\n      3. email= victim@gmail.com |email=attacker@gmil.com\n      4. email= victim@gmail.com%0d%0acc:attacker@gmil.com\n      5. email= victim@gmail.com&code= my password reset token\n\n## Rate limit\n1. rate-limit bypass\n    * customizing HTTP methods\n        * change the GET request to POST, PUT, etc.\n        * bypassing rate-limit in API's try HEAD method\n        * using header to bypass the rate limit\n          (use the following just below the host header)\n\n          ```\nX-Forwarded-For: IP\nX-Forwarded-IP: IP\nX-Client-IP: IP\nX-Remote-IP: IP\nX-Originating-IP: IP\nX-Host: IP\nX-Client: IP\n\n#or use double X-Forwarded-For header\nX-Forwarded-For:\nX-Forwarded-For: IP\n```\n\n    * addding headers to spoof IP\n        * add HTTP headers to spoof IP n evade detection\n\n        ```\nX-Forwarded: 127.0.0.1\nX-Forwarded-By: 127.0.0.1\nX-Forwarded-For: 127.0.0.1\nX-Forwarded-For-Original: 127.0.0.1\nX-Forwarder-For: 127.0.0.1\nX-Forward-For: 127.0.0.1\nForwarded-For: 127.0.0.1\nForwarded-For-Ip: 127.0.0.1\nX-Custom-IP-Authorization: 127.0.0.1\nX-Originating-IP: 127.0.0.1\nX-Remote-IP: 127.0.0.1\nX-Remote-Addr: 127.0.0.1\n```\n\n        * bypass rate limit using special characters\n          * adding null byte (%00) at the end of the email\n          * try add a space after the email (not encoded)\n          * other characters can be tried to bypass rate limit `%0d , %2e , %09 , %20 , %0, %00, %0d%0a, %0a, %0C`\n          * add a slash (/) at the end of api endpoint\n            from`domain.com/v1/login` to `domain.com/v1/login/`\n          eg: https://hackerone.com/reports/1067533\n        * using IP rotate burp extension\n        other ref: https://kathan19.gitbook.io/howtohunt/rate-limit/ratelimitbypass\n\n## Recon\n1. recon workflow\nhttps://kathan19.gitbook.io/howtohunt/recon/workflow\n1. subdomain enumeration\nhttps://kathan19.gitbook.io/howtohunt/recon/subdomain_enumeration\n\n## SQLI\n1. SQL injection\n    * send request to burp scanner n proceed with active scan\n    * https://twitter.com/El3ctr0Byt3s/status/1302706241240731649\n    * for getting hidden parameters\n        1. Use subdomain enumeration tools on the domain.\n        2. Gather all urls using hakcrawler, waybackurls, gau for the domain and subdomains.\n        3. You can use the same method described above in 2nd point.\n        4. Use Arjun to scan for the hidden params in the urls.\n        5. Use --urls flag to include all urls.\n        6. Check the params as https://domain.com?`<hiddenparam>=<value>`\n        7. Send request to file and process it through sqlmap.\n    * https://kathan19.gitbook.io/howtohunt/sqli/sql_injection\n","slug":"Notes_HowToHunt-md","published":1,"updated":"2023-02-20T06:35:47.029Z","_id":"clecfhg0n0014x9406gadhqyi","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Account-takeover\"><a href=\"#Account-takeover\" class=\"headerlink\" title=\"Account takeover\"></a>Account takeover</h2><ol>\n<li>Have a session hijacking -&gt; Look for xss to stole the cookies n expand the impact</li>\n<li>The target has weak password policy -&gt; Create a (very) weak password n brute force this account to show the POC</li>\n<li>Password reset poisoning:<ul>\n<li>Go to password reset function -&gt; Enter email n intercept</li>\n<li>Change host header to some other host i.e,<pre><code>* Host:target.com\n * Host:attacker.com\n</code></pre>\nalso try to add some headers without changing host like<pre><code>* X-Forwarded-Host: evil.com\n * Referrer: https ://evil.com\n</code></pre>\n</li>\n<li>Forward this if you found that in next request attacker.com means you successfully theft the token.:)</li>\n</ul>\n</li>\n<li>Using CSRF:<ul>\n<li>Change Password function</li>\n<li>Email change</li>\n<li>Change Security Question</li>\n</ul>\n</li>\n<li>Use git recon or google recon to find sensitive data (depends on luck :))</li>\n<li>Token leaks in response:<ul>\n<li>For registration:<ul>\n<li>Intercept the signup request that contains data you have entered.</li>\n<li>Click on action -&gt; do -&gt; intercept response to this request.</li>\n<li>Click forward.</li>\n<li>Check response it that contains any link,any token or otp(one-time password).</li>\n</ul>\n</li>\n<li>For password reset:<ul>\n<li>Intercept the forget password option.</li>\n<li>Click on action -&gt; do -&gt; intercept response to this request.</li>\n<li>Click forward.</li>\n<li>Check response it that contains any link,any token or otp.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Application-level-DoS\"><a href=\"#Application-level-DoS\" class=\"headerlink\" title=\"Application level DoS\"></a>Application level DoS</h2><ol>\n<li>Email bounce issues:</li>\n</ol>\n<p>  <em><strong>ref: <a href=\"https://infosecwriteups.com/an-unexpected-bounty-email-bounce-issues-b9f24a35eb68\">https://infosecwriteups.com/an-unexpected-bounty-email-bounce-issues-b9f24a35eb68</a></strong></em></p>\n<ol>\n<li>Long password DoS:<ul>\n<li>Test in Forgot Password Page n Change Password, cuz the registration usually have length limit but others don’t.</li>\n<li>Use a password around 150-200 words to check if there has length limit. Then choose a longer password n keep checking the response time, to see if the app crashes for few seconds.</li>\n<li>reason: The long password will cause a problem while hashing it for storing in dataset.</li>\n</ul>\n</li>\n<li>Long string DoS:<ul>\n<li>Create app and put field like username or address or even profile picture name parameter (second reference) like 1000 character of string .</li>\n<li>Search A’s account from B’s account either it will either keeping searching for long time or crash(500 Error code).<br><em><strong>ref: <a href=\"https://shahjerry33.medium.com/long-string-dos-6ba8ceab3aa0\">https://shahjerry33.medium.com/long-string-dos-6ba8ceab3aa0</a></strong></em><br><em><strong><a href=\"https://hackerone.com/reports/764434\">https://hackerone.com/reports/764434</a></strong></em></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Authentication-bypass\"><a href=\"#Authentication-bypass\" class=\"headerlink\" title=\"Authentication bypass\"></a>Authentication bypass</h2><ol>\n<li>2FA bypass<ul>\n<li>Response Manipulation<ul>\n<li>change the response value of (eg: login) success to ‘true’ from ‘false’</li>\n</ul>\n</li>\n<li>Status Code Manipulation<ul>\n<li>change the status code from 4xx to 200 to see if if can bypass</li>\n</ul>\n</li>\n<li>2FA Code Leakage in Response<ul>\n<li>check the response of the 2FA Code Triggering Request to see if the code is leaked</li>\n</ul>\n</li>\n<li>JS File Analysis (rare)<ul>\n<li>some JS files may contain info about the 2FA code</li>\n</ul>\n</li>\n<li>2FA Code Reusability<ul>\n<li>same code can be reused</li>\n</ul>\n</li>\n<li>Lack of Brute-Force Protection<ul>\n<li>(possible)</li>\n</ul>\n</li>\n<li>Missing 2FA Code Integrity Validation<ul>\n<li>Code for any user acc can be used to bypass the 2FA</li>\n</ul>\n</li>\n<li>CSRF on 2FA Disabling<ul>\n<li>signup for two account -&gt; Login into attacker account &amp; capture the disable 2FA request -&gt; generate CSRF POC with .HTML extension -&gt; Login into victim account and fire the request — — -&gt; It disable 2FA which leads to 2FA Bypass.</li>\n</ul>\n</li>\n<li>Password Reset Disable 2FA<ul>\n<li>2FA gets disabled on password change/email change</li>\n</ul>\n</li>\n<li>Backup Code Abuse<br><em><strong>ref: <a href=\"https://medium.com/@surendirans7777/2fa-bypass-techniques-32ec135fb7fe\">https://medium.com/@surendirans7777/2fa-bypass-techniques-32ec135fb7fe</a></strong></em></li>\n<li>Clickjacking on 2FA Disabling Page<ul>\n<li>misleading victim to disable the 2FA for the 2FA disabling page</li>\n</ul>\n</li>\n<li>Enabling 2FA doesn’t expire Previously active Sessions<ul>\n<li>if the previous session is hijacked n app has session timeout vlun</li>\n</ul>\n</li>\n<li>Bypass 2FA with null or 000000<ul>\n<li>enter null or 000000 to bypass</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>OTP bypass by repeating requests<ul>\n<li>create an acc with a non-existing ph num</li>\n<li>intercept the request n send to repeater n forward</li>\n<li>change the non-existing num to attacker num, get the OTP n register that non-existing num<br><em><strong>ref: <a href=\"https://medium.com/@AGNIHACKERS/otp-bypass-through-response-manipulation-beeb467359d8\">https://medium.com/@AGNIHACKERS/otp-bypass-through-response-manipulation-beeb467359d8</a></strong></em></li>\n</ul>\n</li>\n<li>OTP bypass via response manipulation<ul>\n<li>change any status, false, error, 0, to true, success, 1. And see if it can bypass the OTP<br><em><strong>ref: <a href=\"https://medium.com/@MAALP/authentication-bypass-using-response-manipulation-6c33eb1257ac\">https://medium.com/@MAALP/authentication-bypass-using-response-manipulation-6c33eb1257ac</a></strong></em></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Broken-link-hijacking\"><a href=\"#Broken-link-hijacking\" class=\"headerlink\" title=\"Broken-link hijacking\"></a>Broken-link hijacking</h2><ol>\n<li>Broken-link hijacking<ul>\n<li>manual check the external link</li>\n<li>broken-link-checker<pre><code>* blc -rof --filter-level 3 https://example.com/\n</code></pre>\n</li>\n<li>register the broken link or try to get that username or url</li>\n<li>extra ways:<pre><code>* https://ahrefs.com/broken-link-checker\n * https://brokenlinkcheck.com/\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Broken-auth-and-session-management\"><a href=\"#Broken-auth-and-session-management\" class=\"headerlink\" title=\"Broken auth and session management\"></a>Broken auth and session management</h2><ol>\n<li>Session based bugs<ul>\n<li>Old session does not expire<ul>\n<li>log in the account through two browser(eg. firefox n chrome)</li>\n<li>change pwd or reset pwd on one browser, then refresh the other browser to see if still logged in</li>\n</ul>\n</li>\n<li>Session hijacking (intended behavior)<ul>\n<li>login the acc</li>\n<li>copy all cookies n logout</li>\n<li>paste the cookies n refresh</li>\n</ul>\n</li>\n<li> Password reset link token not expire (insecure configurability)</li>\n<li>create acc, request a forget pwd link</li>\n<li>don’t use it, instead, change the email to new one</li>\n<li>now use the forget pwd link to sent info to the old email n see if pwd is able to change</li>\n<li>Server security misconfiguration<ul>\n<li>login, play around n logout, goback one page, see if acc is logged in or can view pages limits to the user</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Bypassing-CSP\"><a href=\"#Bypassing-CSP\" class=\"headerlink\" title=\"Bypassing CSP\"></a>Bypassing CSP</h2><ol>\n<li>CSP (Content Security Policy) bypass</li>\n</ol>\n<p>  <em><strong>ref: <a href=\"https://kathan19.gitbook.io/howtohunt/bypassing-csp/csp_bypass\">https://kathan19.gitbook.io/howtohunt/bypassing-csp/csp_bypass</a></strong></em></p>\n<h2 id=\"CMS\"><a href=\"#CMS\" class=\"headerlink\" title=\"CMS\"></a>CMS</h2><ol>\n<li><p>Wordpress</p>\n<ul>\n<li>Wordpress Detection<ul>\n<li>Wappalyzer</li>\n<li>WhatRuns</li>\n<li>BuildWith</li>\n</ul>\n</li>\n<li>General Scan Tool<ul>\n<li>WpScan</li>\n</ul>\n</li>\n<li>xmlrpc.php<ul>\n<li>one of the common issue on wp, to get credit, u need to fully exploit n show the impact.</li>\n<li>detection:<ul>\n<li>site.com/xmlrpc.php</li>\n<li>Get the error message about POST request only</li>\n</ul>\n</li>\n<li>exploit<br><em><strong>ref: <a href=\"https://nitesculucian.github.io/2019/07/01/exploiting-the-xmlrpc-php-on-all-wordpress-versions/\">https://nitesculucian.github.io/2019/07/01/exploiting-the-xmlrpc-php-on-all-wordpress-versions/</a></strong></em><br><em><strong><a href=\"https://the-bilal-rizwan.medium.com/wordpress-xmlrpc-php-common-vulnerabilites-how-to-exploit-them-d8d3c8600b32\">https://the-bilal-rizwan.medium.com/wordpress-xmlrpc-php-common-vulnerabilites-how-to-exploit-them-d8d3c8600b32</a></strong></em><ul>\n<li>Intercept the request and change the method GET to POST</li>\n<li>List all Methods<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;methodCall&gt;</span><br><span class=\"line\">&lt;methodName&gt;system.listMethods&lt;&#x2F;methodName&gt;</span><br><span class=\"line\">&lt;params&gt;&lt;&#x2F;params&gt;</span><br><span class=\"line\">&lt;&#x2F;methodCall&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>pingback.ping DDoS</li>\n</ul>\n</li>\n</ul>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;methodCall&gt;</span><br><span class=\"line\">&lt;methodName&gt;pingback.ping&lt;&#x2F;methodName&gt;</span><br><span class=\"line\">&lt;params&gt;&lt;param&gt;</span><br><span class=\"line\">&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;YOUR SERVER &gt;:&lt;port&gt;&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;</span><br><span class=\"line\">&lt;&#x2F;param&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;SOME VALID BLOG FROM THE SITE &gt;&lt;&#x2F;string&gt;</span><br><span class=\"line\">&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;&#x2F;params&gt;</span><br><span class=\"line\">&lt;&#x2F;methodCall&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pingback.ping SSRF (internal PORT scan only)</li>\n</ul>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;methodCall&gt;</span><br><span class=\"line\">&lt;methodName&gt;pingback.ping&lt;&#x2F;methodName&gt;</span><br><span class=\"line\">&lt;params&gt;&lt;param&gt;</span><br><span class=\"line\">&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;YOUR SERVER &gt;:&lt;port&gt;&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;</span><br><span class=\"line\">&lt;&#x2F;param&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;SOME VALID BLOG FROM THE SITE &gt;&lt;&#x2F;string&gt;</span><br><span class=\"line\">&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;&#x2F;params&gt;</span><br><span class=\"line\">&lt;&#x2F;methodCall&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>tools<br>xmlrpc-scan <a href=\"https://github.com/nullfil3/xmlrpc-scan\">https://github.com/nullfil3/xmlrpc-scan</a></p>\n</li>\n<li><p>CVE-2018-6389 (wp &lt;= 4.9.3)</p>\n<ul>\n<li><p>detection</p>\n<ul>\n<li><a href=\"https://gist.github.com/remonsec/4877e9ee2b045aae96be7e2653c41df9\">https://gist.github.com/remonsec/4877e9ee2b045aae96be7e2653c41df9</a></li>\n</ul>\n</li>\n<li><p>exploit</p>\n<ul>\n<li>use DDoS (Doser <a href=\"https://github.com/quitten/doser.py\">https://github.com/quitten/doser.py</a>)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 doser.py -t 999 -g &#39;https:&#x2F;&#x2F;site.com&#x2F;fullUrlFromLoadsxploit&#39;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>WP Cornjob DOS</p>\n<ul>\n<li><p>detection</p>\n<ul>\n<li>view site.com/wp-cron.php, You will see a Blank page with 200 HTTP status code</li>\n</ul>\n</li>\n<li><p>exploit</p>\n<ul>\n<li>same tool as above (Doser)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You will see a Blank page with 200 HTTP status code</span><br></pre></td></tr></table></figure>\n<p><em><strong>ref: <a href=\"https://medium.com/@thecpanelguy/the-nightmare-that-is-wpcron-php-ae31c1d3ae30\">https://medium.com/@thecpanelguy/the-nightmare-that-is-wpcron-php-ae31c1d3ae30</a></strong></em></p>\n</li>\n</ul>\n</li>\n<li><p>WP User Enumeration</p>\n<ul>\n<li>site.com/wp-json/wp/v2/users/</li>\n<li>mostly not acceptable, can be used to extend the impact tho</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h2><ol>\n<li>CORS (<em><strong>ref: <a href=\"https://www.packetlabs.net/cross-origin-resource-sharing-cors/\">https://www.packetlabs.net/cross-origin-resource-sharing-cors/</a></strong></em>)</li>\n</ol>\n<ul>\n<li>misconfigured CORS<ul>\n<li>hunting method 1 (single target)<ul>\n<li>crawl the target website n search Access-Control using burp</li>\n<li>Try to add Origin Header i.e, Origin:attacker.com or Origin:null or Origin:attacker.target.com or Origin:target.attacker.com</li>\n<li>If origin is reflected in response means the target is vuln to CORS</li>\n</ul>\n</li>\n<li>hunting method 2 (multiple means including subdomains)<ul>\n<li>find alive subdomains (i.e, subfinder -d domain.com -o target.txt; grep alive: cat target.txt | httpx | tee -a alive.txt), send each subdomain into burp</li>\n<li>same as above method</li>\n</ul>\n</li>\n<li>automated tools<ul>\n<li><a href=\"https://github.com/chenjj/CORScanner\">https://github.com/chenjj/CORScanner</a></li>\n<li><a href=\"https://github.com/lc/theftfuzzer\">https://github.com/lc/theftfuzzer</a></li>\n<li><a href=\"https://github.com/s0md3v/Corsy\">https://github.com/s0md3v/Corsy</a></li>\n<li><a href=\"https://github.com/Shivangx01b/CorsMe\">https://github.com/Shivangx01b/CorsMe</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>CORS bypass</li>\n</ol>\n<ul>\n<li>Origin:null</li>\n<li>Origin:attacker.com</li>\n<li>Origin:attacker.target.com</li>\n<li>Origin:attackertarget.com</li>\n<li>Origin:sub.attackertarget.com</li>\n<li>Origin:attacker.com and then change the method Get to post/Post to Get</li>\n<li>Origin:sub.attacker target.com</li>\n<li>Origin:sub.attacker%target.com</li>\n<li>Origin:attacker.com/target.com</li>\n<li><a href=\"https://twitter.com/trbughunters/status/1287023673845612546\">https://twitter.com/trbughunters/status/1287023673845612546</a></li>\n<li><a href=\"https://twitter.com/Paresh_parmar1/status/1265251507655630848\">https://twitter.com/Paresh_parmar1/status/1265251507655630848</a></li>\n<li><a href=\"https://www.corben.io/tricky-CORS/\">https://www.corben.io/tricky-CORS/</a></li>\n<li><a href=\"https://medium.com/@virus0x01/cors-misconfiguration-leading-to-private-information-disclosure-3034cfcb4b93\">https://medium.com/@virus0x01/cors-misconfiguration-leading-to-private-information-disclosure-3034cfcb4b93</a></li>\n</ul>\n<h2 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h2><ol>\n<li>CSRF<ul>\n<li><a href=\"https://kathan19.gitbook.io/howtohunt/csrf/csrf\">https://kathan19.gitbook.io/howtohunt/csrf/csrf</a></li>\n</ul>\n</li>\n<li>CSRF bypass<ul>\n<li>-Change Request Method [POST =&gt; GET]</li>\n<li>-Remove Total Token Parameter</li>\n<li>-Remove The Token, And Give a Blank Parameter</li>\n<li>-Copy a Unused Valid Token , By Dropping The Request and Use That Token</li>\n<li>-Use Own CSRF Token To Feed it to Victim</li>\n<li>-Replace Value With Of A Token of Same Length</li>\n<li>-Reverse Engineer The Token</li>\n<li>-Extract Token via HTML injection</li>\n<li>-Switch From Non-Form <code>Content-Type: application/json</code> or <code>Content-Type: application/x-url-encoded</code> To <code>Content-Type: form-multipart</code></li>\n<li>-Change/delete the last or frist character from the token</li>\n<li>-Change referrer to Referrer</li>\n<li>-Bypass the regex<ul>\n<li>If the site is looking for “bank.com” in the referer URL, maybe “bank.com.attacker.com” or “attacker.com/bank.com” will work.</li>\n</ul>\n</li>\n<li>-Remove the referer header (add this <meta name=”referrer” content=”no-referrer”> in your payload or html code)</li>\n<li>-Clickjacking (<a href=\"https://owasp.org/www-community/attacks/Clickjacking\">https://owasp.org/www-community/attacks/Clickjacking</a>)<ul>\n<li>Exploiting clickjacking on the same endpoint bypasses all CSRF protection. Because technically, the request is indeed originating from the legitimate site. If the page where the vulnerable endpoint is located on is vulnerable to clickjacking, all CSRF protection will be rendered irrelevant and you will be able to achieve the same results as a CSRF   attack on the endpoint, albeit with a bit more effort.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Finding-CVEs\"><a href=\"#Finding-CVEs\" class=\"headerlink\" title=\"Finding CVEs\"></a>Finding CVEs</h2><ol>\n<li>CVEs<br>   1.Grab all the subdomains i.e, subfinder -d domain.com | tee -a domains.txt<br>   2.Grap all alive domains i.e,  cat domains.txt | httpx -status-code | grep 200 | cut -d “ “ -f1 | tee -a alive.txt<br>   3.Run nuclei basic-detection,panels,workflows,cves templates differently and store results in different file. i.e, cat alive.txt | nuclei -t nuclei-templates/workflows | tee -a workflows.<br>   4.Read each output carefully with patience.<br>   5.Find interest tech used by target. i.e, jira<br>   6.put that link into browser check the version used by target.<br>   7.Go on google search with jira version exploit.<br>   8.grep the cves<br>   9.Go to twitter in explore tab search CVE(that you found from google) poc or CVE exploit<br>   10.Go to google and put cve or some details grab from   twitter for a better poc read writeups related to that.<br>   11.Try all cves if success report it.:)</li>\n</ol>\n<h2 id=\"Check-list\"><a href=\"#Check-list\" class=\"headerlink\" title=\"Check list\"></a>Check list</h2><ol>\n<li>Web application pentesting checklist<br><a href=\"https://kathan19.gitbook.io/howtohunt/checklist/web-application-pentesting-checklist\">https://kathan19.gitbook.io/howtohunt/checklist/web-application-pentesting-checklist</a></li>\n<li>Web checklist 2<br><a href=\"https://github.com/KathanP19/HowToHunt/blob/master/CheckList/Web_Checklist_by_Chintan_Gurjar.pdf\">https://github.com/KathanP19/HowToHunt/blob/master/CheckList/Web_Checklist_by_Chintan_Gurjar.pdf</a></li>\n<li>Web checklist 3<br><a href=\"https://github.com/KathanP19/HowToHunt/blob/master/CheckList/mindmap.png\">https://github.com/KathanP19/HowToHunt/blob/master/CheckList/mindmap.png</a></li>\n</ol>\n<h2 id=\"Source-code-review\"><a href=\"#Source-code-review\" class=\"headerlink\" title=\"Source code review\"></a>Source code review</h2><ol>\n<li>code review tips<ul>\n<li>important functions first<br>When reading source code, focus on important functions such as authentication, password reset, state-changing actions and sensitive info reads. (What is the most important would depend on the application.) Then, review how these components interact with other functionality. Finally, audit other less sensitive parts of the application.</li>\n<li>follow user input<br>Another approach is to follow the code that processes user input. User input such as HTTP request parameters, HTTP headers, HTTP request paths, database entries, file reads, and file uploads provide the entry points for attackers to exploit the application’s vulnerabilities.This may also help us to find some critical vulnerabilities like xxe,xxs,sql injection</li>\n<li>hard-coded secrets n credentials<br>Hard-coded secrets such as API keys, encryption keys and database passwords can be easily discovered during a source code review. You can grep for keywords such as “key”, “secret”, “password”, “encrypt” or regex search for hex or base64 strings (depending on the key format in use).</li>\n<li>use of dangerous functions n outdated dependencies<br>Unchecked use of dangerous functions and outdated dependencies are a huge source of bugs. Grep for specific functions for the language you are using and search through the dependency versions list to see if they are outdated.</li>\n<li>developer comments, hidden debug functionalities, configuration files, and the .git directory<br>These are things that developers often forget about and they leave the application in a dangerous state. Developer comments can point out obvious programming mistakes, hidden debug functionalities often lead to privilege escalation, config files allow attackers to gather more information about your infrastructure and finally, an exposed .git directory allows attackers to reconstruct your source code.</li>\n<li>hidden paths, deprecated endpoints, and endpoints in development<br>These are endpoints that users might not encounter when using the application normally. But if they work and they are discovered by an attacker, it can lead to vulnerabilities such as authentication bypass and sensitive information leak, depending on the exposed endpoint.</li>\n<li>weak cryptography or hashing algorithms<br>This is an issue that is hard to find during a black-box test, but easy to spot when reviewing source code. Look for issues such as weak encryption keys, breakable encryption algorithms, and weak hashing algorithms. Grep for terms like ECB, MD4, and MD5.</li>\n<li>missing security checks on user input and regex strength<br>Reviewing source code is a great way to find out what kind of security checks are missing. Read through the application’s documentation and test all the edge cases that you can think of. A great resource for what kind of edge cases that you should consider is PayloadsAllTheThings.(github)</li>\n<li>missing cookie flags<br>Look out for missing cookie flags such as httpOnly and secure.</li>\n<li>unexpected behavior, conditionals, unnecessarily complex and verbose functions<br>Additionally, pay special attention to the application’s unexpected behavior, conditionals, and complex functions. These locations are where obscure bugs are often discovered.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"EXIF-geo-data-not-stripped\"><a href=\"#EXIF-geo-data-not-stripped\" class=\"headerlink\" title=\"EXIF geo data not stripped\"></a>EXIF geo data not stripped</h2><ol>\n<li>EXIF geo data not stripped (sensitive info leaked)<ul>\n<li>tools<br><a href=\"http://exif.regex.info/exif.cgi\">http://exif.regex.info/exif.cgi</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"File-upload-bypass\"><a href=\"#File-upload-bypass\" class=\"headerlink\" title=\"File upload bypass\"></a>File upload bypass</h2><ol>\n<li>File upload bypass<ul>\n<li>bypassing normal extension<br>  sth.php.jpg or sth.jpg.php</li>\n<li>bypassing the magic byte validation<br>  polyglots</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Find-origin-IP\"><a href=\"#Find-origin-IP\" class=\"headerlink\" title=\"Find origin IP\"></a>Find origin IP</h2><ol>\n<li>find origin<ul>\n<li><a href=\"https://kathan19.gitbook.io/howtohunt/find-origin-ip/findorigin\">https://kathan19.gitbook.io/howtohunt/find-origin-ip/findorigin</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"HTTP-desync-attack\"><a href=\"#HTTP-desync-attack\" class=\"headerlink\" title=\"HTTP desync attack\"></a>HTTP desync attack</h2><ol>\n<li>HTTP_Desync<ul>\n<li>HTTP request smuggling<ul>\n<li>how to do<br>ref: <a href=\"https://portswigger.net/web-security/request-smuggling/finding\">https://portswigger.net/web-security/request-smuggling/finding</a><br><a href=\"https://portswigger.net/web-security/request-smuggling/exploiting\">https://portswigger.net/web-security/request-smuggling/exploiting</a><br><a href=\"https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn\">https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn</a><br><a href=\"https://paper.seebug.org/1048/\">https://paper.seebug.org/1048/</a></li>\n<li>tools<br><a href=\"https://github.com/defparam/smuggler\">https://github.com/defparam/smuggler</a><br><a href=\"https://github.com/PortSwigger/http-request-smuggler\">https://github.com/PortSwigger/http-request-smuggler</a></li>\n<li>testing lab<br><a href=\"https://portswigger.net/web-security/request-smuggling\">https://portswigger.net/web-security/request-smuggling</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Host-header-attack\"><a href=\"#Host-header-attack\" class=\"headerlink\" title=\"Host-header attack\"></a>Host-header attack</h2><ol>\n<li>host-header<br> <a href=\"https://kathan19.gitbook.io/howtohunt/host-header-attack/host-header\">https://kathan19.gitbook.io/howtohunt/host-header-attack/host-header</a></li>\n</ol>\n<h2 id=\"HTML-injection\"><a href=\"#HTML-injection\" class=\"headerlink\" title=\"HTML-injection\"></a>HTML-injection</h2><ol>\n<li><p>HTML-injection</p>\n<ul>\n<li><p>Password reset links are usually addressed to your account name followed by the reset link. Also if the application allows you to have your account name with tags and special characters then you should try this.</p>\n</li>\n<li><p>steps</p>\n<ul>\n<li>Create ur acc, edit the name to<code>&lt;h1&gt;attacker&lt;/h1&gt;</code> or <code>&quot;abc&gt;&lt;h1&gt;attacker&lt;/h1&gt;</code><br>and save it.</li>\n<li>request a password reset n check the reset email.</li>\n<li>see if the <code>&lt;h1&gt;</code> tag executed.</li>\n</ul>\n</li>\n<li><p>tips</p>\n<ul>\n<li><p>HTML injection are usually considered as low to medium severity bugs but you can escalate the severity by serving a malicious link by using <code>&lt;a href&gt;</code> for eg:<br><code>&lt;h1&gt;attacker&lt;/h1&gt;&lt;a href=&quot;your-controlled-domain&quot;Click here&lt;/a&gt;</code></p>\n</li>\n<li><p>You can redirect the user to your malicious domain and serve a fake reset password page to steal credentials Also you can serve a previously found XSS page and steal user cookies etc.</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"IDOR\"><a href=\"#IDOR\" class=\"headerlink\" title=\"IDOR\"></a>IDOR</h2><ol>\n<li>IDOR<br> <a href=\"https://kathan19.gitbook.io/howtohunt/idor/idor\">https://kathan19.gitbook.io/howtohunt/idor/idor</a></li>\n</ol>\n<h2 id=\"JWT-attack\"><a href=\"#JWT-attack\" class=\"headerlink\" title=\"JWT attack\"></a>JWT attack</h2><ol>\n<li>JWT<br> <a href=\"https://kathan19.gitbook.io/howtohunt/jwt-attack/jwt_attack\">https://kathan19.gitbook.io/howtohunt/jwt-attack/jwt_attack</a></li>\n</ol>\n<h2 id=\"MFA-bypass\"><a href=\"#MFA-bypass\" class=\"headerlink\" title=\"MFA bypass\"></a>MFA bypass</h2><ol>\n<li>MFA bypasses<br> <a href=\"https://kathan19.gitbook.io/howtohunt/mfa-bypass/mfa_bypasses\">https://kathan19.gitbook.io/howtohunt/mfa-bypass/mfa_bypasses</a></li>\n<li>2FA bypass<br> <a href=\"https://kathan19.gitbook.io/howtohunt/mfa-bypass/2fa_bypass\">https://kathan19.gitbook.io/howtohunt/mfa-bypass/2fa_bypass</a></li>\n</ol>\n<h2 id=\"Misconfigurations\"><a href=\"#Misconfigurations\" class=\"headerlink\" title=\"Misconfigurations\"></a>Misconfigurations</h2><ol>\n<li><p>default credential n admin panel</p>\n<ul>\n<li>default credentials basics<br>default software configurations, ie.:</li>\n</ul>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;www.target.com&#x2F;admin</span><br><span class=\"line\">https:&#x2F;&#x2F;www.target.com&#x2F;admin-console</span><br><span class=\"line\">https:&#x2F;&#x2F;www.target.com&#x2F;console</span><br><span class=\"line\">https:&#x2F;&#x2F;admin.target.com</span><br><span class=\"line\">https:&#x2F;&#x2F;admin-console.target.com</span><br><span class=\"line\">https:&#x2F;&#x2F;console.target.com</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>get access from third party<ul>\n<li>search the service default credentials if the admin is working on a third party</li>\n</ul>\n</li>\n<li>bypass to get access to login page<ul>\n<li>when visiting admin login page is denied, use header injection to bypass, eg, <code>X-Orginal-URL: /admin</code> or <code>X-Rewrite-URL:/admin</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"OAuth\"><a href=\"#OAuth\" class=\"headerlink\" title=\"OAuth\"></a>OAuth</h2><ol>\n<li>OAuth<br> <a href=\"https://kathan19.gitbook.io/howtohunt/oauth/oauth\">https://kathan19.gitbook.io/howtohunt/oauth/oauth</a></li>\n</ol>\n<h2 id=\"Open-redirection\"><a href=\"#Open-redirection\" class=\"headerlink\" title=\"Open redirection\"></a>Open redirection</h2><ol>\n<li>find OpenRedirect trick<ul>\n<li>steps<ul>\n<li>create an acc, record the user profile link, logout n clean all the cookies.</li>\n<li>paste n visit the profile link, it may redirect u to the login like <code>https://samplesite.me/login?next=accounts/profile</code> or <code>https://samplesite.me/login?retUrl=accounts/profile</code></li>\n<li>try to exploit the parameter by adding an external domain eg: <code>https://samplesite.me/login?next=https://evil.com/</code> or <code>https://samplesite.me/login?next=https://samplesite.me@evil.com/ #</code>or <code>https://targetweb.com?url=www.targetweb.com.attackersite.com (with created subdomain)</code> (to beat the bad regex filter)</li>\n<li>else, try the XSS eg: <code> https://samplesite.me/login?next=javascript:alert(1);//</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Parameter-pollution\"><a href=\"#Parameter-pollution\" class=\"headerlink\" title=\"Parameter pollution\"></a>Parameter pollution</h2><ol>\n<li>Parameter pollution in social sharing buttons<ul>\n<li>find a social sharing button n get the sharing link.</li>\n<li>modified it from <code>https://taget.com/how-to-hunt </code> to such as <code>https://taget.com/how-to-hunt?&amp;u=https://attacker.com/vaya&amp;text=another_site:https://attacker.com/vaya</code></li>\n<li>click the share button n see if the attack website is in the sharing content<h2 id=\"Password-reset-functionality\"><a href=\"#Password-reset-functionality\" class=\"headerlink\" title=\"Password reset functionality\"></a>Password reset functionality</h2>Mindmap <a href=\"https://kathan19.gitbook.io/howtohunt/password-reset-functionality/password_reset_functionality\">https://kathan19.gitbook.io/howtohunt/password-reset-functionality/password_reset_functionality</a></li>\n</ul>\n</li>\n<li>password reset token leakage<ol>\n<li>Sent a password reset request using forget password</li>\n<li>Check your email</li>\n<li>Copy your reset page link and paste in another tab and make burp intercept on.</li>\n<li>Look for every request if you find similar token that is in reset link with other domain like: bat.bing.com or facebook.com</li>\n<li>Then there is reset password token leakage.</li>\n</ol>\n</li>\n<li>account takeover by password reset functionality<ol>\n<li>email= <a href=\"mailto:&#118;&#105;&#x63;&#116;&#105;&#x6d;&#x40;&#103;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#109;\">&#118;&#105;&#x63;&#116;&#105;&#x6d;&#x40;&#103;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#109;</a>&amp;email=attacker@gmil.com</li>\n<li>email= <a href=\"mailto:&#118;&#x69;&#x63;&#116;&#x69;&#x6d;&#x40;&#x67;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#109;\">&#118;&#x69;&#x63;&#116;&#x69;&#x6d;&#x40;&#x67;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#109;</a>%20email=attacker@gmil.com</li>\n<li>email= <a href=\"mailto:&#x76;&#x69;&#x63;&#x74;&#x69;&#109;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;\">&#x76;&#x69;&#x63;&#x74;&#x69;&#109;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;</a> |email=attacker@gmil.com</li>\n<li>email= <a href=\"mailto:&#x76;&#105;&#x63;&#116;&#105;&#109;&#64;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;\">&#x76;&#105;&#x63;&#116;&#105;&#109;&#64;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;</a>%0d%0acc:<a href=\"mailto:&#97;&#x74;&#x74;&#x61;&#99;&#107;&#x65;&#114;&#x40;&#103;&#x6d;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;\">&#97;&#x74;&#x74;&#x61;&#99;&#107;&#x65;&#114;&#x40;&#103;&#x6d;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;</a></li>\n<li>email= <a href=\"mailto:&#118;&#105;&#99;&#x74;&#105;&#x6d;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#x6d;\">&#118;&#105;&#99;&#x74;&#105;&#x6d;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#x6d;</a>&amp;code= my password reset token</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Rate-limit\"><a href=\"#Rate-limit\" class=\"headerlink\" title=\"Rate limit\"></a>Rate limit</h2><ol>\n<li><p>rate-limit bypass</p>\n<ul>\n<li><p>customizing HTTP methods</p>\n<ul>\n<li><p>change the GET request to POST, PUT, etc.</p>\n</li>\n<li><p>bypassing rate-limit in API’s try HEAD method</p>\n</li>\n<li><p>using header to bypass the rate limit<br>(use the following just below the host header)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X-Forwarded-For: IP</span><br><span class=\"line\">X-Forwarded-IP: IP</span><br><span class=\"line\">X-Client-IP: IP</span><br><span class=\"line\">X-Remote-IP: IP</span><br><span class=\"line\">X-Originating-IP: IP</span><br><span class=\"line\">X-Host: IP</span><br><span class=\"line\">X-Client: IP</span><br><span class=\"line\"></span><br><span class=\"line\">#or use double X-Forwarded-For header</span><br><span class=\"line\">X-Forwarded-For:</span><br><span class=\"line\">X-Forwarded-For: IP</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>addding headers to spoof IP</p>\n<ul>\n<li>add HTTP headers to spoof IP n evade detection</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X-Forwarded: 127.0.0.1</span><br><span class=\"line\">X-Forwarded-By: 127.0.0.1</span><br><span class=\"line\">X-Forwarded-For: 127.0.0.1</span><br><span class=\"line\">X-Forwarded-For-Original: 127.0.0.1</span><br><span class=\"line\">X-Forwarder-For: 127.0.0.1</span><br><span class=\"line\">X-Forward-For: 127.0.0.1</span><br><span class=\"line\">Forwarded-For: 127.0.0.1</span><br><span class=\"line\">Forwarded-For-Ip: 127.0.0.1</span><br><span class=\"line\">X-Custom-IP-Authorization: 127.0.0.1</span><br><span class=\"line\">X-Originating-IP: 127.0.0.1</span><br><span class=\"line\">X-Remote-IP: 127.0.0.1</span><br><span class=\"line\">X-Remote-Addr: 127.0.0.1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>bypass rate limit using special characters<ul>\n<li>adding null byte (%00) at the end of the email</li>\n<li>try add a space after the email (not encoded)</li>\n<li>other characters can be tried to bypass rate limit <code>%0d , %2e , %09 , %20 , %0, %00, %0d%0a, %0a, %0C</code></li>\n<li>add a slash (/) at the end of api endpoint<br>from<code>domain.com/v1/login</code> to <code>domain.com/v1/login/</code><br>eg: <a href=\"https://hackerone.com/reports/1067533\">https://hackerone.com/reports/1067533</a></li>\n</ul>\n</li>\n<li>using IP rotate burp extension<br>other ref: <a href=\"https://kathan19.gitbook.io/howtohunt/rate-limit/ratelimitbypass\">https://kathan19.gitbook.io/howtohunt/rate-limit/ratelimitbypass</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Recon\"><a href=\"#Recon\" class=\"headerlink\" title=\"Recon\"></a>Recon</h2><ol>\n<li>recon workflow<br><a href=\"https://kathan19.gitbook.io/howtohunt/recon/workflow\">https://kathan19.gitbook.io/howtohunt/recon/workflow</a></li>\n<li>subdomain enumeration<br><a href=\"https://kathan19.gitbook.io/howtohunt/recon/subdomain_enumeration\">https://kathan19.gitbook.io/howtohunt/recon/subdomain_enumeration</a></li>\n</ol>\n<h2 id=\"SQLI\"><a href=\"#SQLI\" class=\"headerlink\" title=\"SQLI\"></a>SQLI</h2><ol>\n<li>SQL injection<ul>\n<li>send request to burp scanner n proceed with active scan</li>\n<li><a href=\"https://twitter.com/El3ctr0Byt3s/status/1302706241240731649\">https://twitter.com/El3ctr0Byt3s/status/1302706241240731649</a></li>\n<li>for getting hidden parameters<ol>\n<li>Use subdomain enumeration tools on the domain.</li>\n<li>Gather all urls using hakcrawler, waybackurls, gau for the domain and subdomains.</li>\n<li>You can use the same method described above in 2nd point.</li>\n<li>Use Arjun to scan for the hidden params in the urls.</li>\n<li>Use –urls flag to include all urls.</li>\n<li>Check the params as <a href=\"https://domain.com/?%60\">https://domain.com?`</a><hiddenparam>=<value>`</li>\n<li>Send request to file and process it through sqlmap.</li>\n</ol>\n</li>\n<li><a href=\"https://kathan19.gitbook.io/howtohunt/sqli/sql_injection\">https://kathan19.gitbook.io/howtohunt/sqli/sql_injection</a></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Account-takeover\"><a href=\"#Account-takeover\" class=\"headerlink\" title=\"Account takeover\"></a>Account takeover</h2><ol>\n<li>Have a session hijacking -&gt; Look for xss to stole the cookies n expand the impact</li>\n<li>The target has weak password policy -&gt; Create a (very) weak password n brute force this account to show the POC</li>\n<li>Password reset poisoning:<ul>\n<li>Go to password reset function -&gt; Enter email n intercept</li>\n<li>Change host header to some other host i.e,<pre><code>* Host:target.com\n * Host:attacker.com\n</code></pre>\nalso try to add some headers without changing host like<pre><code>* X-Forwarded-Host: evil.com\n * Referrer: https ://evil.com\n</code></pre>\n</li>\n<li>Forward this if you found that in next request attacker.com means you successfully theft the token.:)</li>\n</ul>\n</li>\n<li>Using CSRF:<ul>\n<li>Change Password function</li>\n<li>Email change</li>\n<li>Change Security Question</li>\n</ul>\n</li>\n<li>Use git recon or google recon to find sensitive data (depends on luck :))</li>\n<li>Token leaks in response:<ul>\n<li>For registration:<ul>\n<li>Intercept the signup request that contains data you have entered.</li>\n<li>Click on action -&gt; do -&gt; intercept response to this request.</li>\n<li>Click forward.</li>\n<li>Check response it that contains any link,any token or otp(one-time password).</li>\n</ul>\n</li>\n<li>For password reset:<ul>\n<li>Intercept the forget password option.</li>\n<li>Click on action -&gt; do -&gt; intercept response to this request.</li>\n<li>Click forward.</li>\n<li>Check response it that contains any link,any token or otp.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Application-level-DoS\"><a href=\"#Application-level-DoS\" class=\"headerlink\" title=\"Application level DoS\"></a>Application level DoS</h2><ol>\n<li>Email bounce issues:</li>\n</ol>\n<p>  <em><strong>ref: <a href=\"https://infosecwriteups.com/an-unexpected-bounty-email-bounce-issues-b9f24a35eb68\">https://infosecwriteups.com/an-unexpected-bounty-email-bounce-issues-b9f24a35eb68</a></strong></em></p>\n<ol>\n<li>Long password DoS:<ul>\n<li>Test in Forgot Password Page n Change Password, cuz the registration usually have length limit but others don’t.</li>\n<li>Use a password around 150-200 words to check if there has length limit. Then choose a longer password n keep checking the response time, to see if the app crashes for few seconds.</li>\n<li>reason: The long password will cause a problem while hashing it for storing in dataset.</li>\n</ul>\n</li>\n<li>Long string DoS:<ul>\n<li>Create app and put field like username or address or even profile picture name parameter (second reference) like 1000 character of string .</li>\n<li>Search A’s account from B’s account either it will either keeping searching for long time or crash(500 Error code).<br><em><strong>ref: <a href=\"https://shahjerry33.medium.com/long-string-dos-6ba8ceab3aa0\">https://shahjerry33.medium.com/long-string-dos-6ba8ceab3aa0</a></strong></em><br><em><strong><a href=\"https://hackerone.com/reports/764434\">https://hackerone.com/reports/764434</a></strong></em></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Authentication-bypass\"><a href=\"#Authentication-bypass\" class=\"headerlink\" title=\"Authentication bypass\"></a>Authentication bypass</h2><ol>\n<li>2FA bypass<ul>\n<li>Response Manipulation<ul>\n<li>change the response value of (eg: login) success to ‘true’ from ‘false’</li>\n</ul>\n</li>\n<li>Status Code Manipulation<ul>\n<li>change the status code from 4xx to 200 to see if if can bypass</li>\n</ul>\n</li>\n<li>2FA Code Leakage in Response<ul>\n<li>check the response of the 2FA Code Triggering Request to see if the code is leaked</li>\n</ul>\n</li>\n<li>JS File Analysis (rare)<ul>\n<li>some JS files may contain info about the 2FA code</li>\n</ul>\n</li>\n<li>2FA Code Reusability<ul>\n<li>same code can be reused</li>\n</ul>\n</li>\n<li>Lack of Brute-Force Protection<ul>\n<li>(possible)</li>\n</ul>\n</li>\n<li>Missing 2FA Code Integrity Validation<ul>\n<li>Code for any user acc can be used to bypass the 2FA</li>\n</ul>\n</li>\n<li>CSRF on 2FA Disabling<ul>\n<li>signup for two account -&gt; Login into attacker account &amp; capture the disable 2FA request -&gt; generate CSRF POC with .HTML extension -&gt; Login into victim account and fire the request — — -&gt; It disable 2FA which leads to 2FA Bypass.</li>\n</ul>\n</li>\n<li>Password Reset Disable 2FA<ul>\n<li>2FA gets disabled on password change/email change</li>\n</ul>\n</li>\n<li>Backup Code Abuse<br><em><strong>ref: <a href=\"https://medium.com/@surendirans7777/2fa-bypass-techniques-32ec135fb7fe\">https://medium.com/@surendirans7777/2fa-bypass-techniques-32ec135fb7fe</a></strong></em></li>\n<li>Clickjacking on 2FA Disabling Page<ul>\n<li>misleading victim to disable the 2FA for the 2FA disabling page</li>\n</ul>\n</li>\n<li>Enabling 2FA doesn’t expire Previously active Sessions<ul>\n<li>if the previous session is hijacked n app has session timeout vlun</li>\n</ul>\n</li>\n<li>Bypass 2FA with null or 000000<ul>\n<li>enter null or 000000 to bypass</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>OTP bypass by repeating requests<ul>\n<li>create an acc with a non-existing ph num</li>\n<li>intercept the request n send to repeater n forward</li>\n<li>change the non-existing num to attacker num, get the OTP n register that non-existing num<br><em><strong>ref: <a href=\"https://medium.com/@AGNIHACKERS/otp-bypass-through-response-manipulation-beeb467359d8\">https://medium.com/@AGNIHACKERS/otp-bypass-through-response-manipulation-beeb467359d8</a></strong></em></li>\n</ul>\n</li>\n<li>OTP bypass via response manipulation<ul>\n<li>change any status, false, error, 0, to true, success, 1. And see if it can bypass the OTP<br><em><strong>ref: <a href=\"https://medium.com/@MAALP/authentication-bypass-using-response-manipulation-6c33eb1257ac\">https://medium.com/@MAALP/authentication-bypass-using-response-manipulation-6c33eb1257ac</a></strong></em></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Broken-link-hijacking\"><a href=\"#Broken-link-hijacking\" class=\"headerlink\" title=\"Broken-link hijacking\"></a>Broken-link hijacking</h2><ol>\n<li>Broken-link hijacking<ul>\n<li>manual check the external link</li>\n<li>broken-link-checker<pre><code>* blc -rof --filter-level 3 https://example.com/\n</code></pre>\n</li>\n<li>register the broken link or try to get that username or url</li>\n<li>extra ways:<pre><code>* https://ahrefs.com/broken-link-checker\n * https://brokenlinkcheck.com/\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Broken-auth-and-session-management\"><a href=\"#Broken-auth-and-session-management\" class=\"headerlink\" title=\"Broken auth and session management\"></a>Broken auth and session management</h2><ol>\n<li>Session based bugs<ul>\n<li>Old session does not expire<ul>\n<li>log in the account through two browser(eg. firefox n chrome)</li>\n<li>change pwd or reset pwd on one browser, then refresh the other browser to see if still logged in</li>\n</ul>\n</li>\n<li>Session hijacking (intended behavior)<ul>\n<li>login the acc</li>\n<li>copy all cookies n logout</li>\n<li>paste the cookies n refresh</li>\n</ul>\n</li>\n<li> Password reset link token not expire (insecure configurability)</li>\n<li>create acc, request a forget pwd link</li>\n<li>don’t use it, instead, change the email to new one</li>\n<li>now use the forget pwd link to sent info to the old email n see if pwd is able to change</li>\n<li>Server security misconfiguration<ul>\n<li>login, play around n logout, goback one page, see if acc is logged in or can view pages limits to the user</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Bypassing-CSP\"><a href=\"#Bypassing-CSP\" class=\"headerlink\" title=\"Bypassing CSP\"></a>Bypassing CSP</h2><ol>\n<li>CSP (Content Security Policy) bypass</li>\n</ol>\n<p>  <em><strong>ref: <a href=\"https://kathan19.gitbook.io/howtohunt/bypassing-csp/csp_bypass\">https://kathan19.gitbook.io/howtohunt/bypassing-csp/csp_bypass</a></strong></em></p>\n<h2 id=\"CMS\"><a href=\"#CMS\" class=\"headerlink\" title=\"CMS\"></a>CMS</h2><ol>\n<li><p>Wordpress</p>\n<ul>\n<li>Wordpress Detection<ul>\n<li>Wappalyzer</li>\n<li>WhatRuns</li>\n<li>BuildWith</li>\n</ul>\n</li>\n<li>General Scan Tool<ul>\n<li>WpScan</li>\n</ul>\n</li>\n<li>xmlrpc.php<ul>\n<li>one of the common issue on wp, to get credit, u need to fully exploit n show the impact.</li>\n<li>detection:<ul>\n<li>site.com/xmlrpc.php</li>\n<li>Get the error message about POST request only</li>\n</ul>\n</li>\n<li>exploit<br><em><strong>ref: <a href=\"https://nitesculucian.github.io/2019/07/01/exploiting-the-xmlrpc-php-on-all-wordpress-versions/\">https://nitesculucian.github.io/2019/07/01/exploiting-the-xmlrpc-php-on-all-wordpress-versions/</a></strong></em><br><em><strong><a href=\"https://the-bilal-rizwan.medium.com/wordpress-xmlrpc-php-common-vulnerabilites-how-to-exploit-them-d8d3c8600b32\">https://the-bilal-rizwan.medium.com/wordpress-xmlrpc-php-common-vulnerabilites-how-to-exploit-them-d8d3c8600b32</a></strong></em><ul>\n<li>Intercept the request and change the method GET to POST</li>\n<li>List all Methods<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;methodCall&gt;</span><br><span class=\"line\">&lt;methodName&gt;system.listMethods&lt;&#x2F;methodName&gt;</span><br><span class=\"line\">&lt;params&gt;&lt;&#x2F;params&gt;</span><br><span class=\"line\">&lt;&#x2F;methodCall&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>pingback.ping DDoS</li>\n</ul>\n</li>\n</ul>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;methodCall&gt;</span><br><span class=\"line\">&lt;methodName&gt;pingback.ping&lt;&#x2F;methodName&gt;</span><br><span class=\"line\">&lt;params&gt;&lt;param&gt;</span><br><span class=\"line\">&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;YOUR SERVER &gt;:&lt;port&gt;&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;</span><br><span class=\"line\">&lt;&#x2F;param&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;SOME VALID BLOG FROM THE SITE &gt;&lt;&#x2F;string&gt;</span><br><span class=\"line\">&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;&#x2F;params&gt;</span><br><span class=\"line\">&lt;&#x2F;methodCall&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pingback.ping SSRF (internal PORT scan only)</li>\n</ul>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;methodCall&gt;</span><br><span class=\"line\">&lt;methodName&gt;pingback.ping&lt;&#x2F;methodName&gt;</span><br><span class=\"line\">&lt;params&gt;&lt;param&gt;</span><br><span class=\"line\">&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;YOUR SERVER &gt;:&lt;port&gt;&lt;&#x2F;string&gt;&lt;&#x2F;value&gt;</span><br><span class=\"line\">&lt;&#x2F;param&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;http:&#x2F;&#x2F;&lt;SOME VALID BLOG FROM THE SITE &gt;&lt;&#x2F;string&gt;</span><br><span class=\"line\">&lt;&#x2F;value&gt;&lt;&#x2F;param&gt;&lt;&#x2F;params&gt;</span><br><span class=\"line\">&lt;&#x2F;methodCall&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>tools<br>xmlrpc-scan <a href=\"https://github.com/nullfil3/xmlrpc-scan\">https://github.com/nullfil3/xmlrpc-scan</a></p>\n</li>\n<li><p>CVE-2018-6389 (wp &lt;= 4.9.3)</p>\n<ul>\n<li><p>detection</p>\n<ul>\n<li><a href=\"https://gist.github.com/remonsec/4877e9ee2b045aae96be7e2653c41df9\">https://gist.github.com/remonsec/4877e9ee2b045aae96be7e2653c41df9</a></li>\n</ul>\n</li>\n<li><p>exploit</p>\n<ul>\n<li>use DDoS (Doser <a href=\"https://github.com/quitten/doser.py\">https://github.com/quitten/doser.py</a>)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 doser.py -t 999 -g &#39;https:&#x2F;&#x2F;site.com&#x2F;fullUrlFromLoadsxploit&#39;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>WP Cornjob DOS</p>\n<ul>\n<li><p>detection</p>\n<ul>\n<li>view site.com/wp-cron.php, You will see a Blank page with 200 HTTP status code</li>\n</ul>\n</li>\n<li><p>exploit</p>\n<ul>\n<li>same tool as above (Doser)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You will see a Blank page with 200 HTTP status code</span><br></pre></td></tr></table></figure>\n<p><em><strong>ref: <a href=\"https://medium.com/@thecpanelguy/the-nightmare-that-is-wpcron-php-ae31c1d3ae30\">https://medium.com/@thecpanelguy/the-nightmare-that-is-wpcron-php-ae31c1d3ae30</a></strong></em></p>\n</li>\n</ul>\n</li>\n<li><p>WP User Enumeration</p>\n<ul>\n<li>site.com/wp-json/wp/v2/users/</li>\n<li>mostly not acceptable, can be used to extend the impact tho</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h2><ol>\n<li>CORS (<em><strong>ref: <a href=\"https://www.packetlabs.net/cross-origin-resource-sharing-cors/\">https://www.packetlabs.net/cross-origin-resource-sharing-cors/</a></strong></em>)</li>\n</ol>\n<ul>\n<li>misconfigured CORS<ul>\n<li>hunting method 1 (single target)<ul>\n<li>crawl the target website n search Access-Control using burp</li>\n<li>Try to add Origin Header i.e, Origin:attacker.com or Origin:null or Origin:attacker.target.com or Origin:target.attacker.com</li>\n<li>If origin is reflected in response means the target is vuln to CORS</li>\n</ul>\n</li>\n<li>hunting method 2 (multiple means including subdomains)<ul>\n<li>find alive subdomains (i.e, subfinder -d domain.com -o target.txt; grep alive: cat target.txt | httpx | tee -a alive.txt), send each subdomain into burp</li>\n<li>same as above method</li>\n</ul>\n</li>\n<li>automated tools<ul>\n<li><a href=\"https://github.com/chenjj/CORScanner\">https://github.com/chenjj/CORScanner</a></li>\n<li><a href=\"https://github.com/lc/theftfuzzer\">https://github.com/lc/theftfuzzer</a></li>\n<li><a href=\"https://github.com/s0md3v/Corsy\">https://github.com/s0md3v/Corsy</a></li>\n<li><a href=\"https://github.com/Shivangx01b/CorsMe\">https://github.com/Shivangx01b/CorsMe</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>CORS bypass</li>\n</ol>\n<ul>\n<li>Origin:null</li>\n<li>Origin:attacker.com</li>\n<li>Origin:attacker.target.com</li>\n<li>Origin:attackertarget.com</li>\n<li>Origin:sub.attackertarget.com</li>\n<li>Origin:attacker.com and then change the method Get to post/Post to Get</li>\n<li>Origin:sub.attacker target.com</li>\n<li>Origin:sub.attacker%target.com</li>\n<li>Origin:attacker.com/target.com</li>\n<li><a href=\"https://twitter.com/trbughunters/status/1287023673845612546\">https://twitter.com/trbughunters/status/1287023673845612546</a></li>\n<li><a href=\"https://twitter.com/Paresh_parmar1/status/1265251507655630848\">https://twitter.com/Paresh_parmar1/status/1265251507655630848</a></li>\n<li><a href=\"https://www.corben.io/tricky-CORS/\">https://www.corben.io/tricky-CORS/</a></li>\n<li><a href=\"https://medium.com/@virus0x01/cors-misconfiguration-leading-to-private-information-disclosure-3034cfcb4b93\">https://medium.com/@virus0x01/cors-misconfiguration-leading-to-private-information-disclosure-3034cfcb4b93</a></li>\n</ul>\n<h2 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h2><ol>\n<li>CSRF<ul>\n<li><a href=\"https://kathan19.gitbook.io/howtohunt/csrf/csrf\">https://kathan19.gitbook.io/howtohunt/csrf/csrf</a></li>\n</ul>\n</li>\n<li>CSRF bypass<ul>\n<li>-Change Request Method [POST =&gt; GET]</li>\n<li>-Remove Total Token Parameter</li>\n<li>-Remove The Token, And Give a Blank Parameter</li>\n<li>-Copy a Unused Valid Token , By Dropping The Request and Use That Token</li>\n<li>-Use Own CSRF Token To Feed it to Victim</li>\n<li>-Replace Value With Of A Token of Same Length</li>\n<li>-Reverse Engineer The Token</li>\n<li>-Extract Token via HTML injection</li>\n<li>-Switch From Non-Form <code>Content-Type: application/json</code> or <code>Content-Type: application/x-url-encoded</code> To <code>Content-Type: form-multipart</code></li>\n<li>-Change/delete the last or frist character from the token</li>\n<li>-Change referrer to Referrer</li>\n<li>-Bypass the regex<ul>\n<li>If the site is looking for “bank.com” in the referer URL, maybe “bank.com.attacker.com” or “attacker.com/bank.com” will work.</li>\n</ul>\n</li>\n<li>-Remove the referer header (add this <meta name=”referrer” content=”no-referrer”> in your payload or html code)</li>\n<li>-Clickjacking (<a href=\"https://owasp.org/www-community/attacks/Clickjacking\">https://owasp.org/www-community/attacks/Clickjacking</a>)<ul>\n<li>Exploiting clickjacking on the same endpoint bypasses all CSRF protection. Because technically, the request is indeed originating from the legitimate site. If the page where the vulnerable endpoint is located on is vulnerable to clickjacking, all CSRF protection will be rendered irrelevant and you will be able to achieve the same results as a CSRF   attack on the endpoint, albeit with a bit more effort.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Finding-CVEs\"><a href=\"#Finding-CVEs\" class=\"headerlink\" title=\"Finding CVEs\"></a>Finding CVEs</h2><ol>\n<li>CVEs<br>   1.Grab all the subdomains i.e, subfinder -d domain.com | tee -a domains.txt<br>   2.Grap all alive domains i.e,  cat domains.txt | httpx -status-code | grep 200 | cut -d “ “ -f1 | tee -a alive.txt<br>   3.Run nuclei basic-detection,panels,workflows,cves templates differently and store results in different file. i.e, cat alive.txt | nuclei -t nuclei-templates/workflows | tee -a workflows.<br>   4.Read each output carefully with patience.<br>   5.Find interest tech used by target. i.e, jira<br>   6.put that link into browser check the version used by target.<br>   7.Go on google search with jira version exploit.<br>   8.grep the cves<br>   9.Go to twitter in explore tab search CVE(that you found from google) poc or CVE exploit<br>   10.Go to google and put cve or some details grab from   twitter for a better poc read writeups related to that.<br>   11.Try all cves if success report it.:)</li>\n</ol>\n<h2 id=\"Check-list\"><a href=\"#Check-list\" class=\"headerlink\" title=\"Check list\"></a>Check list</h2><ol>\n<li>Web application pentesting checklist<br><a href=\"https://kathan19.gitbook.io/howtohunt/checklist/web-application-pentesting-checklist\">https://kathan19.gitbook.io/howtohunt/checklist/web-application-pentesting-checklist</a></li>\n<li>Web checklist 2<br><a href=\"https://github.com/KathanP19/HowToHunt/blob/master/CheckList/Web_Checklist_by_Chintan_Gurjar.pdf\">https://github.com/KathanP19/HowToHunt/blob/master/CheckList/Web_Checklist_by_Chintan_Gurjar.pdf</a></li>\n<li>Web checklist 3<br><a href=\"https://github.com/KathanP19/HowToHunt/blob/master/CheckList/mindmap.png\">https://github.com/KathanP19/HowToHunt/blob/master/CheckList/mindmap.png</a></li>\n</ol>\n<h2 id=\"Source-code-review\"><a href=\"#Source-code-review\" class=\"headerlink\" title=\"Source code review\"></a>Source code review</h2><ol>\n<li>code review tips<ul>\n<li>important functions first<br>When reading source code, focus on important functions such as authentication, password reset, state-changing actions and sensitive info reads. (What is the most important would depend on the application.) Then, review how these components interact with other functionality. Finally, audit other less sensitive parts of the application.</li>\n<li>follow user input<br>Another approach is to follow the code that processes user input. User input such as HTTP request parameters, HTTP headers, HTTP request paths, database entries, file reads, and file uploads provide the entry points for attackers to exploit the application’s vulnerabilities.This may also help us to find some critical vulnerabilities like xxe,xxs,sql injection</li>\n<li>hard-coded secrets n credentials<br>Hard-coded secrets such as API keys, encryption keys and database passwords can be easily discovered during a source code review. You can grep for keywords such as “key”, “secret”, “password”, “encrypt” or regex search for hex or base64 strings (depending on the key format in use).</li>\n<li>use of dangerous functions n outdated dependencies<br>Unchecked use of dangerous functions and outdated dependencies are a huge source of bugs. Grep for specific functions for the language you are using and search through the dependency versions list to see if they are outdated.</li>\n<li>developer comments, hidden debug functionalities, configuration files, and the .git directory<br>These are things that developers often forget about and they leave the application in a dangerous state. Developer comments can point out obvious programming mistakes, hidden debug functionalities often lead to privilege escalation, config files allow attackers to gather more information about your infrastructure and finally, an exposed .git directory allows attackers to reconstruct your source code.</li>\n<li>hidden paths, deprecated endpoints, and endpoints in development<br>These are endpoints that users might not encounter when using the application normally. But if they work and they are discovered by an attacker, it can lead to vulnerabilities such as authentication bypass and sensitive information leak, depending on the exposed endpoint.</li>\n<li>weak cryptography or hashing algorithms<br>This is an issue that is hard to find during a black-box test, but easy to spot when reviewing source code. Look for issues such as weak encryption keys, breakable encryption algorithms, and weak hashing algorithms. Grep for terms like ECB, MD4, and MD5.</li>\n<li>missing security checks on user input and regex strength<br>Reviewing source code is a great way to find out what kind of security checks are missing. Read through the application’s documentation and test all the edge cases that you can think of. A great resource for what kind of edge cases that you should consider is PayloadsAllTheThings.(github)</li>\n<li>missing cookie flags<br>Look out for missing cookie flags such as httpOnly and secure.</li>\n<li>unexpected behavior, conditionals, unnecessarily complex and verbose functions<br>Additionally, pay special attention to the application’s unexpected behavior, conditionals, and complex functions. These locations are where obscure bugs are often discovered.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"EXIF-geo-data-not-stripped\"><a href=\"#EXIF-geo-data-not-stripped\" class=\"headerlink\" title=\"EXIF geo data not stripped\"></a>EXIF geo data not stripped</h2><ol>\n<li>EXIF geo data not stripped (sensitive info leaked)<ul>\n<li>tools<br><a href=\"http://exif.regex.info/exif.cgi\">http://exif.regex.info/exif.cgi</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"File-upload-bypass\"><a href=\"#File-upload-bypass\" class=\"headerlink\" title=\"File upload bypass\"></a>File upload bypass</h2><ol>\n<li>File upload bypass<ul>\n<li>bypassing normal extension<br>  sth.php.jpg or sth.jpg.php</li>\n<li>bypassing the magic byte validation<br>  polyglots</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Find-origin-IP\"><a href=\"#Find-origin-IP\" class=\"headerlink\" title=\"Find origin IP\"></a>Find origin IP</h2><ol>\n<li>find origin<ul>\n<li><a href=\"https://kathan19.gitbook.io/howtohunt/find-origin-ip/findorigin\">https://kathan19.gitbook.io/howtohunt/find-origin-ip/findorigin</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"HTTP-desync-attack\"><a href=\"#HTTP-desync-attack\" class=\"headerlink\" title=\"HTTP desync attack\"></a>HTTP desync attack</h2><ol>\n<li>HTTP_Desync<ul>\n<li>HTTP request smuggling<ul>\n<li>how to do<br>ref: <a href=\"https://portswigger.net/web-security/request-smuggling/finding\">https://portswigger.net/web-security/request-smuggling/finding</a><br><a href=\"https://portswigger.net/web-security/request-smuggling/exploiting\">https://portswigger.net/web-security/request-smuggling/exploiting</a><br><a href=\"https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn\">https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn</a><br><a href=\"https://paper.seebug.org/1048/\">https://paper.seebug.org/1048/</a></li>\n<li>tools<br><a href=\"https://github.com/defparam/smuggler\">https://github.com/defparam/smuggler</a><br><a href=\"https://github.com/PortSwigger/http-request-smuggler\">https://github.com/PortSwigger/http-request-smuggler</a></li>\n<li>testing lab<br><a href=\"https://portswigger.net/web-security/request-smuggling\">https://portswigger.net/web-security/request-smuggling</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Host-header-attack\"><a href=\"#Host-header-attack\" class=\"headerlink\" title=\"Host-header attack\"></a>Host-header attack</h2><ol>\n<li>host-header<br> <a href=\"https://kathan19.gitbook.io/howtohunt/host-header-attack/host-header\">https://kathan19.gitbook.io/howtohunt/host-header-attack/host-header</a></li>\n</ol>\n<h2 id=\"HTML-injection\"><a href=\"#HTML-injection\" class=\"headerlink\" title=\"HTML-injection\"></a>HTML-injection</h2><ol>\n<li><p>HTML-injection</p>\n<ul>\n<li><p>Password reset links are usually addressed to your account name followed by the reset link. Also if the application allows you to have your account name with tags and special characters then you should try this.</p>\n</li>\n<li><p>steps</p>\n<ul>\n<li>Create ur acc, edit the name to<code>&lt;h1&gt;attacker&lt;/h1&gt;</code> or <code>&quot;abc&gt;&lt;h1&gt;attacker&lt;/h1&gt;</code><br>and save it.</li>\n<li>request a password reset n check the reset email.</li>\n<li>see if the <code>&lt;h1&gt;</code> tag executed.</li>\n</ul>\n</li>\n<li><p>tips</p>\n<ul>\n<li><p>HTML injection are usually considered as low to medium severity bugs but you can escalate the severity by serving a malicious link by using <code>&lt;a href&gt;</code> for eg:<br><code>&lt;h1&gt;attacker&lt;/h1&gt;&lt;a href=&quot;your-controlled-domain&quot;Click here&lt;/a&gt;</code></p>\n</li>\n<li><p>You can redirect the user to your malicious domain and serve a fake reset password page to steal credentials Also you can serve a previously found XSS page and steal user cookies etc.</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"IDOR\"><a href=\"#IDOR\" class=\"headerlink\" title=\"IDOR\"></a>IDOR</h2><ol>\n<li>IDOR<br> <a href=\"https://kathan19.gitbook.io/howtohunt/idor/idor\">https://kathan19.gitbook.io/howtohunt/idor/idor</a></li>\n</ol>\n<h2 id=\"JWT-attack\"><a href=\"#JWT-attack\" class=\"headerlink\" title=\"JWT attack\"></a>JWT attack</h2><ol>\n<li>JWT<br> <a href=\"https://kathan19.gitbook.io/howtohunt/jwt-attack/jwt_attack\">https://kathan19.gitbook.io/howtohunt/jwt-attack/jwt_attack</a></li>\n</ol>\n<h2 id=\"MFA-bypass\"><a href=\"#MFA-bypass\" class=\"headerlink\" title=\"MFA bypass\"></a>MFA bypass</h2><ol>\n<li>MFA bypasses<br> <a href=\"https://kathan19.gitbook.io/howtohunt/mfa-bypass/mfa_bypasses\">https://kathan19.gitbook.io/howtohunt/mfa-bypass/mfa_bypasses</a></li>\n<li>2FA bypass<br> <a href=\"https://kathan19.gitbook.io/howtohunt/mfa-bypass/2fa_bypass\">https://kathan19.gitbook.io/howtohunt/mfa-bypass/2fa_bypass</a></li>\n</ol>\n<h2 id=\"Misconfigurations\"><a href=\"#Misconfigurations\" class=\"headerlink\" title=\"Misconfigurations\"></a>Misconfigurations</h2><ol>\n<li><p>default credential n admin panel</p>\n<ul>\n<li>default credentials basics<br>default software configurations, ie.:</li>\n</ul>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;www.target.com&#x2F;admin</span><br><span class=\"line\">https:&#x2F;&#x2F;www.target.com&#x2F;admin-console</span><br><span class=\"line\">https:&#x2F;&#x2F;www.target.com&#x2F;console</span><br><span class=\"line\">https:&#x2F;&#x2F;admin.target.com</span><br><span class=\"line\">https:&#x2F;&#x2F;admin-console.target.com</span><br><span class=\"line\">https:&#x2F;&#x2F;console.target.com</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>get access from third party<ul>\n<li>search the service default credentials if the admin is working on a third party</li>\n</ul>\n</li>\n<li>bypass to get access to login page<ul>\n<li>when visiting admin login page is denied, use header injection to bypass, eg, <code>X-Orginal-URL: /admin</code> or <code>X-Rewrite-URL:/admin</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"OAuth\"><a href=\"#OAuth\" class=\"headerlink\" title=\"OAuth\"></a>OAuth</h2><ol>\n<li>OAuth<br> <a href=\"https://kathan19.gitbook.io/howtohunt/oauth/oauth\">https://kathan19.gitbook.io/howtohunt/oauth/oauth</a></li>\n</ol>\n<h2 id=\"Open-redirection\"><a href=\"#Open-redirection\" class=\"headerlink\" title=\"Open redirection\"></a>Open redirection</h2><ol>\n<li>find OpenRedirect trick<ul>\n<li>steps<ul>\n<li>create an acc, record the user profile link, logout n clean all the cookies.</li>\n<li>paste n visit the profile link, it may redirect u to the login like <code>https://samplesite.me/login?next=accounts/profile</code> or <code>https://samplesite.me/login?retUrl=accounts/profile</code></li>\n<li>try to exploit the parameter by adding an external domain eg: <code>https://samplesite.me/login?next=https://evil.com/</code> or <code>https://samplesite.me/login?next=https://samplesite.me@evil.com/ #</code>or <code>https://targetweb.com?url=www.targetweb.com.attackersite.com (with created subdomain)</code> (to beat the bad regex filter)</li>\n<li>else, try the XSS eg: <code> https://samplesite.me/login?next=javascript:alert(1);//</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Parameter-pollution\"><a href=\"#Parameter-pollution\" class=\"headerlink\" title=\"Parameter pollution\"></a>Parameter pollution</h2><ol>\n<li>Parameter pollution in social sharing buttons<ul>\n<li>find a social sharing button n get the sharing link.</li>\n<li>modified it from <code>https://taget.com/how-to-hunt </code> to such as <code>https://taget.com/how-to-hunt?&amp;u=https://attacker.com/vaya&amp;text=another_site:https://attacker.com/vaya</code></li>\n<li>click the share button n see if the attack website is in the sharing content<h2 id=\"Password-reset-functionality\"><a href=\"#Password-reset-functionality\" class=\"headerlink\" title=\"Password reset functionality\"></a>Password reset functionality</h2>Mindmap <a href=\"https://kathan19.gitbook.io/howtohunt/password-reset-functionality/password_reset_functionality\">https://kathan19.gitbook.io/howtohunt/password-reset-functionality/password_reset_functionality</a></li>\n</ul>\n</li>\n<li>password reset token leakage<ol>\n<li>Sent a password reset request using forget password</li>\n<li>Check your email</li>\n<li>Copy your reset page link and paste in another tab and make burp intercept on.</li>\n<li>Look for every request if you find similar token that is in reset link with other domain like: bat.bing.com or facebook.com</li>\n<li>Then there is reset password token leakage.</li>\n</ol>\n</li>\n<li>account takeover by password reset functionality<ol>\n<li>email= <a href=\"mailto:&#118;&#105;&#x63;&#116;&#105;&#x6d;&#x40;&#103;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#109;\">&#118;&#105;&#x63;&#116;&#105;&#x6d;&#x40;&#103;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#109;</a>&amp;email=attacker@gmil.com</li>\n<li>email= <a href=\"mailto:&#118;&#x69;&#x63;&#116;&#x69;&#x6d;&#x40;&#x67;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#109;\">&#118;&#x69;&#x63;&#116;&#x69;&#x6d;&#x40;&#x67;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#109;</a>%20email=attacker@gmil.com</li>\n<li>email= <a href=\"mailto:&#x76;&#x69;&#x63;&#x74;&#x69;&#109;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;\">&#x76;&#x69;&#x63;&#x74;&#x69;&#109;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;</a> |email=attacker@gmil.com</li>\n<li>email= <a href=\"mailto:&#x76;&#105;&#x63;&#116;&#105;&#109;&#64;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;\">&#x76;&#105;&#x63;&#116;&#105;&#109;&#64;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;</a>%0d%0acc:<a href=\"mailto:&#97;&#x74;&#x74;&#x61;&#99;&#107;&#x65;&#114;&#x40;&#103;&#x6d;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;\">&#97;&#x74;&#x74;&#x61;&#99;&#107;&#x65;&#114;&#x40;&#103;&#x6d;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;</a></li>\n<li>email= <a href=\"mailto:&#118;&#105;&#99;&#x74;&#105;&#x6d;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#x6d;\">&#118;&#105;&#99;&#x74;&#105;&#x6d;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#x6d;</a>&amp;code= my password reset token</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Rate-limit\"><a href=\"#Rate-limit\" class=\"headerlink\" title=\"Rate limit\"></a>Rate limit</h2><ol>\n<li><p>rate-limit bypass</p>\n<ul>\n<li><p>customizing HTTP methods</p>\n<ul>\n<li><p>change the GET request to POST, PUT, etc.</p>\n</li>\n<li><p>bypassing rate-limit in API’s try HEAD method</p>\n</li>\n<li><p>using header to bypass the rate limit<br>(use the following just below the host header)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X-Forwarded-For: IP</span><br><span class=\"line\">X-Forwarded-IP: IP</span><br><span class=\"line\">X-Client-IP: IP</span><br><span class=\"line\">X-Remote-IP: IP</span><br><span class=\"line\">X-Originating-IP: IP</span><br><span class=\"line\">X-Host: IP</span><br><span class=\"line\">X-Client: IP</span><br><span class=\"line\"></span><br><span class=\"line\">#or use double X-Forwarded-For header</span><br><span class=\"line\">X-Forwarded-For:</span><br><span class=\"line\">X-Forwarded-For: IP</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>addding headers to spoof IP</p>\n<ul>\n<li>add HTTP headers to spoof IP n evade detection</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X-Forwarded: 127.0.0.1</span><br><span class=\"line\">X-Forwarded-By: 127.0.0.1</span><br><span class=\"line\">X-Forwarded-For: 127.0.0.1</span><br><span class=\"line\">X-Forwarded-For-Original: 127.0.0.1</span><br><span class=\"line\">X-Forwarder-For: 127.0.0.1</span><br><span class=\"line\">X-Forward-For: 127.0.0.1</span><br><span class=\"line\">Forwarded-For: 127.0.0.1</span><br><span class=\"line\">Forwarded-For-Ip: 127.0.0.1</span><br><span class=\"line\">X-Custom-IP-Authorization: 127.0.0.1</span><br><span class=\"line\">X-Originating-IP: 127.0.0.1</span><br><span class=\"line\">X-Remote-IP: 127.0.0.1</span><br><span class=\"line\">X-Remote-Addr: 127.0.0.1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>bypass rate limit using special characters<ul>\n<li>adding null byte (%00) at the end of the email</li>\n<li>try add a space after the email (not encoded)</li>\n<li>other characters can be tried to bypass rate limit <code>%0d , %2e , %09 , %20 , %0, %00, %0d%0a, %0a, %0C</code></li>\n<li>add a slash (/) at the end of api endpoint<br>from<code>domain.com/v1/login</code> to <code>domain.com/v1/login/</code><br>eg: <a href=\"https://hackerone.com/reports/1067533\">https://hackerone.com/reports/1067533</a></li>\n</ul>\n</li>\n<li>using IP rotate burp extension<br>other ref: <a href=\"https://kathan19.gitbook.io/howtohunt/rate-limit/ratelimitbypass\">https://kathan19.gitbook.io/howtohunt/rate-limit/ratelimitbypass</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Recon\"><a href=\"#Recon\" class=\"headerlink\" title=\"Recon\"></a>Recon</h2><ol>\n<li>recon workflow<br><a href=\"https://kathan19.gitbook.io/howtohunt/recon/workflow\">https://kathan19.gitbook.io/howtohunt/recon/workflow</a></li>\n<li>subdomain enumeration<br><a href=\"https://kathan19.gitbook.io/howtohunt/recon/subdomain_enumeration\">https://kathan19.gitbook.io/howtohunt/recon/subdomain_enumeration</a></li>\n</ol>\n<h2 id=\"SQLI\"><a href=\"#SQLI\" class=\"headerlink\" title=\"SQLI\"></a>SQLI</h2><ol>\n<li>SQL injection<ul>\n<li>send request to burp scanner n proceed with active scan</li>\n<li><a href=\"https://twitter.com/El3ctr0Byt3s/status/1302706241240731649\">https://twitter.com/El3ctr0Byt3s/status/1302706241240731649</a></li>\n<li>for getting hidden parameters<ol>\n<li>Use subdomain enumeration tools on the domain.</li>\n<li>Gather all urls using hakcrawler, waybackurls, gau for the domain and subdomains.</li>\n<li>You can use the same method described above in 2nd point.</li>\n<li>Use Arjun to scan for the hidden params in the urls.</li>\n<li>Use –urls flag to include all urls.</li>\n<li>Check the params as <a href=\"https://domain.com/?%60\">https://domain.com?`</a><hiddenparam>=<value>`</li>\n<li>Send request to file and process it through sqlmap.</li>\n</ol>\n</li>\n<li><a href=\"https://kathan19.gitbook.io/howtohunt/sqli/sql_injection\">https://kathan19.gitbook.io/howtohunt/sqli/sql_injection</a></li>\n</ul>\n</li>\n</ol>\n"},{"title":"代码审计 企业级web代码安全结构","toc":true,"date":"2021-07-17T10:05:28.000Z","_content":"\n苦于代码审计能力偏弱，调研一番发现这本书或许有所帮助。\n\n## 第一部分 代码审计前的准备\n\n### 代码审计环境搭建\n1. wamp/wnmp: WAMP（Windows下的Apache+Mysql/MariaDB+Perl/PHP/Python），WNMP（Windows下的Nginx+Mysql+PHP）\n1. lamp/lnmp：将上述环境安装在Linux中。\n\n#### PHP_INI_*常量的定义\n1. PHP_INI_USER：该配置选项可在用户的PHP脚本或Win注册表中设置。\n1. PHP_INI_PERDIR：该配置选项可在php.ini. .htaccess或httpd.conf中设置。\n1. PHP_INI_SYSTEM：该配置选项可在任何地方设置。\n1. PHP_INI_ALL：该配置选项可在任何地方设置。\n1. php.ini only：该配置选项可仅可在php.ini中配置。\n\n#### 会影响PHP脚本安全的配置列表及核心配置选项\n1. register_globals(全局变量注册开关)：该选项在on的情况下，会将用户GET/POST等方式提交上来的参数注册成全局变量并初始化值为参数对应的值，使提交参数可以直接在脚本中使用。register_globals在PHP版本小于等于4.2.3时设置为PHP_INI_ALL，从PHP5.3.0起被废弃，在PHP5.4.0中被移除。\n    代码实例：(实验环境php5.2.17,在php.ini中添加register_globals = On)\n    ```\n<?php\nif($user=='admin'){\n  echo 'true';\n}\n    ```\n1. allow_url_include(是否允许包含远程文件)：在该配置为on的情况下，可以直接包含远程文件，当存在include(`$var`)且$var可控的情况下，可以直接控制$var变量来执行PHP代码。allow_url_include在PHP5.2.0后默认设置为off，配置范围为PHP_INI_ALL。与之类似的配置有allow_url_fopen，配置是否允许打开远程文件，但安全隐患没有前者大。\n    代码实例：(实验环境php5.2.17，payload：a=http://127.0.0.1:80/test/info.txt ，info.txt内容为`<?php phpinfo();?>`)\n    ```\n<?php\ninclude $_GET['a'];\n    ```\n1. magic_quotes_gpc（魔术引号自动过滤）：该参数在不存在编码或其他特殊绕过的情况下，可以使很多漏洞无法利用。当该参数被开启时（选项设置为on），会自动在GET、POST、COOKIE变量中的单引号（‘）、双引号（“）、反斜杠（\\）及空字符（NULL）的前面加上反斜杠（\\），但在PHP5中magic_quotes_gps并不会过滤$_SERVER变量，导致很多类似client-ip、referer一类的漏洞能够利用。PHP5.3之后不推荐使用该参数，PHP5.4之后被取消。在PHP版本小于4.2.3时，配置范围是PHP_INI_ALL;在PHP版本大于4.2.3时，是PHP_INI_PERDIR。\n    代码实例：(测试?a=1')\n    ```\n<?php\necho $_GET['a'];\n    ```\n1. magic_quotes_runtime(魔术引号自动过滤)：过滤方式同样为加反斜杠，但和magic_quotes_gpc的处理对象不一样。magic_quotes_runtime只对从数据库或文件中获取的数据进行过滤，magic_quotes_runtime在PHP5.4之后被取消，配置范围是PHP_INI_ALL。但该参数仅对部分函数有作用，某些情况下可以被绕过。\n    代码实例：\n    ```\n#1.txt\n1'2\"3\\4\n\n<?php\nini_set(\"magic_quotes_runtime\",\"1\");\necho file_get_contents(\"1.txt\");\n    ```\n1. magic_quotes_sybase(魔术引号自动过滤)：用于自动过滤特殊字符，当设置为on时，会覆盖magic_quotes_gpc=on的配置（使gpc=on失效）。与gpc的共同点是处理对象一致（GET、POST、Cookie)，但该参数仅转义空字符以及把单引号变成双引号，使用率比gpc低。配置范围为PHP_INI_ALL，在PHP5.4.0中移除。（代码实例与gpc相同）\n1. safe_mode（安全模式）：是PHP内嵌的一种安全机制，配置范围为PHP_INI_SYSTEM，PHP5.4之后被取消（取消原因是，PHP开发者认为在PHP语言机制上试图解决安全问题是一件不合适的事情，虽然safe_mode在一定程度上对共享主机有效，但同时也带来了不少误报，与其在PHP上解决权限安全问题，不如使用linux默认的权限限制机制或其它层级的解决办法）。该参数效果为，所有文件操作函数都会受到限制，非文件所有者不能对该文件进行操作（如include()），如果有一些脚本文件放在非Web服务启动用户所有的目录下，需要利用include等函数进行加载，可以使用safe_mode_include_dir来配置可包含的路径。此外，通过函数popen()、system()以及exec()等函数执行命令或程序会提示错误，如果需要使用外部脚本，可以集中存放，然后用safe_node_exec_dir来指向存放目录。\n    代码实例：\n    ```\n# echo `whoami`; 执行命令失败的回显提示\nWarning: shell_exec() [function, shell_exec]: Cannot execute using backquotes in Safe Mode ...\n    ```\n1. open_basedir（PHP可访问目录）：用于限制PHP只能访问哪些目录，通常只需要设置Web文件目录即可，如果需要加载外部脚本，也需要把所在路径加入该指令中，多个目录以分号分割。需要注意，指定限制实际上是前缀而不是目录名，如配置open_basedir=/www/a，那么/www/a和/www/ab都可以访问，所以为了避免该现象发生，需要用斜线结束路径名，如/www/a/。当参数激活，执行脚本访问其它文件时都需要验证文件路径，所以会影响执行效率。该指令配置范围在PHP<5.2.3时是PHP_INI_SYSTEM，在PHP>=5.2.3时是PHP_INI_ALL。\n1. disable_functions(禁用函数)：使用该指令来禁止敏感函数的使用，使用本指令时，需把dl()函数也添加进禁用列表，否则攻击者可以利用dl()函数价值自定义的PHP扩展突破该指令的限制。指令范围为php.ini，配置禁用函数时使用逗号分割函数名。\n1. display_errors和error_reporting错误显示：display_errors用于表明是否显示PHP脚本内部错误，生产环境中建议关闭，在开启时，可以通过设置error_reporting来设置错误显示的级别。配置范围均为PHP_INI_ALL。\n\n### 审计辅助与漏洞验证工具\n\n#### 代码编辑器\n1. Notepad++\n1. UltraEdit（文件对比）\n1. Zend Studio（PHP集成开发环境）\n\n#### 代码审计工具\n1. Seay源代码审计系统\n1. RIPS\n\n#### 漏洞验证辅助\n1. Burp\n1. 浏览器扩展：Hackbar, Firebug, Live HTTP Headers, Modify\n1. 编码转换及加解密工具：Seay代码审计系统自带的编码功能，Burp自带的decoder，超级加解密转换工具\n1. 正则调试工具：Seay自带的正则调试功能，灵者正则调试\n1. SQL执行监控工具：Seay mysql监控\n\n## 漏洞发现与防范\n\n### 通用代码审计思路\n\n#### 敏感函数回溯参数过程\n根据敏感函数来逆向追踪参数的传递过程，使用较多，因为大多数漏洞都是由于函数使用不当造成的。非函数使用不当的漏洞，如SQL注入，也有一些特征，如Select、Incert等，结合From和Where等关键字判断是否为一条SQL语句，通过对字符串的识别分析，就能判断该SQL语句参数有没有使用单引号过滤，或者根据经验判断。如HTTP头里面的HTTP_CLIENT_IP和HTTP_X_FORWORDFOR等获取到的IP地址常直接拼接到SQL语句中，且由于它们是存在于`$_SERVER`变量中不受GPC的影响，那么就可以查找这两个参数关键字快速寻找漏洞。\n该方法的优点是定向挖掘、高效、高质量，缺点是对整体框架了解不够深入，定位利用点会花费时间，另外无法覆盖逻辑漏洞。\n\n#### 通读全文代码\n在企业中做自身产品代码审计时，我们需要了解整个应用的业务逻辑以获取更多漏洞。\n通读全文代码时，首先要看程序的大体代码结构，如主目录有哪些文件，模块目录有哪些文件，插件目录有哪些文件，还要注意文件大小、创建时间。根据文件命名可大致了解该程序实现哪些功能，核心文件是哪些。\n在看程序目录结构时，要特别注意以下几个文件：\n1. `函数集文件`，通常命名中包含functions或者common等关键字，这些文件内是一些公共函数，提供给其它文件统一调用，所以大多数文件会在文件头包含其它文件。寻找这些文件的一个技巧就是打开index.php或一些功能性文件，在头部一般都能找到。\n1. `配置文件`，通常命名中包含config关键字，包括Web程序运行必须的功能性配置选项及数据库等配置信息，从该文件中可以了解程序的小部分功能，另外看这个文件时注意观察配置文件中参数值是用单引号还是双引号，如果是双引号，则很可能存在代码执行漏洞。（如利用PHP可变变量（$$a）的特性执行代码，ref：https://www.cnblogs.com/Cl0ud/p/12336834.html）\n1. `安全过滤文件`，该文件关系到挖掘到的可疑点能否利用，通常命名中有filter、safe、check等关键字。这类文件主要作用是针对参数进行过滤，比较常见的是针对SQL注入和XSS过滤，还有文件路径、执行的系统命令的参数，其它相对少见。而目前大多数应用会在程序入口循环对所有参数使用addslashes()进行过滤。\n1. `index文件`，是一个程序的入口文件，通过阅读该文件可大致了解整个程序的架构、运行流程、包含的文件，以及核心文件有哪些。而不同的目录的index文件也有不同的实现方式，最好先将核心目录的index文件都简单读一遍。\n学习代码审计前期建议先下载一些小应用来读，积累经验后，再去读开源框架。\n\n#### 根据功能点定向审计\n先简单黑盒测试一下，再通过发现的容易出问题的功能去阅读该功能点的源码，提高审计速度。\n1. 文件上传功能：任意上传、SQL注入\n1. 文件管理功能：任意文件操作、XSS漏洞\n1. 登录认证功能：任意用户登录\n1. 找回密码功能：验证码爆破、验证凭证算法\n\n### 漏洞挖掘与防范（基础篇）\n\n#### SQL注入\n\n##### 挖掘经验\n常出现在登录页面、获取HTTP头（user-agent/client-ip等）、订单处理等业务相对复杂的地方，登录页面注入大多出现在HTTP头的client-ip和x-forward-for，用于记录登录IP地址。另外在订单系统内，由于订单涉及购物车等多个交互，经常会发生二次注入，通读代码时可着重关注这几个地方。\n1. 普通注入：指最容易利用的SQL注入漏洞，有int型和string型，在string型注入中需要使用单或双引号闭合。数据库操作存在一些关键字，如select from、mysql_connect、mysql_query、mysql_fetch_row等，查询方式还有update、incert、delete，只需要在白盒审计中查找这些关键字即可定向挖掘SQL注入。\n1. 编码注入：程序在进行一些操作前经常会进行编码处理，而做编码处理的函数可能会存在问题。通过输入转码函数不兼容的特殊字符，即可导致输出字符变成有害数据，在SQL注入里，最常见的编码注入是MySQL宽字节以及urldecode/rawurldecode函数导致的。\n    * 宽字节注入：使用PHP连接MySQL的时候，当设置`set character_set_client=gbk`时会导致一个编码转换的注入问题，当存在该漏洞时，注入参数里带入`%df%27`，即可把程序中过滤的`\\(%5c)`吃掉。而通常都不是直接设置`set character_set_client=gbk`，而是设置`SET NAMES ‘gbk’`，同样存在漏洞。官方建议是使用mysql_set_charset来设置编码，只要在后面合理的使用mysql_real_escape_string还是可以解决该漏洞的。对宽字节注入的挖掘方法比较简单，搜索`SET NAMES`、`character_set_client=gbk`、`mysql_set_charset('gbk')`。该漏洞的解决方法如以下三种，比较推荐一和三：\n        * 在执行查询前先执行`SET NAMES 'gbk', character_set_client=binary`\n        * 使用mysql_set_charset('gbk')设置编码，然后使用mysql_real_escape_string()过滤。\n        * 使用pdo方式，在PHP5.3.6及以下版本中需要设置`setAttribute(PDO::ATTR_EMULATE_PREPARES,false);`，来禁用prepared statements的仿真效果。\n    * 二次urlencode注入：只要字符被进行转换就有可能产生漏洞。现在的Web程序大多会进行参数过滤，通常使用addslashes()、mysql_real_escape_string()、mysql_escape_string()函数或者开启GPC的方式来防止注入，也就是给单引号、双引号、反斜杠（\\）和NULL加上反斜杠转义。如果某处使用了urldecode或者rawurldecode函数，则会导致二次加码生成单引号而引发注入。该漏洞可以通过搜索urldecode和rawurldecode函数来挖掘。\n\n##### 漏洞防范\n1. gpc/runtime魔术引号：通常数据污染有两种方式，一种是应用被动接收参数，另一种是主动获取参数。利用magic_quotes_gpc和magic_quotes_runtime可以防止部分SQL注入（对int型注入没有太大作用）\n1. 过滤函数和类：有两种使用场景，一种是程序入口统一过滤，框架程序使用这种方式比较多，另一种是在程序进行SQL语句运行前使用，除了PHP内置的一些过滤单引号等函数外，还有一些开源类过滤union、select等关键字。\n    * addslashes函数：过滤单引号、双引号、反斜杠以及空字符NULL，大多被用在程序入口，判断如果没有开启GPC则使用该函数进行过滤。不过它的参数必须是string类，所以可能会存在通过数组绕过的漏洞。\n    * mysql_[real_]escape_string函数：这两个函数都是对字符串进行过滤，只存在于大于PHP4.03的版本，[`\\x00`]、[`\\n`]、[`\\r`]、[`\\`]、[`'`]、[`\"`]、[`\\xla`]会受到影响。两个函数唯一不一样的地方在于mysql_real_escape_string接受的是一个连接句柄并根据当前字符集转移字符串，推荐使用。\n    * intval等字符转换：上述方式在int类型注入时效果不会，比如可以通过报错或盲注等方式来绕过，这时候就要用到intval函数了。intval的作用是将变量转换成int类型，这里举例intval是要表达一种利用参数类型白名单的方式来防止漏洞，对应的还有很多如floatval等。\n1. PDO prepare预编译：通过预编译的方式来处理数据库查询。当PHP版本<5.3.6时，使用PHP本地模拟prepare再把完整的SQL语句发送给MySQL服务器，且使用set names 'gbk'时，仍然存在宽字节SQL注入，因为PHP和MySQL编码不一致。正确的写法应该是使用ATTR_EMULATE_PREPARES来禁用PHP本地模拟prepare。\n\n#### XSS漏洞\n\n##### 挖掘经验\n挖掘XSS漏洞关键在于寻找没有被过滤的参数，且这些参数传入至输出函数。常用输出函数列表如下：`print、print_r、echo、printf、sprintf、die、var_dump、var_export`，寻找带有变量的这些函数即可。另外在代码审计中，浏览器环境对XSS漏洞利用影响非常大。通读代码时可多关注各处设置资料、文章发表、留言等富文本区域，这种地方存在的XSS通常是存储型的。\n\n##### 反射型 XSS\n直接通过外部输入在浏览器端输出触发，该种漏洞比较容易通过扫描器黑盒审计发现。白盒审计中，只需要寻找带有参数的输出参数，根据输出参数对输出内容回溯输入参数，观察有没有经过过滤。\n\n##### 存储型XSS\n把利用代码保存在数据库或文件中，当Web程序读取利用代码并输出在页面上时执行利用代码。比反射型容易利用，较为隐蔽且不用考虑绕过浏览器过滤。挖掘时也是需要寻找未过滤的输入点和未过滤的输出函数（可能完全不在同一个业务流中），可以根据当前代码功能去猜，或追寻数据有在哪里被操作，使用表名、字段名去代码里搜索。\n\n##### 漏洞防范\n1. 特殊字符HTML实体转码。\n1. 标签事件属性黑白名单。\n\n#### CSRF漏洞\n\n##### 挖掘经验\n主要用于越权操作，所以漏洞会出现在有权限控制的地方。黑盒挖洞可以先搭建环境，打开几个有非静态操作的页面，抓包看看有没有token，没有token就不带referer直接请求该页面，返回数据一样的话，可能存在CSRF漏洞。白盒审计，通读代码时看看被大量引用的基础文件（核心文件）、你比较关心的功能点代码内有没有验证token和referer相关的代码，或者直接搜索token关键字。\n\n##### 漏洞防范\n1. 增加token/referer验证避免img标签请求的水坑攻击。\n2. 增加验证码。（比较麻烦，更适用于敏感操作页面）\n\n### 漏洞挖掘与防范（进阶篇）\n\n#### 文件操作漏洞\n\n##### 文件包含漏洞\n文件包涵函数有include()、include_once()（前两个在包含文件时即使遇到错误，下面的代码仍然执行）、require()、require_once()（这两个在包含文件时遇到错误会报错退出程序）。\n\n###### 挖掘经验\n文件包含漏洞大多出现在模块加载、模板加载以及cache调用的地方。在挖掘漏洞时可以跟踪程序运行流程，看模块加载包含的文件是否可控等，另一个是直接搜索上文四个函数来回溯寻找可控变量。一般该类漏洞都是本地文件包含，大多需要截断。\n\n###### 本地文件包含\n本地文件包含（local file include，LFI），大多出现在模块加载、模板加载和cache调用，有多种利用方式，如上传一个允许上传的文件格式的文件再包含以执行代码，包含PHP上传的临时文件，在请求URL或ua里面加入要执行的代码，WebServer记录到日志后再包含WebServer的日志，还有像Linux下可以包含/proc/self/environ文件。\n\n###### 远程文件包含\n远程文件包含（remote file include, RFI），需要设置allow_url_include = On，相比于本地包含来说更容易利用，但出现频率不高。\n\n###### 文件包含截断\n1. 使用`%00`截断，最古老的方法，受限于GPC和addslashes等函数的过滤，另外PHP5.3之后的版本已经全面修复，不能使用该方法了。\n1. 使用多个英文句号`.`和反斜杠`/`来阶段，不受GPC限制，但同样在PHP5.3之后被修复。\n1. 远程文件包含时利用问号`？`来伪截断，不受GPC和PHP版本限制，只要能返回代码给包含函数就能执行。在HTTP协议里，访问http://remotehost/i.txt和访问http://remotehost/i.txt?.php 返回的结果是一样的，因为WebServer把问号之后的内容当成请求参数，而txt不在WebServer里解析，参数对访问i.txt返回的内容不影响，实现伪截断。\n\n##### 文件读取（下载）漏洞\n\n###### 挖掘经验\n文件读取漏洞比较容易寻找，一种方式是可以先黑盒看功能点对应的文件，再去读文件源码。另一种是搜索文件读取的函数（`file_get_contents()、highlight_file()、fopen()、readfile()、fread()、fgetss()、fgets()、parse_ini_file()、show_source()、file()`），看有无可直接或间接控制的变量，除了正常读取文件的函数之外，另外一些其他功能的函数也可以用于读取文件，如include()等。\n\n##### 文件上传漏洞\n\n###### 挖掘经验\n挖掘简单，上传点常调用同一个上传类，上传函数又只有move_uploaded_file()这一个，所以最快方法就是直接搜索该函数，再去看调用的代码存不存在未限制上传格式或者可以绕过，其中问题较多的是黑名单限制文件格式以及未更改文件名的方式，在未改名的情况下，在Apache利用其向前寻找解析格式和IIS6的分号解析bug都可以执行代码。\n1. 未过滤或本地过滤：共同点是都未在服务器端过滤。\n1. 黑名单扩展名过滤：出现较少，存在限制的扩展名不够全、验证扩展名的方式存在问题可直接绕过或截断。\n1. 文件头、content-type验证绕过：早期出现较多，上传文件时，如果直接上传一个非图片文件会被提示不是图片文件，但只要在文件头里加上`GIF89a`后上传，则验证通过。这是因为程序用了如getimagesize()函数等。content-type是在http request请求头内，所以可以被攻击者修改，而早期的一些程序只是单纯的验证了这个值。\n\n##### 文件删除漏洞\n常出现在有文件管理功能的应用上，原理和文件读取差不多，只不过利用的函数不一样，一般因为删除的文件名可以用`../`跳转，或者没有限制当前用户权限。\n\n###### 挖掘经验\n。挖掘漏洞可以先去找相应的功能点，黑盒测试一下能不能删除某个文件，如果删除不了，再去从执行流程追踪提交的文件名参数的传递过程。如果纯白盒挖，也可以去搜索带有变量参数的unlink()，采取回溯变量的方式。\n\n##### 文件操作漏洞防范\n\n###### 通用文件操作防御\n1. 合理的权限管理。\n1. 以加密等方式替代直接将文件名作为下载参数的操作。\n1. 避免目录跳转，禁止参数中携带`..`、`/`、`\\`来跳转目录。\n\n###### 文件上传漏洞防范\n1. 白名单过滤文件扩展名，使用in_array或`===`来对比扩展名。\n1. 保存上传文件时重命名文件，文件名采用时间戳的拼接随机数的MD5值保存方式`md5(time()+rand(1,10000))`\n\n#### 代码执行漏洞\n\n##### 挖掘经验\neval()和assert()函数导致的代码执行漏洞大多是因为载入缓存或者模板以及对变量的处理不严格导致。\npreg_replace()函数代码执行需要存在/e参数，这个函数原本是用来处理字符串的，因此漏洞出现最多的是在对字符串的处理，比如URL、HTML标签以及文章内容等过滤功能。\ncall_user_func()和call_user_func_array()函数的功能是调用函数，多用在框架里面动态调用函数，所以一般比较小的程序不常出现该类代码执行。array_map()函数的作用是调用函数并且除第一个参数外其它参数为数组，通常会写死第一个参数，即调用的参数，类似这三个函数功能的函数还有很多。\n还有一类非常常见的是动态函数的代码执行，如`$_GET($_POST[\"xx\"])`。\n\n##### 代码执行函数\n1. eval和assert函数：用于动态执行函数，所以它们的参数就是PHP代码。\n1. preg_replace函数：对字符串进行正则处理。\n1. 调用函数过滤不严：数十个函数有调用其它函数的功能，如果传入的函数名可控，那么就可以调用意外的函数来执行需要的代码，即存在代码执行漏洞。这些函数有：\n```\ncall_user_func()、call_user_func_array()、array_map()、\nusort()、uasort()、uksort()、array_filter()、\narray_reduce()、array_diff_uassoc()、array_diff_ukey()、\narray_udiff()、array_udiff_assoc()、array_udiff_uassoc()、\narray_intersect_assoc()、array_intersect_uassoc、\narray_uintersect()、array_uintersect_assoc()、\narray_uintersect_uassoc()、array_walk()、array_walk_recursive()、\nxml_set_character_data_handler()、xml_set_default_handler()、\nxml_set_element_handler()、xml_set_end_namespace_decl_handler()、\nxml_set_external_entity_ref_handler()、xml_set_notation_decl_handler()、\nxml_set_processing_instruction_handler()、\nxml_set_start_namespace_decl_handler()、\nxml_set_unparsed_entity_decl_handler()、stream_filter_register()、\nset_error_handler()、register_shutdown_function()、register_tick_function()\n```\n\n##### 动态函数执行\n由于PHP的特性，PHP函数可以直接由字符串拼接，加大了安全控制的难度。PHP动态函数写法为`变量（参数）`，例如：\n```\n<?php\n$_GET['a']($_GET['b']);# poc:?a=assert&b=phpinfo()\n?>\n```\n想要挖掘这种形式的代码执行漏洞，需要找可控的动态函数名。\n\n##### 漏洞防范\n采用参数白名单过滤，这里的白名单并不是说完全固定为参数，可以结合正则表达式来进行白名单限制。\n\n#### 命令执行漏洞\n代码执行漏洞指的是可以执行PHP脚本代码，而命令执行漏洞指的是可以执行系统或应用指令（如CMD命令或bash命令）的漏洞。PHP的命令执行漏洞主要基于一些函数的参数过滤不严导致，可以执行命令的函数有system()、exec()、shell_exec()、passthru()、pcntl_exec()、popen()、proc_open()这七个函数，另外反引号也可以执行命令，不过实际上这种方式也是调用的shell_exec()函数。PHP命令执行继承了WebServer用户权限，一般该权限都可以向Web目录写文件。\n\n##### 挖掘经验\n该漏洞多出现在包含环境包的应用里，一般这类产品会有额外的脚本来协助处理日志及数据库等，web应用会有比较多的点之间使用system()、exec()、shell_exec()、passthru()、pcntl_exec()、popen()、proc_open()等函数执行系统命令来调用这些脚本，可以直接在代码中搜索这几个函数，收获应该会不少。除了这类应用，还有一些调用外部程序的功能也会出命令执行漏洞，由于特征明显，可以直接搜索函数名进行挖掘。\n\n\n###### 命令执行函数\n上述的函数中，sustem()、exec()、shell_exec()、passthru()以及反引号是可以直接传入命令并返回执行结果。\npopen()、proc_open()函数不会直接返回执行结果，而是返回一个文件指针。\n\n###### 反引号命令执行\n反引号执行命令是调用的shell_exec()函数。\n\n##### 漏洞防范\n1. 使用PHP自带的命令防注入函数，包括escapeshellcmd()（过滤整条命令）和escapeshellarg()（保证传入命令执行函数的参数确实是以字符串参数形式存在，不能被注入）。\n2. 对命令执行函数的参数做白名单限制。（通用修复方法）\n\n### 漏洞挖掘与防范（深入篇）\n\n#### 变量覆盖漏洞\n变量覆盖指的是可以用我们自定义的参数值替换程序原有的变量值，通常需要结合程序的其它功能来实现完整攻击。\n该类漏洞大多由函数使用不当导致，常引发漏洞的函数有：extract()函数和parse_str()，import_request_variables()函数则是用于未开启全局变量注册时，调用该函数相当于开启了全局变量注册，在PHP5.4后该函数已经被取消。另外部分应用利用$$的方式注册变量没验证已有变量导致覆盖，这些应用在使用外部传递进来的参数时不是用类似于`$_GET['key']`这样原始的数组变量，而是把里面的key注册成一个变量$key，注册过程中没有验证该变量是否已经存在，所以会导致变量覆盖。\n\n##### 挖掘经验\n由于变量覆盖漏洞通常要结合其他功能代码来实现完整攻击，所以挖掘可用的变量覆盖漏洞还要考虑究竟哪些变量可以被覆盖并且后面有被使用。\n由函数导致的变量覆盖比较好挖掘，寻找参数带有变量的extract()、parse_str()函数，回溯变量是否可控。import_request_variables()则只需要找没有初始化且操作前没有赋值的变量，就可以大胆的提交该变量作为参数，另外只要写在该函数前的变量，不管是否已经初始化都可以覆盖，不过该函数只在PHP4-4.1.0以及5-5.4.0可用。\n关于国内很多程序使用`$$`符号注册变量会导致变量覆盖，可以直接搜索`$$`去挖掘，不过建议挖掘前应通读核心文件。\n\n###### 函数使用不当\n1. extract()（最常见）：将数组中的键值对注册成变量，函数结构如下：\n    ```\nint extract (array &$var_array [, int $extract_type = EXTR_OVERWRITE [, string $prefix = NULL]])\n    ```\n    该函数有3种可能会覆盖已有变量，第一种是第二个参数为EXTR_OVERWRITE，它表示如果有冲突，则覆盖已有变量；第二种是只传入第一个参数，默认为EXTR_OVERWRITE模式；第三种则是第二个参数为EXTR_IF_EXISTS，表示仅在当前符号表中已有同名变量时，覆盖它们的值，其它的都不注册新变量。\n1. parse_str()：解析字符串并注册成变量，在注册变量前不会验证当前变量是否已经存在，所以会直接覆盖掉已有变量。该函数有两个参数：\n    ```\nvoid parse_str(string $str [, array &$arr])\n    ```\n    其中`$str`是必须的，代表要解析注册成变量的字符串，形式为`a=1`，经过函数后会注册变量$a并赋值1。第二个参数$arr是一个数组，当第二个参数存在时，注册的变量会放在这个数组内，但如果该数组内原先就存在相同的键（key），则会覆盖原有键值。\n1. import_request_variables()：作用是把GET、POST、COOKIE的参数注册成变量，用在register_globals被禁止的时候，需要PHP4.1-5.4之间的版本。不过建议不开globals的时候也不要使用该函数，容易造成变量覆盖。\n\n###### $$变量覆盖\n由于双$导致原变量被覆盖，在漏洞代码之前的变量都可以被覆盖。\n\n##### 漏洞防范\n最常见漏洞点是做变量注册以及赋值给变量的时候没有验证变量是否存在，所以推荐使用原始的变量数组，如`$_GET`、`$_POST`，或者在注册变量前一定要验证变量是否存在。\n\n###### 使用原始变量\n由于上述变量覆盖漏洞是在进行变量注册时导致，所以要解决变量覆盖的问题，最直接的方法就是不进行变量注册，直接使用原生的`$_GET`、`$_POST`等数组变量进行操作，如果考虑到程序可读性等原因，需要注册个别变量，可以直接在代码中定义变量，然后再把请求中的值赋值给它。\n\n###### 验证变量存在\n如果一定要用前面几种方式注册变量，可以在注册变量前先判断变量是否存在，如使用extract()函数则可以配置第二个参数为EXTR_SKIP。使用parse_str()函数注册变量钱需要自行通过代码判断变量是否存在。不建议使用import_request_variables()注册全局变量，会导致变量不可控。最重要的，自行申明的变量一定要初始化，不然即便注册在执行代码前也能被覆盖。\n\n#### 逻辑处理漏洞\n此次指程序在业务逻辑上的漏洞。\n\n##### 挖掘经验\n漏洞大多存在于逻辑处理及业务流程中，没有特别明显的关键字用于快速定位，挖掘技巧通常是通读功能点源码，熟悉业务流程，可关注程序是否可重复安装、修改密码处是否可越权修改其它用户密码、找回密码验证码是否可暴力破解以及修改其它用户密码、cookie是否可预测或cookie验证是否可绕过等。\n\n###### 等于与存在判断绕过\n判断函数存在漏洞时，可以逃逸判断函数绕过逻辑。常见存在漏洞的判断函数有：\n1. in_array()：用于判断一个值是否在某个数组列表里，该函数存在一个问题，比较前会自动做类型转换，实现输入参数并不全等于数组任意值时，也可以实现绕过并注入。\n1. is_numeric()：用于判断一个变量是否为数字，检查通过返回true，否则返回false。该函数存在一个问题，当传入参数为hex时则直接通过并返回true，而mysql是可以直接使用hex编码代替字符串名为的。所以这里虽然不能直接注入SQL语句，但存在二次注入和XSS等漏洞隐患，比如当我们提交`<script>alert(1)</script>`的hex编码时，效果相同。如果程序有其它地方调用该值并直接输出，则有可能执行代码触发XSS漏洞。\n1. 双等于和三等于：双等于在判断等于前会先做变量类型转换，三等于则不会，所以双等于存在安全风险。\n\n###### 账户体系中的越权漏洞\n漏洞分为水平越权和垂直越权，但漏洞原理相同，都是账户体系在判断权限时不严格导致存在绕过漏洞。这一类绕过通常发生在cookie验证不严、简单判断用户提交的参数，归根结底，都是因为参数在客户端提交，服务端未严格校验。\n\n###### 未exit或return引发的安全问题\n某些情况下，在经过if条件判断之后，要么继续执行if后面的代码，要么在if流程内退出当前操作，但该退出行为，有不少程序忘记写return、die()、或者exit()，导致程序继续执行。\n\n###### 常见支付漏洞\n最常见支付漏洞有四种，第1、2、3种比较简单，分别是客户端可修改单价、总价和购买数量，服务器端未严格校验导致。部分商城程序是直接由单价和数量计算总价，但并没有验证这两个数字是否小于0。这种形式的支付漏洞，可以通过寻找支付代码并看代码过滤情况挖掘。\n还有一种是以重复发包来利用时间差，少量钱多次购买，如使用手机给腾讯发送购买QQ业务的短信再快速取消。这类漏洞可从判断余额及扣费功能代码处寻找。\n\n##### 漏洞防范\n1. 深入熟悉业务逻辑。\n1. 多熟悉函数的功能和差异。\n\n#### 会话认证漏洞\n\n##### 挖掘经验\n在cookie验证上出现几率较高，通常是没有使用session认证，而是将用户信息直接保存在cookie中，以备程序使用时直接调用。一般这个过程都会有一个统一的函数去调用数据，容易导致SQL注入和越权等漏洞。在挖掘登录认证漏洞时，可以先看程序的登录功能代码，看整个登录过程的业务逻辑有没有可以控制session值或直接绕过密码验证的漏洞；另外需要关注程序验证是否为登录的代码，通俗的说是验证cookie的代码，是不是直接取cookie的值，然后如何判断这个值来验证是否登录。\n\n###### cookie认证安全\ncookie可以保存任何字符串，各个浏览器保存cookie字节数大小不一样，一般不超过4096个字节，通常用于保存登录帐号的标识信息。cookie出现问题较多的是cookie的SQL注入等常见漏洞，以及web应用程序在服务端直接读取cookie值来操作当前用户数据，由于cookie可以伪造，从而导致伪造用户身份登录的漏洞。\n\n##### 漏洞防范\n了解认证的业务逻辑，严格限制输入的异常字符以及避免直接使用客户端提交的内容进行操作。应该结合cookie和session，不能直接从cookie获取参数值进行操作，另外注意设置session时，需要保证客户端不能操作敏感session参数。特别注意敏感数据不要放在cookie中，cookie在浏览器端以及传输过程中都有被窃取的可能性。\n\n### 二次漏洞审计\n\n#### 什么是二次漏洞\n需要先构造好利用代码写入网站保存，在第二次或多次请求后调用攻击代码触发或修改配置触发的漏洞叫做二次漏洞。该漏洞的出现归根结底是开发者在可信数据的逻辑上考虑不全面。\n\n#### 二次漏洞审计技巧\n虽然二次漏洞写入和触发payload很可能不在同一个地方，但还是可以通过找相关关键字去定位的，只是精准度会稍微降低。大多数二次漏洞的逻辑性比一般的漏洞强的多，所以最好还是把全部代码读一遍，更好的了解业务逻辑和全局配置。\n业务逻辑越复杂的地方越容易出现二次漏洞，我们可以重点关注购物车、订单、引用数据、文章编辑、草稿等和数据库交互的地方，以及和文件系统交互的系统配置文件（一般需要管理员权限才能操作）。\n在二次漏洞类型里，可以重点关注SQL注入、XSS。\n\n### 代码审计小技巧\n\n#### 钻GPC等转义的空子\nGPC会自动把提交内容的敏感字符转义导致攻击代码无法执行，但还是存在漏洞：\n\n##### $_SERVER变量\n在PHP5后，用`$_SERVER`取到的`header`字段不受GPC影响，且普通程序员很少会考虑到这些字段。`header`注入里常见的是`user-agent`、`referer`以及`client-ip/x-forward-for`，因为大多数Web应用都会记录访问者的IP以及`referer`等信息，同样的`$_FILES`变量也不受GPC保护。\n\n##### 编码转换问题\n宽字节注入就是一种非常典型的编码转换问题导致绕过GPC的方式。不仅是PHP与MySQL交互过程中会发生编码转换导致问题，PHP自带的编码转换函数也会发生问题，比如mb_convert_encoding()、iconv()，也就是只要发生编码转换就有可能会出现问题。\n\n#### 神奇的字符串\n\n##### 字符处理函数报错信息泄漏\n页面的报错信息通常能泄漏文件绝对路径、代码、变量及函数等信息，页面报错有很多情况，但不是所有情况页面都会出现错误信息，显示错误信息需要在PHP配置文件中打开并设置等级。\n大多数错误提示会显示文件路径，可以获取Web路径。由于用户提交数据在后端大多是以字符串方式处理，所以利用字符串处理函数报错成了必不可少的方法，对于利用参数来报错的方式，给函数传入不同类型的变量是最实用的方式。\n\n##### 字符串截断\n截断利用最多的是在文件操作上面，通常用来利用文件包含漏洞和文件上传漏洞，`%00`即NULL会被GPC和addslashes()过滤掉，所以利用`%00`截断需要GPC关闭以及不被addslashes()函数过滤，另外PHP5.3之后也不能用这种方式截断。\n1. iconv字符编码转换截断：如从UTF-8转换到GBK，部分代码不能被成功转换（chr(128)-chr(255)之间），在利用该函数转码时，遇到不能处理的字符串时后续字符串不会被处理。\n\n#### php://输入输出流\n\n#### PHP代码解析标签\n1. 最标准的`<?php?>`\n1. 脚本标签：`<script language=\"php\"></script>`，可以正常解析PHP代码\n1. 短标签：`<?...?>`，使用短标签需要在php.ini中设置short_open_tag=on，默认为on状态。\n1. asp标签`<%...%>`，在PHP3.0.4后可用，需要在php.ini中设置asp_tags=on，默认为off。\n通常用于绕过`<?php?>`标签过滤以留后门及绕过Web程序或waf写入webshell。\n\n#### fuzz漏洞发现\n\n#### 不严谨的正则表达式\n1. 没有用`^`和`$`限定匹配开始位置\n1. 特殊字符未转义，匹配特殊字符的原字符时需要使用反斜杠`\\`来进行转义，不然`.`则可以用来表示任何字符，存在安全隐患。\n\n#### 十余种MySQL报错注入\n利用报错注入最快拿到注入的数据。\n1. floor():`id=1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)`\n1. extractvalue():`id=1 and (extractvalue(1, concat(0x5c, (select user()))))`\n1. updatexml():`id=1 AND (updatexml(1,concat(0x5e24,(select user()),0x5e24),1))`\n1. GeometryCollection():`id=1 AND GeometryCollection((select * from(select * from(select user())a)b))`\n1. polygon():`id=1 AND polygon((select * from(select * from(select user())a)b))`\n1. multipoint():`id=1 AND multipoint((select * from(select * from(select user())a)b))`\n1. multilinestring():`id=1 AND multilinestring((select * from(select * from(select user())a)b))`\n1. multipolygon():`id=1 AND multipolygon((select * from(select * from(select user())a)b))`\n1. linestring():`id=1 AND linestring((select * from(select * from(select user())a)b))`\n1. exp():`id=1 and EXP(~(select * from(select user())a))`\n\n#### Windows FindFirstFile\n目前大多数程序会对上传文件名加密，这样我们就无法直接得到上传webshell文件路径，但在windows下时，我们只需要知道文件所在目录，利用win特性就可以访问文件，因为win在搜索文件时使用了FindFirstFile这一个winapi函数去一个文件夹（包括子文件夹）去搜索指定文件。\n利用方法很简单，只需要将文件名不可知部分之后的字符用`<`或`>`代替即可，不过要注意，只使用一个`<`或`>`则只能代表一个字符，如果文件名是12345或更长，请求`1<`或`1>`都访问不到文件，需要`1<<`才能访问到，代表继续往下搜索，有点像win的短文件名。\n目前所有PHP版本都可用，PHP并没有在语言层面禁止使用`<>`这些特殊字符，从函数层面来讲，可以利用这个特性的函数有：\n```\ninclude() include_once() require() require_once()\nfopen() ziparchive::open()\ncopy()\nfile_get_contents() parse_ini_file() readfile()\nfile_put_contents()\nmkdir()\ntempnam() touch()\nmove_uploaded_file()\nopendir() readdir() rewinddir() closedir()\n```\n\n#### PHP可变变量\n部分PHP应用在写配置文件或使用preg_replace()函数第二个参数赋值变量时，会用到双引号来代表string类型给变量赋值，存在代码执行漏洞。\n```\n<?php\n$a=\"${@phpinfo()}\";\n?>\n```\n注意，上述代码中的`@`是必须存在的，不然代码无法执行，但除了该符号外还有其它写法，只要不影响PHP规范就可以执行，举例：\n1. 花括号内第一个字符为空格：`$a = \"${ phpinfo()}\";`\n1. 花括号内第一个字符为TAB：`$a = \"${  phpinfo()}\";`\n1. 花括号内第一个字符为注释符：`$a = \"${/**/phpinfo()}\";`\n1. 花括号内第一个字符为回车换行符：`$a = \"${\n  phpinfo()}\";`\n1. 花括号内第一个字符为加号：`$a = \"${+phpinfo()}\";`\n1. 花括号内第一个字符为减号：`$a = \"${-phpinfo()}\";`\n1. 花括号内第一个字符为感叹号：`$a = \"${!phpinfo()}\";`\n除此之外还有一些如`~`、`\\`等。\n\n## PHP安全编程规范\n\n### 参数的安全过滤\n\n#### 第三方过滤函数与类\n目前大多数程序都有一个统一的参数过滤入口，但对于特定场景和漏洞就不够好用。所以除了总入口，在具体功能点也需要进行过滤。\n\n#### 内置过滤函数\n1. SQL注入过滤函数：有addslashes()、mysql_real_escape_string()以及mysql_escape_string()，作用都是给字符串添加反斜杠`\\`来转义掉单引号、双引号、反斜杠以及空字符NULL。addslashes()和mysql_escape_string()都是直接在敏感字符串前加反斜杠，可能会存在宽字节注入绕过的问题，而mysql_real_escape_string()会考虑当前连接数据库的字符集编码，更加安全。\n1. XSS过滤函数：有htmlspecialchars()和strip_tags()，功能不同，htmlspecialchars作用是将字符串中的特殊字符转换成HTML实体编码，能够干掉大多数的XSS攻击。strip_tags则是用来去掉HTML及PHP标记。\n1. 命令执行过滤函数：有escapeshellcmd()和escapeshellarg()两个函数，escapeshellcmd过滤的字符为下方代码框所示，win下过滤方式则是在这些字符前面加了`^`符号，linux下则是在这些字符前加了反斜杠。escapeshellarg函数过滤较简单，给所有参数加上一对双引号，强制为字符串。\n    ```\n    &,;,`,|,*,?,~,<,>,^,(,),[,],{,},$,\\,\\x0A,\\xFF,% 以及单双引号\n    ```\n\n### 使用安全的加密算法\n\n1. 对称加密：算法安全性比较高，数据的实际安全性取决于密钥的管理。所以不建议使用对称加密对用户密码进行加密存储。\n1. 非对称加密：安全性比对称加密更好。\n1. 单向加密：不可逆算法，常见如MD系列和sha1，通常用于保存密码和做数字签名，但存在碰撞的问题。\n\n### 业务功能安全设计\n\n#### 验证码\n\n##### 验证码绕过\n1. 不刷新直接绕过：后端接收一次请求后并没有主动刷新验证码，将验证码和session绑定在一起，为了保证验证码正常使用，会把验证码明文或加密后放在Cookie或POST数据包里，所以每次只要同一个数据包里的两个验证码对应即可绕过。（重复发包利用？）\n1. 暴力破解：验证码能够被爆破，主要是程序没有设置验证码错误次数和超时设定，导致能够不断尝试。\n1. 机器识别：利用机器识别验证码。\n1. 打码平台：人工打码绕过。\n\n###### 对策\n1. 设置验证码错误次数（最重要）。\n1. 不把验证码放在HTML页面或cookie中。\n1. 验证码设置只能请求一次，请求一次后不管错误与否都在后端程序强制刷新。\n1. 短信或邮件验证码必须要6位以上字母和数字混合，图片或语音验证码需要加强混淆干扰。（短信验证码这条似乎在当前不适用，多数厂商选择限制短时间同IP发包等，但不增加验证码复杂度）\n1. 验证码要动态生成，不能统一生成多次调用。\n\n##### 验证码资源滥用\n利用大量网站短信验证码未限制获取验证码次数和时间间隔的接口，实现短信/邮箱轰炸。防护比较简单，限制单个手机号在一个时间段内请求接收短信的次数，或限制某一IP在一个时间段内请求接收短信的次数。\n\n#### 用户登录\n\n##### 撞库登录\n指登录口没有做登录次数限制，导致可以使用不同的用户及密码不断进行登录尝试，遍历用户密码。撞库漏洞情况有：\n1. 用户名和密码错误次数都无限制。\n1. 单时间段内用户密码错误次数限制。（可以使用单密码和用户名列表撞库）\n1. 单时间段内IP登录错误次数限制。（存在误杀内网用户的可能）\n比较好的解决方案是使用登录验证码和多因素认证。\n\n##### API登录\n免重新登录跳转处存在漏洞，如修改用户参数实现任意登录。对于这种漏洞注意以下安全点：\n1. 登录密钥（clientkey）需要不可预测且不固定，生成key的算法中加入随机字符。\n1. API接口禁止搜索引擎收录。\n1. 登录密钥当次绑定当前主机，换机器不可用，防止木马和嗅探。\n\n#### 用户注册\n1. 设计验证码。\n1. 采集用户机器唯一识别码，拦截短时间内多次注册。\n1. 根据帐号格式自学习识别垃圾帐号。\n1. 防止SQL注入漏洞与XSS漏洞（常见）。\n\n#### 密码找回\n1. 输入用户名/邮箱/手机阶段：抓包修改手机/邮箱参数。\n1. 填写验证码和新密码阶段：\n    * 验证凭证简单，可以被暴力破解。\n    * 验证凭证算法简单，凭证可以被预测。\n    * 验证凭证直接保存在源码里。\n1. 发送新密码阶段：\n凭证未绑定用户：请求发送至邮箱的找回密码链接时，后端根据uid和key对应判断该链接有效，但将新密码提交到服务器时，服务器端没有判断当前key是否和uid或邮箱匹配，直接修改掉uid或邮箱指定的用户密码。这样只要拦截修改密码的请求包，篡改用户参数即可。所以安全风险点应该注意的有：\n    * 接收验证码的邮箱和手机号不可由用户控制，应直接从数据库读取。\n    * 加强验证凭证复杂度，防止被暴力破解。\n    * 限制验证凭证错误次数，单用户在一定时间内验证码错误一定次数，强制等待一段时间。\n    * 验证凭证设置失效时间。\n    * 验证凭证不要保存在页面。\n    * 输入用户邮箱或ID、手机号取验证凭证的地方需要设置验证码防止短信炸弹和批量找回等。\n    * 验证凭证跟用户名、用户ID、用户邮箱绑定，找回密码时验证当前凭证是否是当前用户的。\n\n#### 资料查看和修改\n这里主要介绍的是越权漏洞的利用。\n1. 未验证用户权限：直接修改当前资源ID即可访问该资源，没有验证当前资源是否属于当前用户。\n1. 未验证当前登录用户：虽然程序绑定了用户ID和资源ID，但该用户ID是访问资源时直接从cookie或post、get参数里获取，所以可以通过修改成另一用户ID，利用其权限操作资源。\n上述漏洞较多出现在用户资料修改，及用户资料查看。\n防御思路有：\n* 用户资源ID（订单ID、地址ID等）绑定到用户，只允许有权限的用户查看。\n* 当前用户信息存储到session，不放在request中，避免攻击者修改。\n\n#### 投票/积分/抽奖\n共同点：`单个用户次数存在限制`，该限制存在很多绕过方式。\n通常有几种利用方法：\n1. cookie或POST请求正文绕过。修改cookie或post请求数据产生绕过。\n1. 基于IP验证。看程序获取IP的方式，如果是client-ip或x_forward_for获取IP，可直接伪造IP绕过。\n1. 基于用户认证。利用批量注册刷票，或在投票时随意修改POST包或cookie里的当前uid、用户名等查看是否能够绕过限制。\n从上述利用手段可以看到主要三个点是IP、登录用户、cookie，可用性比较高的防御手段如下：\n1. 机器识别码验证。\n1. 操作需要登录，当前用户信息从session读取。\n\n#### 充值支付\n主要有四种情况：客户端可修改单价、总价和购买数量以及利用时间差多次购买。\n主要应对手法是：\n1. 保证数据可信，商品单价和总价不可从客户端获取。\n1. 购买数量不能小于等于0。\n1. 账户支付锁定机制，当一个支付操作开始就应该立马锁定当前用户，不能同时两个后端请求对余额进行操作。\n\n#### 私信及反馈\n除去特殊情况下可以滤去的SQL注入或命令执行等少见漏洞外，最常见的就是XSS漏洞以及越权漏洞。\n\n#### 远程地址访问\n访问远程地址获取资源的功能可能会被利用（如填入内网地址）\n利用限制填写来防御该类漏洞，但大部分厂商修复时不会考虑到短地址的问题，修复后仍然可以通过生成短链接的方式利用。\n\n#### 文件管理\n本身就是一个高危功能，权限管理不当会导致被攻击者利用写入webshell。\n为了保证安全，在满足业务需求的情况下，设计时应遵循以下几点：\n1. 禁止写入脚本可在服务器端执行的文件：如服务器可解析PHP，那么此次就需要限制不能操作PHP扩展名的文件和PHP标签的代码。\n1. 限制文件管理功能操作的目录：限制文件管理功能只能操作固定目录，目录不能从客户端提交，在代码中设置好即可，如果实在需要进行目录跳转的话，一定要禁止提交`../`以及`\\..`避免越权操作其它目录。\n1. 限制文件管理功能访问权限：虽然文件管理是正常功能，但存在一点后门的性质，所以对该功能的访问权限一定要严格控制。\n1. 禁止上传特殊字符文件名的文件：大多数应用会对上传文件进行展示，特别是网盘类应用，注意对上传文件名进行检查，禁止文件名中有尖括号、单双引号等特殊字符，避免攻击者用文件名进行XSS攻击。\n\n#### 数据库管理\n跟文件管理一样，也是高位功能，如果启动数据库服务的系统用户以及数据库用户的权限都够大，完全可以利用该功能直接执行系统命令及操作服务器上的文件。\n1. 限制可以操作的数据库表，要么在代码内写死只能操作哪些表（如备份），如果是执行SQL语句的方式可以另建一个mysql用户，限制可操作的表和字段。\n1. 限制备份到服务器上的文件名，需要随机生成且长度不低于16位，扩展名不能自定义，防止攻击者利用该功能导出webshell或猜解文件名直接下载。\n\n#### 命令/代码执行\n命令执行和代码执行功能通常都在系统后台，相比来说，命令执行的功能使用更多，代码执行功能在特殊应用上才会存在。设计该类功能时应该注意以下几点：\n1. 严格控制该功能访问权限，建议高权限才能访问。\n1. 在满足业务需求的情况下，可以设置命令白名单，可以使用escapeshellcmd()以及escapeshellarg()函数进行过滤，命令直接写死在代码中更好。\n1. 给命令及代码执行功能设置独立密码。\n1. 代码执行功能限制脚本可访问的路径。\n1. 在满足需求的情况下限制当前执行命令的系统权限。\n\n#### 文件/数据库备份\n是非常常见且非常容易出现安全问题的功能。常见问题有：\n1. 未授权访问和越权访问：未授权访问体现在这个备份功能直接在不登录或登录验证存在漏洞的情况下可以直接使用，以及存在CSRF漏洞可以直接劫持管理员帐号进行备份。\n1. 备份文件名可预测：攻击者可以利用枚举的方式扫描备份包。\n1. 生成的文件可利用web中间件解析漏洞执行代码\n如何设计备份功能：\n1. 进行权限控制，只有高权限可以使用。\n1. 文件名随机生成，不可预测。\n\n#### API\n因为爬虫无法抓取APP中的API接口，所以接口的SQL注入等漏洞相对较多，目前最多的问题是未授权访问以及数据遍历漏洞。因此设计一个安全的API需要从以下几点考虑：\n1. 访问权限控制：必要时加入账户体系，严格控制数据调用权限，比如当前用户必须在登录情况下，接口参数中传入自己登录成功的凭证才能调用这个用户的数据。另外不需要账户体系时也要注意加入不可暴力破解的访问密钥进行权限验证。\n1. 防止敏感信息泄漏：没必要输出的信息应该注意禁止输出。\n1. SQL注入等常规漏洞：注意代码安全，防止SQL注入、代码执行等漏洞的产生。\n\n### 应用安全体系建设\n\n1. 用户密码安全策略\n1. 前后台用户分表：同表的情况下可能存在越权修改管理员信息等情况。\n1. 后台地址隐藏\n1. 密码加密存储方式\n1. 登录限制\n1. API站库分离\n1. 慎用第三方服务\n1. 严格的权限控制\n1. 敏感操作多因素验证\n1. 应用自身的安全中心\n","source":"_posts/Notes_代码审计-企业级web代码安全结构.md","raw":"---\ntitle: 代码审计 企业级web代码安全结构\ntoc: true\ndate: 2021-07-17 10:05:28\ntags: 代码审计\ncategories: [读书笔记]\n---\n\n苦于代码审计能力偏弱，调研一番发现这本书或许有所帮助。\n\n## 第一部分 代码审计前的准备\n\n### 代码审计环境搭建\n1. wamp/wnmp: WAMP（Windows下的Apache+Mysql/MariaDB+Perl/PHP/Python），WNMP（Windows下的Nginx+Mysql+PHP）\n1. lamp/lnmp：将上述环境安装在Linux中。\n\n#### PHP_INI_*常量的定义\n1. PHP_INI_USER：该配置选项可在用户的PHP脚本或Win注册表中设置。\n1. PHP_INI_PERDIR：该配置选项可在php.ini. .htaccess或httpd.conf中设置。\n1. PHP_INI_SYSTEM：该配置选项可在任何地方设置。\n1. PHP_INI_ALL：该配置选项可在任何地方设置。\n1. php.ini only：该配置选项可仅可在php.ini中配置。\n\n#### 会影响PHP脚本安全的配置列表及核心配置选项\n1. register_globals(全局变量注册开关)：该选项在on的情况下，会将用户GET/POST等方式提交上来的参数注册成全局变量并初始化值为参数对应的值，使提交参数可以直接在脚本中使用。register_globals在PHP版本小于等于4.2.3时设置为PHP_INI_ALL，从PHP5.3.0起被废弃，在PHP5.4.0中被移除。\n    代码实例：(实验环境php5.2.17,在php.ini中添加register_globals = On)\n    ```\n<?php\nif($user=='admin'){\n  echo 'true';\n}\n    ```\n1. allow_url_include(是否允许包含远程文件)：在该配置为on的情况下，可以直接包含远程文件，当存在include(`$var`)且$var可控的情况下，可以直接控制$var变量来执行PHP代码。allow_url_include在PHP5.2.0后默认设置为off，配置范围为PHP_INI_ALL。与之类似的配置有allow_url_fopen，配置是否允许打开远程文件，但安全隐患没有前者大。\n    代码实例：(实验环境php5.2.17，payload：a=http://127.0.0.1:80/test/info.txt ，info.txt内容为`<?php phpinfo();?>`)\n    ```\n<?php\ninclude $_GET['a'];\n    ```\n1. magic_quotes_gpc（魔术引号自动过滤）：该参数在不存在编码或其他特殊绕过的情况下，可以使很多漏洞无法利用。当该参数被开启时（选项设置为on），会自动在GET、POST、COOKIE变量中的单引号（‘）、双引号（“）、反斜杠（\\）及空字符（NULL）的前面加上反斜杠（\\），但在PHP5中magic_quotes_gps并不会过滤$_SERVER变量，导致很多类似client-ip、referer一类的漏洞能够利用。PHP5.3之后不推荐使用该参数，PHP5.4之后被取消。在PHP版本小于4.2.3时，配置范围是PHP_INI_ALL;在PHP版本大于4.2.3时，是PHP_INI_PERDIR。\n    代码实例：(测试?a=1')\n    ```\n<?php\necho $_GET['a'];\n    ```\n1. magic_quotes_runtime(魔术引号自动过滤)：过滤方式同样为加反斜杠，但和magic_quotes_gpc的处理对象不一样。magic_quotes_runtime只对从数据库或文件中获取的数据进行过滤，magic_quotes_runtime在PHP5.4之后被取消，配置范围是PHP_INI_ALL。但该参数仅对部分函数有作用，某些情况下可以被绕过。\n    代码实例：\n    ```\n#1.txt\n1'2\"3\\4\n\n<?php\nini_set(\"magic_quotes_runtime\",\"1\");\necho file_get_contents(\"1.txt\");\n    ```\n1. magic_quotes_sybase(魔术引号自动过滤)：用于自动过滤特殊字符，当设置为on时，会覆盖magic_quotes_gpc=on的配置（使gpc=on失效）。与gpc的共同点是处理对象一致（GET、POST、Cookie)，但该参数仅转义空字符以及把单引号变成双引号，使用率比gpc低。配置范围为PHP_INI_ALL，在PHP5.4.0中移除。（代码实例与gpc相同）\n1. safe_mode（安全模式）：是PHP内嵌的一种安全机制，配置范围为PHP_INI_SYSTEM，PHP5.4之后被取消（取消原因是，PHP开发者认为在PHP语言机制上试图解决安全问题是一件不合适的事情，虽然safe_mode在一定程度上对共享主机有效，但同时也带来了不少误报，与其在PHP上解决权限安全问题，不如使用linux默认的权限限制机制或其它层级的解决办法）。该参数效果为，所有文件操作函数都会受到限制，非文件所有者不能对该文件进行操作（如include()），如果有一些脚本文件放在非Web服务启动用户所有的目录下，需要利用include等函数进行加载，可以使用safe_mode_include_dir来配置可包含的路径。此外，通过函数popen()、system()以及exec()等函数执行命令或程序会提示错误，如果需要使用外部脚本，可以集中存放，然后用safe_node_exec_dir来指向存放目录。\n    代码实例：\n    ```\n# echo `whoami`; 执行命令失败的回显提示\nWarning: shell_exec() [function, shell_exec]: Cannot execute using backquotes in Safe Mode ...\n    ```\n1. open_basedir（PHP可访问目录）：用于限制PHP只能访问哪些目录，通常只需要设置Web文件目录即可，如果需要加载外部脚本，也需要把所在路径加入该指令中，多个目录以分号分割。需要注意，指定限制实际上是前缀而不是目录名，如配置open_basedir=/www/a，那么/www/a和/www/ab都可以访问，所以为了避免该现象发生，需要用斜线结束路径名，如/www/a/。当参数激活，执行脚本访问其它文件时都需要验证文件路径，所以会影响执行效率。该指令配置范围在PHP<5.2.3时是PHP_INI_SYSTEM，在PHP>=5.2.3时是PHP_INI_ALL。\n1. disable_functions(禁用函数)：使用该指令来禁止敏感函数的使用，使用本指令时，需把dl()函数也添加进禁用列表，否则攻击者可以利用dl()函数价值自定义的PHP扩展突破该指令的限制。指令范围为php.ini，配置禁用函数时使用逗号分割函数名。\n1. display_errors和error_reporting错误显示：display_errors用于表明是否显示PHP脚本内部错误，生产环境中建议关闭，在开启时，可以通过设置error_reporting来设置错误显示的级别。配置范围均为PHP_INI_ALL。\n\n### 审计辅助与漏洞验证工具\n\n#### 代码编辑器\n1. Notepad++\n1. UltraEdit（文件对比）\n1. Zend Studio（PHP集成开发环境）\n\n#### 代码审计工具\n1. Seay源代码审计系统\n1. RIPS\n\n#### 漏洞验证辅助\n1. Burp\n1. 浏览器扩展：Hackbar, Firebug, Live HTTP Headers, Modify\n1. 编码转换及加解密工具：Seay代码审计系统自带的编码功能，Burp自带的decoder，超级加解密转换工具\n1. 正则调试工具：Seay自带的正则调试功能，灵者正则调试\n1. SQL执行监控工具：Seay mysql监控\n\n## 漏洞发现与防范\n\n### 通用代码审计思路\n\n#### 敏感函数回溯参数过程\n根据敏感函数来逆向追踪参数的传递过程，使用较多，因为大多数漏洞都是由于函数使用不当造成的。非函数使用不当的漏洞，如SQL注入，也有一些特征，如Select、Incert等，结合From和Where等关键字判断是否为一条SQL语句，通过对字符串的识别分析，就能判断该SQL语句参数有没有使用单引号过滤，或者根据经验判断。如HTTP头里面的HTTP_CLIENT_IP和HTTP_X_FORWORDFOR等获取到的IP地址常直接拼接到SQL语句中，且由于它们是存在于`$_SERVER`变量中不受GPC的影响，那么就可以查找这两个参数关键字快速寻找漏洞。\n该方法的优点是定向挖掘、高效、高质量，缺点是对整体框架了解不够深入，定位利用点会花费时间，另外无法覆盖逻辑漏洞。\n\n#### 通读全文代码\n在企业中做自身产品代码审计时，我们需要了解整个应用的业务逻辑以获取更多漏洞。\n通读全文代码时，首先要看程序的大体代码结构，如主目录有哪些文件，模块目录有哪些文件，插件目录有哪些文件，还要注意文件大小、创建时间。根据文件命名可大致了解该程序实现哪些功能，核心文件是哪些。\n在看程序目录结构时，要特别注意以下几个文件：\n1. `函数集文件`，通常命名中包含functions或者common等关键字，这些文件内是一些公共函数，提供给其它文件统一调用，所以大多数文件会在文件头包含其它文件。寻找这些文件的一个技巧就是打开index.php或一些功能性文件，在头部一般都能找到。\n1. `配置文件`，通常命名中包含config关键字，包括Web程序运行必须的功能性配置选项及数据库等配置信息，从该文件中可以了解程序的小部分功能，另外看这个文件时注意观察配置文件中参数值是用单引号还是双引号，如果是双引号，则很可能存在代码执行漏洞。（如利用PHP可变变量（$$a）的特性执行代码，ref：https://www.cnblogs.com/Cl0ud/p/12336834.html）\n1. `安全过滤文件`，该文件关系到挖掘到的可疑点能否利用，通常命名中有filter、safe、check等关键字。这类文件主要作用是针对参数进行过滤，比较常见的是针对SQL注入和XSS过滤，还有文件路径、执行的系统命令的参数，其它相对少见。而目前大多数应用会在程序入口循环对所有参数使用addslashes()进行过滤。\n1. `index文件`，是一个程序的入口文件，通过阅读该文件可大致了解整个程序的架构、运行流程、包含的文件，以及核心文件有哪些。而不同的目录的index文件也有不同的实现方式，最好先将核心目录的index文件都简单读一遍。\n学习代码审计前期建议先下载一些小应用来读，积累经验后，再去读开源框架。\n\n#### 根据功能点定向审计\n先简单黑盒测试一下，再通过发现的容易出问题的功能去阅读该功能点的源码，提高审计速度。\n1. 文件上传功能：任意上传、SQL注入\n1. 文件管理功能：任意文件操作、XSS漏洞\n1. 登录认证功能：任意用户登录\n1. 找回密码功能：验证码爆破、验证凭证算法\n\n### 漏洞挖掘与防范（基础篇）\n\n#### SQL注入\n\n##### 挖掘经验\n常出现在登录页面、获取HTTP头（user-agent/client-ip等）、订单处理等业务相对复杂的地方，登录页面注入大多出现在HTTP头的client-ip和x-forward-for，用于记录登录IP地址。另外在订单系统内，由于订单涉及购物车等多个交互，经常会发生二次注入，通读代码时可着重关注这几个地方。\n1. 普通注入：指最容易利用的SQL注入漏洞，有int型和string型，在string型注入中需要使用单或双引号闭合。数据库操作存在一些关键字，如select from、mysql_connect、mysql_query、mysql_fetch_row等，查询方式还有update、incert、delete，只需要在白盒审计中查找这些关键字即可定向挖掘SQL注入。\n1. 编码注入：程序在进行一些操作前经常会进行编码处理，而做编码处理的函数可能会存在问题。通过输入转码函数不兼容的特殊字符，即可导致输出字符变成有害数据，在SQL注入里，最常见的编码注入是MySQL宽字节以及urldecode/rawurldecode函数导致的。\n    * 宽字节注入：使用PHP连接MySQL的时候，当设置`set character_set_client=gbk`时会导致一个编码转换的注入问题，当存在该漏洞时，注入参数里带入`%df%27`，即可把程序中过滤的`\\(%5c)`吃掉。而通常都不是直接设置`set character_set_client=gbk`，而是设置`SET NAMES ‘gbk’`，同样存在漏洞。官方建议是使用mysql_set_charset来设置编码，只要在后面合理的使用mysql_real_escape_string还是可以解决该漏洞的。对宽字节注入的挖掘方法比较简单，搜索`SET NAMES`、`character_set_client=gbk`、`mysql_set_charset('gbk')`。该漏洞的解决方法如以下三种，比较推荐一和三：\n        * 在执行查询前先执行`SET NAMES 'gbk', character_set_client=binary`\n        * 使用mysql_set_charset('gbk')设置编码，然后使用mysql_real_escape_string()过滤。\n        * 使用pdo方式，在PHP5.3.6及以下版本中需要设置`setAttribute(PDO::ATTR_EMULATE_PREPARES,false);`，来禁用prepared statements的仿真效果。\n    * 二次urlencode注入：只要字符被进行转换就有可能产生漏洞。现在的Web程序大多会进行参数过滤，通常使用addslashes()、mysql_real_escape_string()、mysql_escape_string()函数或者开启GPC的方式来防止注入，也就是给单引号、双引号、反斜杠（\\）和NULL加上反斜杠转义。如果某处使用了urldecode或者rawurldecode函数，则会导致二次加码生成单引号而引发注入。该漏洞可以通过搜索urldecode和rawurldecode函数来挖掘。\n\n##### 漏洞防范\n1. gpc/runtime魔术引号：通常数据污染有两种方式，一种是应用被动接收参数，另一种是主动获取参数。利用magic_quotes_gpc和magic_quotes_runtime可以防止部分SQL注入（对int型注入没有太大作用）\n1. 过滤函数和类：有两种使用场景，一种是程序入口统一过滤，框架程序使用这种方式比较多，另一种是在程序进行SQL语句运行前使用，除了PHP内置的一些过滤单引号等函数外，还有一些开源类过滤union、select等关键字。\n    * addslashes函数：过滤单引号、双引号、反斜杠以及空字符NULL，大多被用在程序入口，判断如果没有开启GPC则使用该函数进行过滤。不过它的参数必须是string类，所以可能会存在通过数组绕过的漏洞。\n    * mysql_[real_]escape_string函数：这两个函数都是对字符串进行过滤，只存在于大于PHP4.03的版本，[`\\x00`]、[`\\n`]、[`\\r`]、[`\\`]、[`'`]、[`\"`]、[`\\xla`]会受到影响。两个函数唯一不一样的地方在于mysql_real_escape_string接受的是一个连接句柄并根据当前字符集转移字符串，推荐使用。\n    * intval等字符转换：上述方式在int类型注入时效果不会，比如可以通过报错或盲注等方式来绕过，这时候就要用到intval函数了。intval的作用是将变量转换成int类型，这里举例intval是要表达一种利用参数类型白名单的方式来防止漏洞，对应的还有很多如floatval等。\n1. PDO prepare预编译：通过预编译的方式来处理数据库查询。当PHP版本<5.3.6时，使用PHP本地模拟prepare再把完整的SQL语句发送给MySQL服务器，且使用set names 'gbk'时，仍然存在宽字节SQL注入，因为PHP和MySQL编码不一致。正确的写法应该是使用ATTR_EMULATE_PREPARES来禁用PHP本地模拟prepare。\n\n#### XSS漏洞\n\n##### 挖掘经验\n挖掘XSS漏洞关键在于寻找没有被过滤的参数，且这些参数传入至输出函数。常用输出函数列表如下：`print、print_r、echo、printf、sprintf、die、var_dump、var_export`，寻找带有变量的这些函数即可。另外在代码审计中，浏览器环境对XSS漏洞利用影响非常大。通读代码时可多关注各处设置资料、文章发表、留言等富文本区域，这种地方存在的XSS通常是存储型的。\n\n##### 反射型 XSS\n直接通过外部输入在浏览器端输出触发，该种漏洞比较容易通过扫描器黑盒审计发现。白盒审计中，只需要寻找带有参数的输出参数，根据输出参数对输出内容回溯输入参数，观察有没有经过过滤。\n\n##### 存储型XSS\n把利用代码保存在数据库或文件中，当Web程序读取利用代码并输出在页面上时执行利用代码。比反射型容易利用，较为隐蔽且不用考虑绕过浏览器过滤。挖掘时也是需要寻找未过滤的输入点和未过滤的输出函数（可能完全不在同一个业务流中），可以根据当前代码功能去猜，或追寻数据有在哪里被操作，使用表名、字段名去代码里搜索。\n\n##### 漏洞防范\n1. 特殊字符HTML实体转码。\n1. 标签事件属性黑白名单。\n\n#### CSRF漏洞\n\n##### 挖掘经验\n主要用于越权操作，所以漏洞会出现在有权限控制的地方。黑盒挖洞可以先搭建环境，打开几个有非静态操作的页面，抓包看看有没有token，没有token就不带referer直接请求该页面，返回数据一样的话，可能存在CSRF漏洞。白盒审计，通读代码时看看被大量引用的基础文件（核心文件）、你比较关心的功能点代码内有没有验证token和referer相关的代码，或者直接搜索token关键字。\n\n##### 漏洞防范\n1. 增加token/referer验证避免img标签请求的水坑攻击。\n2. 增加验证码。（比较麻烦，更适用于敏感操作页面）\n\n### 漏洞挖掘与防范（进阶篇）\n\n#### 文件操作漏洞\n\n##### 文件包含漏洞\n文件包涵函数有include()、include_once()（前两个在包含文件时即使遇到错误，下面的代码仍然执行）、require()、require_once()（这两个在包含文件时遇到错误会报错退出程序）。\n\n###### 挖掘经验\n文件包含漏洞大多出现在模块加载、模板加载以及cache调用的地方。在挖掘漏洞时可以跟踪程序运行流程，看模块加载包含的文件是否可控等，另一个是直接搜索上文四个函数来回溯寻找可控变量。一般该类漏洞都是本地文件包含，大多需要截断。\n\n###### 本地文件包含\n本地文件包含（local file include，LFI），大多出现在模块加载、模板加载和cache调用，有多种利用方式，如上传一个允许上传的文件格式的文件再包含以执行代码，包含PHP上传的临时文件，在请求URL或ua里面加入要执行的代码，WebServer记录到日志后再包含WebServer的日志，还有像Linux下可以包含/proc/self/environ文件。\n\n###### 远程文件包含\n远程文件包含（remote file include, RFI），需要设置allow_url_include = On，相比于本地包含来说更容易利用，但出现频率不高。\n\n###### 文件包含截断\n1. 使用`%00`截断，最古老的方法，受限于GPC和addslashes等函数的过滤，另外PHP5.3之后的版本已经全面修复，不能使用该方法了。\n1. 使用多个英文句号`.`和反斜杠`/`来阶段，不受GPC限制，但同样在PHP5.3之后被修复。\n1. 远程文件包含时利用问号`？`来伪截断，不受GPC和PHP版本限制，只要能返回代码给包含函数就能执行。在HTTP协议里，访问http://remotehost/i.txt和访问http://remotehost/i.txt?.php 返回的结果是一样的，因为WebServer把问号之后的内容当成请求参数，而txt不在WebServer里解析，参数对访问i.txt返回的内容不影响，实现伪截断。\n\n##### 文件读取（下载）漏洞\n\n###### 挖掘经验\n文件读取漏洞比较容易寻找，一种方式是可以先黑盒看功能点对应的文件，再去读文件源码。另一种是搜索文件读取的函数（`file_get_contents()、highlight_file()、fopen()、readfile()、fread()、fgetss()、fgets()、parse_ini_file()、show_source()、file()`），看有无可直接或间接控制的变量，除了正常读取文件的函数之外，另外一些其他功能的函数也可以用于读取文件，如include()等。\n\n##### 文件上传漏洞\n\n###### 挖掘经验\n挖掘简单，上传点常调用同一个上传类，上传函数又只有move_uploaded_file()这一个，所以最快方法就是直接搜索该函数，再去看调用的代码存不存在未限制上传格式或者可以绕过，其中问题较多的是黑名单限制文件格式以及未更改文件名的方式，在未改名的情况下，在Apache利用其向前寻找解析格式和IIS6的分号解析bug都可以执行代码。\n1. 未过滤或本地过滤：共同点是都未在服务器端过滤。\n1. 黑名单扩展名过滤：出现较少，存在限制的扩展名不够全、验证扩展名的方式存在问题可直接绕过或截断。\n1. 文件头、content-type验证绕过：早期出现较多，上传文件时，如果直接上传一个非图片文件会被提示不是图片文件，但只要在文件头里加上`GIF89a`后上传，则验证通过。这是因为程序用了如getimagesize()函数等。content-type是在http request请求头内，所以可以被攻击者修改，而早期的一些程序只是单纯的验证了这个值。\n\n##### 文件删除漏洞\n常出现在有文件管理功能的应用上，原理和文件读取差不多，只不过利用的函数不一样，一般因为删除的文件名可以用`../`跳转，或者没有限制当前用户权限。\n\n###### 挖掘经验\n。挖掘漏洞可以先去找相应的功能点，黑盒测试一下能不能删除某个文件，如果删除不了，再去从执行流程追踪提交的文件名参数的传递过程。如果纯白盒挖，也可以去搜索带有变量参数的unlink()，采取回溯变量的方式。\n\n##### 文件操作漏洞防范\n\n###### 通用文件操作防御\n1. 合理的权限管理。\n1. 以加密等方式替代直接将文件名作为下载参数的操作。\n1. 避免目录跳转，禁止参数中携带`..`、`/`、`\\`来跳转目录。\n\n###### 文件上传漏洞防范\n1. 白名单过滤文件扩展名，使用in_array或`===`来对比扩展名。\n1. 保存上传文件时重命名文件，文件名采用时间戳的拼接随机数的MD5值保存方式`md5(time()+rand(1,10000))`\n\n#### 代码执行漏洞\n\n##### 挖掘经验\neval()和assert()函数导致的代码执行漏洞大多是因为载入缓存或者模板以及对变量的处理不严格导致。\npreg_replace()函数代码执行需要存在/e参数，这个函数原本是用来处理字符串的，因此漏洞出现最多的是在对字符串的处理，比如URL、HTML标签以及文章内容等过滤功能。\ncall_user_func()和call_user_func_array()函数的功能是调用函数，多用在框架里面动态调用函数，所以一般比较小的程序不常出现该类代码执行。array_map()函数的作用是调用函数并且除第一个参数外其它参数为数组，通常会写死第一个参数，即调用的参数，类似这三个函数功能的函数还有很多。\n还有一类非常常见的是动态函数的代码执行，如`$_GET($_POST[\"xx\"])`。\n\n##### 代码执行函数\n1. eval和assert函数：用于动态执行函数，所以它们的参数就是PHP代码。\n1. preg_replace函数：对字符串进行正则处理。\n1. 调用函数过滤不严：数十个函数有调用其它函数的功能，如果传入的函数名可控，那么就可以调用意外的函数来执行需要的代码，即存在代码执行漏洞。这些函数有：\n```\ncall_user_func()、call_user_func_array()、array_map()、\nusort()、uasort()、uksort()、array_filter()、\narray_reduce()、array_diff_uassoc()、array_diff_ukey()、\narray_udiff()、array_udiff_assoc()、array_udiff_uassoc()、\narray_intersect_assoc()、array_intersect_uassoc、\narray_uintersect()、array_uintersect_assoc()、\narray_uintersect_uassoc()、array_walk()、array_walk_recursive()、\nxml_set_character_data_handler()、xml_set_default_handler()、\nxml_set_element_handler()、xml_set_end_namespace_decl_handler()、\nxml_set_external_entity_ref_handler()、xml_set_notation_decl_handler()、\nxml_set_processing_instruction_handler()、\nxml_set_start_namespace_decl_handler()、\nxml_set_unparsed_entity_decl_handler()、stream_filter_register()、\nset_error_handler()、register_shutdown_function()、register_tick_function()\n```\n\n##### 动态函数执行\n由于PHP的特性，PHP函数可以直接由字符串拼接，加大了安全控制的难度。PHP动态函数写法为`变量（参数）`，例如：\n```\n<?php\n$_GET['a']($_GET['b']);# poc:?a=assert&b=phpinfo()\n?>\n```\n想要挖掘这种形式的代码执行漏洞，需要找可控的动态函数名。\n\n##### 漏洞防范\n采用参数白名单过滤，这里的白名单并不是说完全固定为参数，可以结合正则表达式来进行白名单限制。\n\n#### 命令执行漏洞\n代码执行漏洞指的是可以执行PHP脚本代码，而命令执行漏洞指的是可以执行系统或应用指令（如CMD命令或bash命令）的漏洞。PHP的命令执行漏洞主要基于一些函数的参数过滤不严导致，可以执行命令的函数有system()、exec()、shell_exec()、passthru()、pcntl_exec()、popen()、proc_open()这七个函数，另外反引号也可以执行命令，不过实际上这种方式也是调用的shell_exec()函数。PHP命令执行继承了WebServer用户权限，一般该权限都可以向Web目录写文件。\n\n##### 挖掘经验\n该漏洞多出现在包含环境包的应用里，一般这类产品会有额外的脚本来协助处理日志及数据库等，web应用会有比较多的点之间使用system()、exec()、shell_exec()、passthru()、pcntl_exec()、popen()、proc_open()等函数执行系统命令来调用这些脚本，可以直接在代码中搜索这几个函数，收获应该会不少。除了这类应用，还有一些调用外部程序的功能也会出命令执行漏洞，由于特征明显，可以直接搜索函数名进行挖掘。\n\n\n###### 命令执行函数\n上述的函数中，sustem()、exec()、shell_exec()、passthru()以及反引号是可以直接传入命令并返回执行结果。\npopen()、proc_open()函数不会直接返回执行结果，而是返回一个文件指针。\n\n###### 反引号命令执行\n反引号执行命令是调用的shell_exec()函数。\n\n##### 漏洞防范\n1. 使用PHP自带的命令防注入函数，包括escapeshellcmd()（过滤整条命令）和escapeshellarg()（保证传入命令执行函数的参数确实是以字符串参数形式存在，不能被注入）。\n2. 对命令执行函数的参数做白名单限制。（通用修复方法）\n\n### 漏洞挖掘与防范（深入篇）\n\n#### 变量覆盖漏洞\n变量覆盖指的是可以用我们自定义的参数值替换程序原有的变量值，通常需要结合程序的其它功能来实现完整攻击。\n该类漏洞大多由函数使用不当导致，常引发漏洞的函数有：extract()函数和parse_str()，import_request_variables()函数则是用于未开启全局变量注册时，调用该函数相当于开启了全局变量注册，在PHP5.4后该函数已经被取消。另外部分应用利用$$的方式注册变量没验证已有变量导致覆盖，这些应用在使用外部传递进来的参数时不是用类似于`$_GET['key']`这样原始的数组变量，而是把里面的key注册成一个变量$key，注册过程中没有验证该变量是否已经存在，所以会导致变量覆盖。\n\n##### 挖掘经验\n由于变量覆盖漏洞通常要结合其他功能代码来实现完整攻击，所以挖掘可用的变量覆盖漏洞还要考虑究竟哪些变量可以被覆盖并且后面有被使用。\n由函数导致的变量覆盖比较好挖掘，寻找参数带有变量的extract()、parse_str()函数，回溯变量是否可控。import_request_variables()则只需要找没有初始化且操作前没有赋值的变量，就可以大胆的提交该变量作为参数，另外只要写在该函数前的变量，不管是否已经初始化都可以覆盖，不过该函数只在PHP4-4.1.0以及5-5.4.0可用。\n关于国内很多程序使用`$$`符号注册变量会导致变量覆盖，可以直接搜索`$$`去挖掘，不过建议挖掘前应通读核心文件。\n\n###### 函数使用不当\n1. extract()（最常见）：将数组中的键值对注册成变量，函数结构如下：\n    ```\nint extract (array &$var_array [, int $extract_type = EXTR_OVERWRITE [, string $prefix = NULL]])\n    ```\n    该函数有3种可能会覆盖已有变量，第一种是第二个参数为EXTR_OVERWRITE，它表示如果有冲突，则覆盖已有变量；第二种是只传入第一个参数，默认为EXTR_OVERWRITE模式；第三种则是第二个参数为EXTR_IF_EXISTS，表示仅在当前符号表中已有同名变量时，覆盖它们的值，其它的都不注册新变量。\n1. parse_str()：解析字符串并注册成变量，在注册变量前不会验证当前变量是否已经存在，所以会直接覆盖掉已有变量。该函数有两个参数：\n    ```\nvoid parse_str(string $str [, array &$arr])\n    ```\n    其中`$str`是必须的，代表要解析注册成变量的字符串，形式为`a=1`，经过函数后会注册变量$a并赋值1。第二个参数$arr是一个数组，当第二个参数存在时，注册的变量会放在这个数组内，但如果该数组内原先就存在相同的键（key），则会覆盖原有键值。\n1. import_request_variables()：作用是把GET、POST、COOKIE的参数注册成变量，用在register_globals被禁止的时候，需要PHP4.1-5.4之间的版本。不过建议不开globals的时候也不要使用该函数，容易造成变量覆盖。\n\n###### $$变量覆盖\n由于双$导致原变量被覆盖，在漏洞代码之前的变量都可以被覆盖。\n\n##### 漏洞防范\n最常见漏洞点是做变量注册以及赋值给变量的时候没有验证变量是否存在，所以推荐使用原始的变量数组，如`$_GET`、`$_POST`，或者在注册变量前一定要验证变量是否存在。\n\n###### 使用原始变量\n由于上述变量覆盖漏洞是在进行变量注册时导致，所以要解决变量覆盖的问题，最直接的方法就是不进行变量注册，直接使用原生的`$_GET`、`$_POST`等数组变量进行操作，如果考虑到程序可读性等原因，需要注册个别变量，可以直接在代码中定义变量，然后再把请求中的值赋值给它。\n\n###### 验证变量存在\n如果一定要用前面几种方式注册变量，可以在注册变量前先判断变量是否存在，如使用extract()函数则可以配置第二个参数为EXTR_SKIP。使用parse_str()函数注册变量钱需要自行通过代码判断变量是否存在。不建议使用import_request_variables()注册全局变量，会导致变量不可控。最重要的，自行申明的变量一定要初始化，不然即便注册在执行代码前也能被覆盖。\n\n#### 逻辑处理漏洞\n此次指程序在业务逻辑上的漏洞。\n\n##### 挖掘经验\n漏洞大多存在于逻辑处理及业务流程中，没有特别明显的关键字用于快速定位，挖掘技巧通常是通读功能点源码，熟悉业务流程，可关注程序是否可重复安装、修改密码处是否可越权修改其它用户密码、找回密码验证码是否可暴力破解以及修改其它用户密码、cookie是否可预测或cookie验证是否可绕过等。\n\n###### 等于与存在判断绕过\n判断函数存在漏洞时，可以逃逸判断函数绕过逻辑。常见存在漏洞的判断函数有：\n1. in_array()：用于判断一个值是否在某个数组列表里，该函数存在一个问题，比较前会自动做类型转换，实现输入参数并不全等于数组任意值时，也可以实现绕过并注入。\n1. is_numeric()：用于判断一个变量是否为数字，检查通过返回true，否则返回false。该函数存在一个问题，当传入参数为hex时则直接通过并返回true，而mysql是可以直接使用hex编码代替字符串名为的。所以这里虽然不能直接注入SQL语句，但存在二次注入和XSS等漏洞隐患，比如当我们提交`<script>alert(1)</script>`的hex编码时，效果相同。如果程序有其它地方调用该值并直接输出，则有可能执行代码触发XSS漏洞。\n1. 双等于和三等于：双等于在判断等于前会先做变量类型转换，三等于则不会，所以双等于存在安全风险。\n\n###### 账户体系中的越权漏洞\n漏洞分为水平越权和垂直越权，但漏洞原理相同，都是账户体系在判断权限时不严格导致存在绕过漏洞。这一类绕过通常发生在cookie验证不严、简单判断用户提交的参数，归根结底，都是因为参数在客户端提交，服务端未严格校验。\n\n###### 未exit或return引发的安全问题\n某些情况下，在经过if条件判断之后，要么继续执行if后面的代码，要么在if流程内退出当前操作，但该退出行为，有不少程序忘记写return、die()、或者exit()，导致程序继续执行。\n\n###### 常见支付漏洞\n最常见支付漏洞有四种，第1、2、3种比较简单，分别是客户端可修改单价、总价和购买数量，服务器端未严格校验导致。部分商城程序是直接由单价和数量计算总价，但并没有验证这两个数字是否小于0。这种形式的支付漏洞，可以通过寻找支付代码并看代码过滤情况挖掘。\n还有一种是以重复发包来利用时间差，少量钱多次购买，如使用手机给腾讯发送购买QQ业务的短信再快速取消。这类漏洞可从判断余额及扣费功能代码处寻找。\n\n##### 漏洞防范\n1. 深入熟悉业务逻辑。\n1. 多熟悉函数的功能和差异。\n\n#### 会话认证漏洞\n\n##### 挖掘经验\n在cookie验证上出现几率较高，通常是没有使用session认证，而是将用户信息直接保存在cookie中，以备程序使用时直接调用。一般这个过程都会有一个统一的函数去调用数据，容易导致SQL注入和越权等漏洞。在挖掘登录认证漏洞时，可以先看程序的登录功能代码，看整个登录过程的业务逻辑有没有可以控制session值或直接绕过密码验证的漏洞；另外需要关注程序验证是否为登录的代码，通俗的说是验证cookie的代码，是不是直接取cookie的值，然后如何判断这个值来验证是否登录。\n\n###### cookie认证安全\ncookie可以保存任何字符串，各个浏览器保存cookie字节数大小不一样，一般不超过4096个字节，通常用于保存登录帐号的标识信息。cookie出现问题较多的是cookie的SQL注入等常见漏洞，以及web应用程序在服务端直接读取cookie值来操作当前用户数据，由于cookie可以伪造，从而导致伪造用户身份登录的漏洞。\n\n##### 漏洞防范\n了解认证的业务逻辑，严格限制输入的异常字符以及避免直接使用客户端提交的内容进行操作。应该结合cookie和session，不能直接从cookie获取参数值进行操作，另外注意设置session时，需要保证客户端不能操作敏感session参数。特别注意敏感数据不要放在cookie中，cookie在浏览器端以及传输过程中都有被窃取的可能性。\n\n### 二次漏洞审计\n\n#### 什么是二次漏洞\n需要先构造好利用代码写入网站保存，在第二次或多次请求后调用攻击代码触发或修改配置触发的漏洞叫做二次漏洞。该漏洞的出现归根结底是开发者在可信数据的逻辑上考虑不全面。\n\n#### 二次漏洞审计技巧\n虽然二次漏洞写入和触发payload很可能不在同一个地方，但还是可以通过找相关关键字去定位的，只是精准度会稍微降低。大多数二次漏洞的逻辑性比一般的漏洞强的多，所以最好还是把全部代码读一遍，更好的了解业务逻辑和全局配置。\n业务逻辑越复杂的地方越容易出现二次漏洞，我们可以重点关注购物车、订单、引用数据、文章编辑、草稿等和数据库交互的地方，以及和文件系统交互的系统配置文件（一般需要管理员权限才能操作）。\n在二次漏洞类型里，可以重点关注SQL注入、XSS。\n\n### 代码审计小技巧\n\n#### 钻GPC等转义的空子\nGPC会自动把提交内容的敏感字符转义导致攻击代码无法执行，但还是存在漏洞：\n\n##### $_SERVER变量\n在PHP5后，用`$_SERVER`取到的`header`字段不受GPC影响，且普通程序员很少会考虑到这些字段。`header`注入里常见的是`user-agent`、`referer`以及`client-ip/x-forward-for`，因为大多数Web应用都会记录访问者的IP以及`referer`等信息，同样的`$_FILES`变量也不受GPC保护。\n\n##### 编码转换问题\n宽字节注入就是一种非常典型的编码转换问题导致绕过GPC的方式。不仅是PHP与MySQL交互过程中会发生编码转换导致问题，PHP自带的编码转换函数也会发生问题，比如mb_convert_encoding()、iconv()，也就是只要发生编码转换就有可能会出现问题。\n\n#### 神奇的字符串\n\n##### 字符处理函数报错信息泄漏\n页面的报错信息通常能泄漏文件绝对路径、代码、变量及函数等信息，页面报错有很多情况，但不是所有情况页面都会出现错误信息，显示错误信息需要在PHP配置文件中打开并设置等级。\n大多数错误提示会显示文件路径，可以获取Web路径。由于用户提交数据在后端大多是以字符串方式处理，所以利用字符串处理函数报错成了必不可少的方法，对于利用参数来报错的方式，给函数传入不同类型的变量是最实用的方式。\n\n##### 字符串截断\n截断利用最多的是在文件操作上面，通常用来利用文件包含漏洞和文件上传漏洞，`%00`即NULL会被GPC和addslashes()过滤掉，所以利用`%00`截断需要GPC关闭以及不被addslashes()函数过滤，另外PHP5.3之后也不能用这种方式截断。\n1. iconv字符编码转换截断：如从UTF-8转换到GBK，部分代码不能被成功转换（chr(128)-chr(255)之间），在利用该函数转码时，遇到不能处理的字符串时后续字符串不会被处理。\n\n#### php://输入输出流\n\n#### PHP代码解析标签\n1. 最标准的`<?php?>`\n1. 脚本标签：`<script language=\"php\"></script>`，可以正常解析PHP代码\n1. 短标签：`<?...?>`，使用短标签需要在php.ini中设置short_open_tag=on，默认为on状态。\n1. asp标签`<%...%>`，在PHP3.0.4后可用，需要在php.ini中设置asp_tags=on，默认为off。\n通常用于绕过`<?php?>`标签过滤以留后门及绕过Web程序或waf写入webshell。\n\n#### fuzz漏洞发现\n\n#### 不严谨的正则表达式\n1. 没有用`^`和`$`限定匹配开始位置\n1. 特殊字符未转义，匹配特殊字符的原字符时需要使用反斜杠`\\`来进行转义，不然`.`则可以用来表示任何字符，存在安全隐患。\n\n#### 十余种MySQL报错注入\n利用报错注入最快拿到注入的数据。\n1. floor():`id=1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)`\n1. extractvalue():`id=1 and (extractvalue(1, concat(0x5c, (select user()))))`\n1. updatexml():`id=1 AND (updatexml(1,concat(0x5e24,(select user()),0x5e24),1))`\n1. GeometryCollection():`id=1 AND GeometryCollection((select * from(select * from(select user())a)b))`\n1. polygon():`id=1 AND polygon((select * from(select * from(select user())a)b))`\n1. multipoint():`id=1 AND multipoint((select * from(select * from(select user())a)b))`\n1. multilinestring():`id=1 AND multilinestring((select * from(select * from(select user())a)b))`\n1. multipolygon():`id=1 AND multipolygon((select * from(select * from(select user())a)b))`\n1. linestring():`id=1 AND linestring((select * from(select * from(select user())a)b))`\n1. exp():`id=1 and EXP(~(select * from(select user())a))`\n\n#### Windows FindFirstFile\n目前大多数程序会对上传文件名加密，这样我们就无法直接得到上传webshell文件路径，但在windows下时，我们只需要知道文件所在目录，利用win特性就可以访问文件，因为win在搜索文件时使用了FindFirstFile这一个winapi函数去一个文件夹（包括子文件夹）去搜索指定文件。\n利用方法很简单，只需要将文件名不可知部分之后的字符用`<`或`>`代替即可，不过要注意，只使用一个`<`或`>`则只能代表一个字符，如果文件名是12345或更长，请求`1<`或`1>`都访问不到文件，需要`1<<`才能访问到，代表继续往下搜索，有点像win的短文件名。\n目前所有PHP版本都可用，PHP并没有在语言层面禁止使用`<>`这些特殊字符，从函数层面来讲，可以利用这个特性的函数有：\n```\ninclude() include_once() require() require_once()\nfopen() ziparchive::open()\ncopy()\nfile_get_contents() parse_ini_file() readfile()\nfile_put_contents()\nmkdir()\ntempnam() touch()\nmove_uploaded_file()\nopendir() readdir() rewinddir() closedir()\n```\n\n#### PHP可变变量\n部分PHP应用在写配置文件或使用preg_replace()函数第二个参数赋值变量时，会用到双引号来代表string类型给变量赋值，存在代码执行漏洞。\n```\n<?php\n$a=\"${@phpinfo()}\";\n?>\n```\n注意，上述代码中的`@`是必须存在的，不然代码无法执行，但除了该符号外还有其它写法，只要不影响PHP规范就可以执行，举例：\n1. 花括号内第一个字符为空格：`$a = \"${ phpinfo()}\";`\n1. 花括号内第一个字符为TAB：`$a = \"${  phpinfo()}\";`\n1. 花括号内第一个字符为注释符：`$a = \"${/**/phpinfo()}\";`\n1. 花括号内第一个字符为回车换行符：`$a = \"${\n  phpinfo()}\";`\n1. 花括号内第一个字符为加号：`$a = \"${+phpinfo()}\";`\n1. 花括号内第一个字符为减号：`$a = \"${-phpinfo()}\";`\n1. 花括号内第一个字符为感叹号：`$a = \"${!phpinfo()}\";`\n除此之外还有一些如`~`、`\\`等。\n\n## PHP安全编程规范\n\n### 参数的安全过滤\n\n#### 第三方过滤函数与类\n目前大多数程序都有一个统一的参数过滤入口，但对于特定场景和漏洞就不够好用。所以除了总入口，在具体功能点也需要进行过滤。\n\n#### 内置过滤函数\n1. SQL注入过滤函数：有addslashes()、mysql_real_escape_string()以及mysql_escape_string()，作用都是给字符串添加反斜杠`\\`来转义掉单引号、双引号、反斜杠以及空字符NULL。addslashes()和mysql_escape_string()都是直接在敏感字符串前加反斜杠，可能会存在宽字节注入绕过的问题，而mysql_real_escape_string()会考虑当前连接数据库的字符集编码，更加安全。\n1. XSS过滤函数：有htmlspecialchars()和strip_tags()，功能不同，htmlspecialchars作用是将字符串中的特殊字符转换成HTML实体编码，能够干掉大多数的XSS攻击。strip_tags则是用来去掉HTML及PHP标记。\n1. 命令执行过滤函数：有escapeshellcmd()和escapeshellarg()两个函数，escapeshellcmd过滤的字符为下方代码框所示，win下过滤方式则是在这些字符前面加了`^`符号，linux下则是在这些字符前加了反斜杠。escapeshellarg函数过滤较简单，给所有参数加上一对双引号，强制为字符串。\n    ```\n    &,;,`,|,*,?,~,<,>,^,(,),[,],{,},$,\\,\\x0A,\\xFF,% 以及单双引号\n    ```\n\n### 使用安全的加密算法\n\n1. 对称加密：算法安全性比较高，数据的实际安全性取决于密钥的管理。所以不建议使用对称加密对用户密码进行加密存储。\n1. 非对称加密：安全性比对称加密更好。\n1. 单向加密：不可逆算法，常见如MD系列和sha1，通常用于保存密码和做数字签名，但存在碰撞的问题。\n\n### 业务功能安全设计\n\n#### 验证码\n\n##### 验证码绕过\n1. 不刷新直接绕过：后端接收一次请求后并没有主动刷新验证码，将验证码和session绑定在一起，为了保证验证码正常使用，会把验证码明文或加密后放在Cookie或POST数据包里，所以每次只要同一个数据包里的两个验证码对应即可绕过。（重复发包利用？）\n1. 暴力破解：验证码能够被爆破，主要是程序没有设置验证码错误次数和超时设定，导致能够不断尝试。\n1. 机器识别：利用机器识别验证码。\n1. 打码平台：人工打码绕过。\n\n###### 对策\n1. 设置验证码错误次数（最重要）。\n1. 不把验证码放在HTML页面或cookie中。\n1. 验证码设置只能请求一次，请求一次后不管错误与否都在后端程序强制刷新。\n1. 短信或邮件验证码必须要6位以上字母和数字混合，图片或语音验证码需要加强混淆干扰。（短信验证码这条似乎在当前不适用，多数厂商选择限制短时间同IP发包等，但不增加验证码复杂度）\n1. 验证码要动态生成，不能统一生成多次调用。\n\n##### 验证码资源滥用\n利用大量网站短信验证码未限制获取验证码次数和时间间隔的接口，实现短信/邮箱轰炸。防护比较简单，限制单个手机号在一个时间段内请求接收短信的次数，或限制某一IP在一个时间段内请求接收短信的次数。\n\n#### 用户登录\n\n##### 撞库登录\n指登录口没有做登录次数限制，导致可以使用不同的用户及密码不断进行登录尝试，遍历用户密码。撞库漏洞情况有：\n1. 用户名和密码错误次数都无限制。\n1. 单时间段内用户密码错误次数限制。（可以使用单密码和用户名列表撞库）\n1. 单时间段内IP登录错误次数限制。（存在误杀内网用户的可能）\n比较好的解决方案是使用登录验证码和多因素认证。\n\n##### API登录\n免重新登录跳转处存在漏洞，如修改用户参数实现任意登录。对于这种漏洞注意以下安全点：\n1. 登录密钥（clientkey）需要不可预测且不固定，生成key的算法中加入随机字符。\n1. API接口禁止搜索引擎收录。\n1. 登录密钥当次绑定当前主机，换机器不可用，防止木马和嗅探。\n\n#### 用户注册\n1. 设计验证码。\n1. 采集用户机器唯一识别码，拦截短时间内多次注册。\n1. 根据帐号格式自学习识别垃圾帐号。\n1. 防止SQL注入漏洞与XSS漏洞（常见）。\n\n#### 密码找回\n1. 输入用户名/邮箱/手机阶段：抓包修改手机/邮箱参数。\n1. 填写验证码和新密码阶段：\n    * 验证凭证简单，可以被暴力破解。\n    * 验证凭证算法简单，凭证可以被预测。\n    * 验证凭证直接保存在源码里。\n1. 发送新密码阶段：\n凭证未绑定用户：请求发送至邮箱的找回密码链接时，后端根据uid和key对应判断该链接有效，但将新密码提交到服务器时，服务器端没有判断当前key是否和uid或邮箱匹配，直接修改掉uid或邮箱指定的用户密码。这样只要拦截修改密码的请求包，篡改用户参数即可。所以安全风险点应该注意的有：\n    * 接收验证码的邮箱和手机号不可由用户控制，应直接从数据库读取。\n    * 加强验证凭证复杂度，防止被暴力破解。\n    * 限制验证凭证错误次数，单用户在一定时间内验证码错误一定次数，强制等待一段时间。\n    * 验证凭证设置失效时间。\n    * 验证凭证不要保存在页面。\n    * 输入用户邮箱或ID、手机号取验证凭证的地方需要设置验证码防止短信炸弹和批量找回等。\n    * 验证凭证跟用户名、用户ID、用户邮箱绑定，找回密码时验证当前凭证是否是当前用户的。\n\n#### 资料查看和修改\n这里主要介绍的是越权漏洞的利用。\n1. 未验证用户权限：直接修改当前资源ID即可访问该资源，没有验证当前资源是否属于当前用户。\n1. 未验证当前登录用户：虽然程序绑定了用户ID和资源ID，但该用户ID是访问资源时直接从cookie或post、get参数里获取，所以可以通过修改成另一用户ID，利用其权限操作资源。\n上述漏洞较多出现在用户资料修改，及用户资料查看。\n防御思路有：\n* 用户资源ID（订单ID、地址ID等）绑定到用户，只允许有权限的用户查看。\n* 当前用户信息存储到session，不放在request中，避免攻击者修改。\n\n#### 投票/积分/抽奖\n共同点：`单个用户次数存在限制`，该限制存在很多绕过方式。\n通常有几种利用方法：\n1. cookie或POST请求正文绕过。修改cookie或post请求数据产生绕过。\n1. 基于IP验证。看程序获取IP的方式，如果是client-ip或x_forward_for获取IP，可直接伪造IP绕过。\n1. 基于用户认证。利用批量注册刷票，或在投票时随意修改POST包或cookie里的当前uid、用户名等查看是否能够绕过限制。\n从上述利用手段可以看到主要三个点是IP、登录用户、cookie，可用性比较高的防御手段如下：\n1. 机器识别码验证。\n1. 操作需要登录，当前用户信息从session读取。\n\n#### 充值支付\n主要有四种情况：客户端可修改单价、总价和购买数量以及利用时间差多次购买。\n主要应对手法是：\n1. 保证数据可信，商品单价和总价不可从客户端获取。\n1. 购买数量不能小于等于0。\n1. 账户支付锁定机制，当一个支付操作开始就应该立马锁定当前用户，不能同时两个后端请求对余额进行操作。\n\n#### 私信及反馈\n除去特殊情况下可以滤去的SQL注入或命令执行等少见漏洞外，最常见的就是XSS漏洞以及越权漏洞。\n\n#### 远程地址访问\n访问远程地址获取资源的功能可能会被利用（如填入内网地址）\n利用限制填写来防御该类漏洞，但大部分厂商修复时不会考虑到短地址的问题，修复后仍然可以通过生成短链接的方式利用。\n\n#### 文件管理\n本身就是一个高危功能，权限管理不当会导致被攻击者利用写入webshell。\n为了保证安全，在满足业务需求的情况下，设计时应遵循以下几点：\n1. 禁止写入脚本可在服务器端执行的文件：如服务器可解析PHP，那么此次就需要限制不能操作PHP扩展名的文件和PHP标签的代码。\n1. 限制文件管理功能操作的目录：限制文件管理功能只能操作固定目录，目录不能从客户端提交，在代码中设置好即可，如果实在需要进行目录跳转的话，一定要禁止提交`../`以及`\\..`避免越权操作其它目录。\n1. 限制文件管理功能访问权限：虽然文件管理是正常功能，但存在一点后门的性质，所以对该功能的访问权限一定要严格控制。\n1. 禁止上传特殊字符文件名的文件：大多数应用会对上传文件进行展示，特别是网盘类应用，注意对上传文件名进行检查，禁止文件名中有尖括号、单双引号等特殊字符，避免攻击者用文件名进行XSS攻击。\n\n#### 数据库管理\n跟文件管理一样，也是高位功能，如果启动数据库服务的系统用户以及数据库用户的权限都够大，完全可以利用该功能直接执行系统命令及操作服务器上的文件。\n1. 限制可以操作的数据库表，要么在代码内写死只能操作哪些表（如备份），如果是执行SQL语句的方式可以另建一个mysql用户，限制可操作的表和字段。\n1. 限制备份到服务器上的文件名，需要随机生成且长度不低于16位，扩展名不能自定义，防止攻击者利用该功能导出webshell或猜解文件名直接下载。\n\n#### 命令/代码执行\n命令执行和代码执行功能通常都在系统后台，相比来说，命令执行的功能使用更多，代码执行功能在特殊应用上才会存在。设计该类功能时应该注意以下几点：\n1. 严格控制该功能访问权限，建议高权限才能访问。\n1. 在满足业务需求的情况下，可以设置命令白名单，可以使用escapeshellcmd()以及escapeshellarg()函数进行过滤，命令直接写死在代码中更好。\n1. 给命令及代码执行功能设置独立密码。\n1. 代码执行功能限制脚本可访问的路径。\n1. 在满足需求的情况下限制当前执行命令的系统权限。\n\n#### 文件/数据库备份\n是非常常见且非常容易出现安全问题的功能。常见问题有：\n1. 未授权访问和越权访问：未授权访问体现在这个备份功能直接在不登录或登录验证存在漏洞的情况下可以直接使用，以及存在CSRF漏洞可以直接劫持管理员帐号进行备份。\n1. 备份文件名可预测：攻击者可以利用枚举的方式扫描备份包。\n1. 生成的文件可利用web中间件解析漏洞执行代码\n如何设计备份功能：\n1. 进行权限控制，只有高权限可以使用。\n1. 文件名随机生成，不可预测。\n\n#### API\n因为爬虫无法抓取APP中的API接口，所以接口的SQL注入等漏洞相对较多，目前最多的问题是未授权访问以及数据遍历漏洞。因此设计一个安全的API需要从以下几点考虑：\n1. 访问权限控制：必要时加入账户体系，严格控制数据调用权限，比如当前用户必须在登录情况下，接口参数中传入自己登录成功的凭证才能调用这个用户的数据。另外不需要账户体系时也要注意加入不可暴力破解的访问密钥进行权限验证。\n1. 防止敏感信息泄漏：没必要输出的信息应该注意禁止输出。\n1. SQL注入等常规漏洞：注意代码安全，防止SQL注入、代码执行等漏洞的产生。\n\n### 应用安全体系建设\n\n1. 用户密码安全策略\n1. 前后台用户分表：同表的情况下可能存在越权修改管理员信息等情况。\n1. 后台地址隐藏\n1. 密码加密存储方式\n1. 登录限制\n1. API站库分离\n1. 慎用第三方服务\n1. 严格的权限控制\n1. 敏感操作多因素验证\n1. 应用自身的安全中心\n","slug":"Notes_代码审计-企业级web代码安全结构","published":1,"updated":"2023-02-20T06:35:30.601Z","_id":"clecfhg13001ix94055gohc19","comments":1,"layout":"post","photos":[],"link":"","content":"<p>苦于代码审计能力偏弱，调研一番发现这本书或许有所帮助。</p>\n<h2 id=\"第一部分-代码审计前的准备\"><a href=\"#第一部分-代码审计前的准备\" class=\"headerlink\" title=\"第一部分 代码审计前的准备\"></a>第一部分 代码审计前的准备</h2><h3 id=\"代码审计环境搭建\"><a href=\"#代码审计环境搭建\" class=\"headerlink\" title=\"代码审计环境搭建\"></a>代码审计环境搭建</h3><ol>\n<li>wamp/wnmp: WAMP（Windows下的Apache+Mysql/MariaDB+Perl/PHP/Python），WNMP（Windows下的Nginx+Mysql+PHP）</li>\n<li>lamp/lnmp：将上述环境安装在Linux中。</li>\n</ol>\n<h4 id=\"PHP-INI-常量的定义\"><a href=\"#PHP-INI-常量的定义\" class=\"headerlink\" title=\"PHP_INI_*常量的定义\"></a>PHP_INI_*常量的定义</h4><ol>\n<li>PHP_INI_USER：该配置选项可在用户的PHP脚本或Win注册表中设置。</li>\n<li>PHP_INI_PERDIR：该配置选项可在php.ini. .htaccess或httpd.conf中设置。</li>\n<li>PHP_INI_SYSTEM：该配置选项可在任何地方设置。</li>\n<li>PHP_INI_ALL：该配置选项可在任何地方设置。</li>\n<li>php.ini only：该配置选项可仅可在php.ini中配置。</li>\n</ol>\n<h4 id=\"会影响PHP脚本安全的配置列表及核心配置选项\"><a href=\"#会影响PHP脚本安全的配置列表及核心配置选项\" class=\"headerlink\" title=\"会影响PHP脚本安全的配置列表及核心配置选项\"></a>会影响PHP脚本安全的配置列表及核心配置选项</h4><ol>\n<li>register_globals(全局变量注册开关)：该选项在on的情况下，会将用户GET/POST等方式提交上来的参数注册成全局变量并初始化值为参数对应的值，使提交参数可以直接在脚本中使用。register_globals在PHP版本小于等于4.2.3时设置为PHP_INI_ALL，从PHP5.3.0起被废弃，在PHP5.4.0中被移除。<br> 代码实例：(实验环境php5.2.17,在php.ini中添加register_globals = On) <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">if($user&#x3D;&#x3D;&#39;admin&#39;)&#123;</span><br><span class=\"line\">  echo &#39;true&#39;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>allow_url_include(是否允许包含远程文件)：在该配置为on的情况下，可以直接包含远程文件，当存在include(<code>$var</code>)且$var可控的情况下，可以直接控制$var变量来执行PHP代码。allow_url_include在PHP5.2.0后默认设置为off，配置范围为PHP_INI_ALL。与之类似的配置有allow_url_fopen，配置是否允许打开远程文件，但安全隐患没有前者大。<br> 代码实例：(实验环境php5.2.17，payload：a=<a href=\"http://127.0.0.1/test/info.txt\">http://127.0.0.1:80/test/info.txt</a> ，info.txt内容为<code>&lt;?php phpinfo();?&gt;</code>) <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">include $_GET[&#39;a&#39;];</span><br></pre></td></tr></table></figure></li>\n<li>magic_quotes_gpc（魔术引号自动过滤）：该参数在不存在编码或其他特殊绕过的情况下，可以使很多漏洞无法利用。当该参数被开启时（选项设置为on），会自动在GET、POST、COOKIE变量中的单引号（‘）、双引号（“）、反斜杠（\\）及空字符（NULL）的前面加上反斜杠（\\），但在PHP5中magic_quotes_gps并不会过滤$_SERVER变量，导致很多类似client-ip、referer一类的漏洞能够利用。PHP5.3之后不推荐使用该参数，PHP5.4之后被取消。在PHP版本小于4.2.3时，配置范围是PHP_INI_ALL;在PHP版本大于4.2.3时，是PHP_INI_PERDIR。<br> 代码实例：(测试?a=1’) <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo $_GET[&#39;a&#39;];</span><br></pre></td></tr></table></figure></li>\n<li>magic_quotes_runtime(魔术引号自动过滤)：过滤方式同样为加反斜杠，但和magic_quotes_gpc的处理对象不一样。magic_quotes_runtime只对从数据库或文件中获取的数据进行过滤，magic_quotes_runtime在PHP5.4之后被取消，配置范围是PHP_INI_ALL。但该参数仅对部分函数有作用，某些情况下可以被绕过。<br> 代码实例： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#1.txt</span><br><span class=\"line\">1&#39;2&quot;3\\4</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">ini_set(&quot;magic_quotes_runtime&quot;,&quot;1&quot;);</span><br><span class=\"line\">echo file_get_contents(&quot;1.txt&quot;);</span><br></pre></td></tr></table></figure></li>\n<li>magic_quotes_sybase(魔术引号自动过滤)：用于自动过滤特殊字符，当设置为on时，会覆盖magic_quotes_gpc=on的配置（使gpc=on失效）。与gpc的共同点是处理对象一致（GET、POST、Cookie)，但该参数仅转义空字符以及把单引号变成双引号，使用率比gpc低。配置范围为PHP_INI_ALL，在PHP5.4.0中移除。（代码实例与gpc相同）</li>\n<li>safe_mode（安全模式）：是PHP内嵌的一种安全机制，配置范围为PHP_INI_SYSTEM，PHP5.4之后被取消（取消原因是，PHP开发者认为在PHP语言机制上试图解决安全问题是一件不合适的事情，虽然safe_mode在一定程度上对共享主机有效，但同时也带来了不少误报，与其在PHP上解决权限安全问题，不如使用linux默认的权限限制机制或其它层级的解决办法）。该参数效果为，所有文件操作函数都会受到限制，非文件所有者不能对该文件进行操作（如include()），如果有一些脚本文件放在非Web服务启动用户所有的目录下，需要利用include等函数进行加载，可以使用safe_mode_include_dir来配置可包含的路径。此外，通过函数popen()、system()以及exec()等函数执行命令或程序会提示错误，如果需要使用外部脚本，可以集中存放，然后用safe_node_exec_dir来指向存放目录。<br> 代码实例： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># echo &#96;whoami&#96;; 执行命令失败的回显提示</span><br><span class=\"line\">Warning: shell_exec() [function, shell_exec]: Cannot execute using backquotes in Safe Mode ...</span><br></pre></td></tr></table></figure></li>\n<li>open_basedir（PHP可访问目录）：用于限制PHP只能访问哪些目录，通常只需要设置Web文件目录即可，如果需要加载外部脚本，也需要把所在路径加入该指令中，多个目录以分号分割。需要注意，指定限制实际上是前缀而不是目录名，如配置open_basedir=/www/a，那么/www/a和/www/ab都可以访问，所以为了避免该现象发生，需要用斜线结束路径名，如/www/a/。当参数激活，执行脚本访问其它文件时都需要验证文件路径，所以会影响执行效率。该指令配置范围在PHP&lt;5.2.3时是PHP_INI_SYSTEM，在PHP&gt;=5.2.3时是PHP_INI_ALL。</li>\n<li>disable_functions(禁用函数)：使用该指令来禁止敏感函数的使用，使用本指令时，需把dl()函数也添加进禁用列表，否则攻击者可以利用dl()函数价值自定义的PHP扩展突破该指令的限制。指令范围为php.ini，配置禁用函数时使用逗号分割函数名。</li>\n<li>display_errors和error_reporting错误显示：display_errors用于表明是否显示PHP脚本内部错误，生产环境中建议关闭，在开启时，可以通过设置error_reporting来设置错误显示的级别。配置范围均为PHP_INI_ALL。</li>\n</ol>\n<h3 id=\"审计辅助与漏洞验证工具\"><a href=\"#审计辅助与漏洞验证工具\" class=\"headerlink\" title=\"审计辅助与漏洞验证工具\"></a>审计辅助与漏洞验证工具</h3><h4 id=\"代码编辑器\"><a href=\"#代码编辑器\" class=\"headerlink\" title=\"代码编辑器\"></a>代码编辑器</h4><ol>\n<li>Notepad++</li>\n<li>UltraEdit（文件对比）</li>\n<li>Zend Studio（PHP集成开发环境）</li>\n</ol>\n<h4 id=\"代码审计工具\"><a href=\"#代码审计工具\" class=\"headerlink\" title=\"代码审计工具\"></a>代码审计工具</h4><ol>\n<li>Seay源代码审计系统</li>\n<li>RIPS</li>\n</ol>\n<h4 id=\"漏洞验证辅助\"><a href=\"#漏洞验证辅助\" class=\"headerlink\" title=\"漏洞验证辅助\"></a>漏洞验证辅助</h4><ol>\n<li>Burp</li>\n<li>浏览器扩展：Hackbar, Firebug, Live HTTP Headers, Modify</li>\n<li>编码转换及加解密工具：Seay代码审计系统自带的编码功能，Burp自带的decoder，超级加解密转换工具</li>\n<li>正则调试工具：Seay自带的正则调试功能，灵者正则调试</li>\n<li>SQL执行监控工具：Seay mysql监控</li>\n</ol>\n<h2 id=\"漏洞发现与防范\"><a href=\"#漏洞发现与防范\" class=\"headerlink\" title=\"漏洞发现与防范\"></a>漏洞发现与防范</h2><h3 id=\"通用代码审计思路\"><a href=\"#通用代码审计思路\" class=\"headerlink\" title=\"通用代码审计思路\"></a>通用代码审计思路</h3><h4 id=\"敏感函数回溯参数过程\"><a href=\"#敏感函数回溯参数过程\" class=\"headerlink\" title=\"敏感函数回溯参数过程\"></a>敏感函数回溯参数过程</h4><p>根据敏感函数来逆向追踪参数的传递过程，使用较多，因为大多数漏洞都是由于函数使用不当造成的。非函数使用不当的漏洞，如SQL注入，也有一些特征，如Select、Incert等，结合From和Where等关键字判断是否为一条SQL语句，通过对字符串的识别分析，就能判断该SQL语句参数有没有使用单引号过滤，或者根据经验判断。如HTTP头里面的HTTP_CLIENT_IP和HTTP_X_FORWORDFOR等获取到的IP地址常直接拼接到SQL语句中，且由于它们是存在于<code>$_SERVER</code>变量中不受GPC的影响，那么就可以查找这两个参数关键字快速寻找漏洞。<br>该方法的优点是定向挖掘、高效、高质量，缺点是对整体框架了解不够深入，定位利用点会花费时间，另外无法覆盖逻辑漏洞。</p>\n<h4 id=\"通读全文代码\"><a href=\"#通读全文代码\" class=\"headerlink\" title=\"通读全文代码\"></a>通读全文代码</h4><p>在企业中做自身产品代码审计时，我们需要了解整个应用的业务逻辑以获取更多漏洞。<br>通读全文代码时，首先要看程序的大体代码结构，如主目录有哪些文件，模块目录有哪些文件，插件目录有哪些文件，还要注意文件大小、创建时间。根据文件命名可大致了解该程序实现哪些功能，核心文件是哪些。<br>在看程序目录结构时，要特别注意以下几个文件：</p>\n<ol>\n<li><code>函数集文件</code>，通常命名中包含functions或者common等关键字，这些文件内是一些公共函数，提供给其它文件统一调用，所以大多数文件会在文件头包含其它文件。寻找这些文件的一个技巧就是打开index.php或一些功能性文件，在头部一般都能找到。</li>\n<li><code>配置文件</code>，通常命名中包含config关键字，包括Web程序运行必须的功能性配置选项及数据库等配置信息，从该文件中可以了解程序的小部分功能，另外看这个文件时注意观察配置文件中参数值是用单引号还是双引号，如果是双引号，则很可能存在代码执行漏洞。（如利用PHP可变变量（$$a）的特性执行代码，ref：<a href=\"https://www.cnblogs.com/Cl0ud/p/12336834.html%EF%BC%89\">https://www.cnblogs.com/Cl0ud/p/12336834.html）</a></li>\n<li><code>安全过滤文件</code>，该文件关系到挖掘到的可疑点能否利用，通常命名中有filter、safe、check等关键字。这类文件主要作用是针对参数进行过滤，比较常见的是针对SQL注入和XSS过滤，还有文件路径、执行的系统命令的参数，其它相对少见。而目前大多数应用会在程序入口循环对所有参数使用addslashes()进行过滤。</li>\n<li><code>index文件</code>，是一个程序的入口文件，通过阅读该文件可大致了解整个程序的架构、运行流程、包含的文件，以及核心文件有哪些。而不同的目录的index文件也有不同的实现方式，最好先将核心目录的index文件都简单读一遍。<br>学习代码审计前期建议先下载一些小应用来读，积累经验后，再去读开源框架。</li>\n</ol>\n<h4 id=\"根据功能点定向审计\"><a href=\"#根据功能点定向审计\" class=\"headerlink\" title=\"根据功能点定向审计\"></a>根据功能点定向审计</h4><p>先简单黑盒测试一下，再通过发现的容易出问题的功能去阅读该功能点的源码，提高审计速度。</p>\n<ol>\n<li>文件上传功能：任意上传、SQL注入</li>\n<li>文件管理功能：任意文件操作、XSS漏洞</li>\n<li>登录认证功能：任意用户登录</li>\n<li>找回密码功能：验证码爆破、验证凭证算法</li>\n</ol>\n<h3 id=\"漏洞挖掘与防范（基础篇）\"><a href=\"#漏洞挖掘与防范（基础篇）\" class=\"headerlink\" title=\"漏洞挖掘与防范（基础篇）\"></a>漏洞挖掘与防范（基础篇）</h3><h4 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h4><h5 id=\"挖掘经验\"><a href=\"#挖掘经验\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h5><p>常出现在登录页面、获取HTTP头（user-agent/client-ip等）、订单处理等业务相对复杂的地方，登录页面注入大多出现在HTTP头的client-ip和x-forward-for，用于记录登录IP地址。另外在订单系统内，由于订单涉及购物车等多个交互，经常会发生二次注入，通读代码时可着重关注这几个地方。</p>\n<ol>\n<li>普通注入：指最容易利用的SQL注入漏洞，有int型和string型，在string型注入中需要使用单或双引号闭合。数据库操作存在一些关键字，如select from、mysql_connect、mysql_query、mysql_fetch_row等，查询方式还有update、incert、delete，只需要在白盒审计中查找这些关键字即可定向挖掘SQL注入。</li>\n<li>编码注入：程序在进行一些操作前经常会进行编码处理，而做编码处理的函数可能会存在问题。通过输入转码函数不兼容的特殊字符，即可导致输出字符变成有害数据，在SQL注入里，最常见的编码注入是MySQL宽字节以及urldecode/rawurldecode函数导致的。<ul>\n<li>宽字节注入：使用PHP连接MySQL的时候，当设置<code>set character_set_client=gbk</code>时会导致一个编码转换的注入问题，当存在该漏洞时，注入参数里带入<code>%df%27</code>，即可把程序中过滤的<code>\\(%5c)</code>吃掉。而通常都不是直接设置<code>set character_set_client=gbk</code>，而是设置<code>SET NAMES ‘gbk’</code>，同样存在漏洞。官方建议是使用mysql_set_charset来设置编码，只要在后面合理的使用mysql_real_escape_string还是可以解决该漏洞的。对宽字节注入的挖掘方法比较简单，搜索<code>SET NAMES</code>、<code>character_set_client=gbk</code>、<code>mysql_set_charset(&#39;gbk&#39;)</code>。该漏洞的解决方法如以下三种，比较推荐一和三：<ul>\n<li>在执行查询前先执行<code>SET NAMES &#39;gbk&#39;, character_set_client=binary</code></li>\n<li>使用mysql_set_charset(‘gbk’)设置编码，然后使用mysql_real_escape_string()过滤。</li>\n<li>使用pdo方式，在PHP5.3.6及以下版本中需要设置<code>setAttribute(PDO::ATTR_EMULATE_PREPARES,false);</code>，来禁用prepared statements的仿真效果。</li>\n</ul>\n</li>\n<li>二次urlencode注入：只要字符被进行转换就有可能产生漏洞。现在的Web程序大多会进行参数过滤，通常使用addslashes()、mysql_real_escape_string()、mysql_escape_string()函数或者开启GPC的方式来防止注入，也就是给单引号、双引号、反斜杠（\\）和NULL加上反斜杠转义。如果某处使用了urldecode或者rawurldecode函数，则会导致二次加码生成单引号而引发注入。该漏洞可以通过搜索urldecode和rawurldecode函数来挖掘。</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"漏洞防范\"><a href=\"#漏洞防范\" class=\"headerlink\" title=\"漏洞防范\"></a>漏洞防范</h5><ol>\n<li>gpc/runtime魔术引号：通常数据污染有两种方式，一种是应用被动接收参数，另一种是主动获取参数。利用magic_quotes_gpc和magic_quotes_runtime可以防止部分SQL注入（对int型注入没有太大作用）</li>\n<li>过滤函数和类：有两种使用场景，一种是程序入口统一过滤，框架程序使用这种方式比较多，另一种是在程序进行SQL语句运行前使用，除了PHP内置的一些过滤单引号等函数外，还有一些开源类过滤union、select等关键字。<ul>\n<li>addslashes函数：过滤单引号、双引号、反斜杠以及空字符NULL，大多被用在程序入口，判断如果没有开启GPC则使用该函数进行过滤。不过它的参数必须是string类，所以可能会存在通过数组绕过的漏洞。</li>\n<li>mysql_[real_]escape_string函数：这两个函数都是对字符串进行过滤，只存在于大于PHP4.03的版本，[<code>\\x00</code>]、[<code>\\n</code>]、[<code>\\r</code>]、[<code>\\</code>]、[<code>&#39;</code>]、[<code>&quot;</code>]、[<code>\\xla</code>]会受到影响。两个函数唯一不一样的地方在于mysql_real_escape_string接受的是一个连接句柄并根据当前字符集转移字符串，推荐使用。</li>\n<li>intval等字符转换：上述方式在int类型注入时效果不会，比如可以通过报错或盲注等方式来绕过，这时候就要用到intval函数了。intval的作用是将变量转换成int类型，这里举例intval是要表达一种利用参数类型白名单的方式来防止漏洞，对应的还有很多如floatval等。</li>\n</ul>\n</li>\n<li>PDO prepare预编译：通过预编译的方式来处理数据库查询。当PHP版本&lt;5.3.6时，使用PHP本地模拟prepare再把完整的SQL语句发送给MySQL服务器，且使用set names ‘gbk’时，仍然存在宽字节SQL注入，因为PHP和MySQL编码不一致。正确的写法应该是使用ATTR_EMULATE_PREPARES来禁用PHP本地模拟prepare。</li>\n</ol>\n<h4 id=\"XSS漏洞\"><a href=\"#XSS漏洞\" class=\"headerlink\" title=\"XSS漏洞\"></a>XSS漏洞</h4><h5 id=\"挖掘经验-1\"><a href=\"#挖掘经验-1\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h5><p>挖掘XSS漏洞关键在于寻找没有被过滤的参数，且这些参数传入至输出函数。常用输出函数列表如下：<code>print、print_r、echo、printf、sprintf、die、var_dump、var_export</code>，寻找带有变量的这些函数即可。另外在代码审计中，浏览器环境对XSS漏洞利用影响非常大。通读代码时可多关注各处设置资料、文章发表、留言等富文本区域，这种地方存在的XSS通常是存储型的。</p>\n<h5 id=\"反射型-XSS\"><a href=\"#反射型-XSS\" class=\"headerlink\" title=\"反射型 XSS\"></a>反射型 XSS</h5><p>直接通过外部输入在浏览器端输出触发，该种漏洞比较容易通过扫描器黑盒审计发现。白盒审计中，只需要寻找带有参数的输出参数，根据输出参数对输出内容回溯输入参数，观察有没有经过过滤。</p>\n<h5 id=\"存储型XSS\"><a href=\"#存储型XSS\" class=\"headerlink\" title=\"存储型XSS\"></a>存储型XSS</h5><p>把利用代码保存在数据库或文件中，当Web程序读取利用代码并输出在页面上时执行利用代码。比反射型容易利用，较为隐蔽且不用考虑绕过浏览器过滤。挖掘时也是需要寻找未过滤的输入点和未过滤的输出函数（可能完全不在同一个业务流中），可以根据当前代码功能去猜，或追寻数据有在哪里被操作，使用表名、字段名去代码里搜索。</p>\n<h5 id=\"漏洞防范-1\"><a href=\"#漏洞防范-1\" class=\"headerlink\" title=\"漏洞防范\"></a>漏洞防范</h5><ol>\n<li>特殊字符HTML实体转码。</li>\n<li>标签事件属性黑白名单。</li>\n</ol>\n<h4 id=\"CSRF漏洞\"><a href=\"#CSRF漏洞\" class=\"headerlink\" title=\"CSRF漏洞\"></a>CSRF漏洞</h4><h5 id=\"挖掘经验-2\"><a href=\"#挖掘经验-2\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h5><p>主要用于越权操作，所以漏洞会出现在有权限控制的地方。黑盒挖洞可以先搭建环境，打开几个有非静态操作的页面，抓包看看有没有token，没有token就不带referer直接请求该页面，返回数据一样的话，可能存在CSRF漏洞。白盒审计，通读代码时看看被大量引用的基础文件（核心文件）、你比较关心的功能点代码内有没有验证token和referer相关的代码，或者直接搜索token关键字。</p>\n<h5 id=\"漏洞防范-2\"><a href=\"#漏洞防范-2\" class=\"headerlink\" title=\"漏洞防范\"></a>漏洞防范</h5><ol>\n<li>增加token/referer验证避免img标签请求的水坑攻击。</li>\n<li>增加验证码。（比较麻烦，更适用于敏感操作页面）</li>\n</ol>\n<h3 id=\"漏洞挖掘与防范（进阶篇）\"><a href=\"#漏洞挖掘与防范（进阶篇）\" class=\"headerlink\" title=\"漏洞挖掘与防范（进阶篇）\"></a>漏洞挖掘与防范（进阶篇）</h3><h4 id=\"文件操作漏洞\"><a href=\"#文件操作漏洞\" class=\"headerlink\" title=\"文件操作漏洞\"></a>文件操作漏洞</h4><h5 id=\"文件包含漏洞\"><a href=\"#文件包含漏洞\" class=\"headerlink\" title=\"文件包含漏洞\"></a>文件包含漏洞</h5><p>文件包涵函数有include()、include_once()（前两个在包含文件时即使遇到错误，下面的代码仍然执行）、require()、require_once()（这两个在包含文件时遇到错误会报错退出程序）。</p>\n<h6 id=\"挖掘经验-3\"><a href=\"#挖掘经验-3\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h6><p>文件包含漏洞大多出现在模块加载、模板加载以及cache调用的地方。在挖掘漏洞时可以跟踪程序运行流程，看模块加载包含的文件是否可控等，另一个是直接搜索上文四个函数来回溯寻找可控变量。一般该类漏洞都是本地文件包含，大多需要截断。</p>\n<h6 id=\"本地文件包含\"><a href=\"#本地文件包含\" class=\"headerlink\" title=\"本地文件包含\"></a>本地文件包含</h6><p>本地文件包含（local file include，LFI），大多出现在模块加载、模板加载和cache调用，有多种利用方式，如上传一个允许上传的文件格式的文件再包含以执行代码，包含PHP上传的临时文件，在请求URL或ua里面加入要执行的代码，WebServer记录到日志后再包含WebServer的日志，还有像Linux下可以包含/proc/self/environ文件。</p>\n<h6 id=\"远程文件包含\"><a href=\"#远程文件包含\" class=\"headerlink\" title=\"远程文件包含\"></a>远程文件包含</h6><p>远程文件包含（remote file include, RFI），需要设置allow_url_include = On，相比于本地包含来说更容易利用，但出现频率不高。</p>\n<h6 id=\"文件包含截断\"><a href=\"#文件包含截断\" class=\"headerlink\" title=\"文件包含截断\"></a>文件包含截断</h6><ol>\n<li>使用<code>%00</code>截断，最古老的方法，受限于GPC和addslashes等函数的过滤，另外PHP5.3之后的版本已经全面修复，不能使用该方法了。</li>\n<li>使用多个英文句号<code>.</code>和反斜杠<code>/</code>来阶段，不受GPC限制，但同样在PHP5.3之后被修复。</li>\n<li>远程文件包含时利用问号<code>？</code>来伪截断，不受GPC和PHP版本限制，只要能返回代码给包含函数就能执行。在HTTP协议里，访问<a href=\"http://remotehost/i.txt%E5%92%8C%E8%AE%BF%E9%97%AEhttp://remotehost/i.txt?.php\">http://remotehost/i.txt和访问http://remotehost/i.txt?.php</a> 返回的结果是一样的，因为WebServer把问号之后的内容当成请求参数，而txt不在WebServer里解析，参数对访问i.txt返回的内容不影响，实现伪截断。</li>\n</ol>\n<h5 id=\"文件读取（下载）漏洞\"><a href=\"#文件读取（下载）漏洞\" class=\"headerlink\" title=\"文件读取（下载）漏洞\"></a>文件读取（下载）漏洞</h5><h6 id=\"挖掘经验-4\"><a href=\"#挖掘经验-4\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h6><p>文件读取漏洞比较容易寻找，一种方式是可以先黑盒看功能点对应的文件，再去读文件源码。另一种是搜索文件读取的函数（<code>file_get_contents()、highlight_file()、fopen()、readfile()、fread()、fgetss()、fgets()、parse_ini_file()、show_source()、file()</code>），看有无可直接或间接控制的变量，除了正常读取文件的函数之外，另外一些其他功能的函数也可以用于读取文件，如include()等。</p>\n<h5 id=\"文件上传漏洞\"><a href=\"#文件上传漏洞\" class=\"headerlink\" title=\"文件上传漏洞\"></a>文件上传漏洞</h5><h6 id=\"挖掘经验-5\"><a href=\"#挖掘经验-5\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h6><p>挖掘简单，上传点常调用同一个上传类，上传函数又只有move_uploaded_file()这一个，所以最快方法就是直接搜索该函数，再去看调用的代码存不存在未限制上传格式或者可以绕过，其中问题较多的是黑名单限制文件格式以及未更改文件名的方式，在未改名的情况下，在Apache利用其向前寻找解析格式和IIS6的分号解析bug都可以执行代码。</p>\n<ol>\n<li>未过滤或本地过滤：共同点是都未在服务器端过滤。</li>\n<li>黑名单扩展名过滤：出现较少，存在限制的扩展名不够全、验证扩展名的方式存在问题可直接绕过或截断。</li>\n<li>文件头、content-type验证绕过：早期出现较多，上传文件时，如果直接上传一个非图片文件会被提示不是图片文件，但只要在文件头里加上<code>GIF89a</code>后上传，则验证通过。这是因为程序用了如getimagesize()函数等。content-type是在http request请求头内，所以可以被攻击者修改，而早期的一些程序只是单纯的验证了这个值。</li>\n</ol>\n<h5 id=\"文件删除漏洞\"><a href=\"#文件删除漏洞\" class=\"headerlink\" title=\"文件删除漏洞\"></a>文件删除漏洞</h5><p>常出现在有文件管理功能的应用上，原理和文件读取差不多，只不过利用的函数不一样，一般因为删除的文件名可以用<code>../</code>跳转，或者没有限制当前用户权限。</p>\n<h6 id=\"挖掘经验-6\"><a href=\"#挖掘经验-6\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h6><p>。挖掘漏洞可以先去找相应的功能点，黑盒测试一下能不能删除某个文件，如果删除不了，再去从执行流程追踪提交的文件名参数的传递过程。如果纯白盒挖，也可以去搜索带有变量参数的unlink()，采取回溯变量的方式。</p>\n<h5 id=\"文件操作漏洞防范\"><a href=\"#文件操作漏洞防范\" class=\"headerlink\" title=\"文件操作漏洞防范\"></a>文件操作漏洞防范</h5><h6 id=\"通用文件操作防御\"><a href=\"#通用文件操作防御\" class=\"headerlink\" title=\"通用文件操作防御\"></a>通用文件操作防御</h6><ol>\n<li>合理的权限管理。</li>\n<li>以加密等方式替代直接将文件名作为下载参数的操作。</li>\n<li>避免目录跳转，禁止参数中携带<code>..</code>、<code>/</code>、<code>\\</code>来跳转目录。</li>\n</ol>\n<h6 id=\"文件上传漏洞防范\"><a href=\"#文件上传漏洞防范\" class=\"headerlink\" title=\"文件上传漏洞防范\"></a>文件上传漏洞防范</h6><ol>\n<li>白名单过滤文件扩展名，使用in_array或<code>===</code>来对比扩展名。</li>\n<li>保存上传文件时重命名文件，文件名采用时间戳的拼接随机数的MD5值保存方式<code>md5(time()+rand(1,10000))</code></li>\n</ol>\n<h4 id=\"代码执行漏洞\"><a href=\"#代码执行漏洞\" class=\"headerlink\" title=\"代码执行漏洞\"></a>代码执行漏洞</h4><h5 id=\"挖掘经验-7\"><a href=\"#挖掘经验-7\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h5><p>eval()和assert()函数导致的代码执行漏洞大多是因为载入缓存或者模板以及对变量的处理不严格导致。<br>preg_replace()函数代码执行需要存在/e参数，这个函数原本是用来处理字符串的，因此漏洞出现最多的是在对字符串的处理，比如URL、HTML标签以及文章内容等过滤功能。<br>call_user_func()和call_user_func_array()函数的功能是调用函数，多用在框架里面动态调用函数，所以一般比较小的程序不常出现该类代码执行。array_map()函数的作用是调用函数并且除第一个参数外其它参数为数组，通常会写死第一个参数，即调用的参数，类似这三个函数功能的函数还有很多。<br>还有一类非常常见的是动态函数的代码执行，如<code>$_GET($_POST[&quot;xx&quot;])</code>。</p>\n<h5 id=\"代码执行函数\"><a href=\"#代码执行函数\" class=\"headerlink\" title=\"代码执行函数\"></a>代码执行函数</h5><ol>\n<li>eval和assert函数：用于动态执行函数，所以它们的参数就是PHP代码。</li>\n<li>preg_replace函数：对字符串进行正则处理。</li>\n<li>调用函数过滤不严：数十个函数有调用其它函数的功能，如果传入的函数名可控，那么就可以调用意外的函数来执行需要的代码，即存在代码执行漏洞。这些函数有：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">call_user_func()、call_user_func_array()、array_map()、</span><br><span class=\"line\">usort()、uasort()、uksort()、array_filter()、</span><br><span class=\"line\">array_reduce()、array_diff_uassoc()、array_diff_ukey()、</span><br><span class=\"line\">array_udiff()、array_udiff_assoc()、array_udiff_uassoc()、</span><br><span class=\"line\">array_intersect_assoc()、array_intersect_uassoc、</span><br><span class=\"line\">array_uintersect()、array_uintersect_assoc()、</span><br><span class=\"line\">array_uintersect_uassoc()、array_walk()、array_walk_recursive()、</span><br><span class=\"line\">xml_set_character_data_handler()、xml_set_default_handler()、</span><br><span class=\"line\">xml_set_element_handler()、xml_set_end_namespace_decl_handler()、</span><br><span class=\"line\">xml_set_external_entity_ref_handler()、xml_set_notation_decl_handler()、</span><br><span class=\"line\">xml_set_processing_instruction_handler()、</span><br><span class=\"line\">xml_set_start_namespace_decl_handler()、</span><br><span class=\"line\">xml_set_unparsed_entity_decl_handler()、stream_filter_register()、</span><br><span class=\"line\">set_error_handler()、register_shutdown_function()、register_tick_function()</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"动态函数执行\"><a href=\"#动态函数执行\" class=\"headerlink\" title=\"动态函数执行\"></a>动态函数执行</h5><p>由于PHP的特性，PHP函数可以直接由字符串拼接，加大了安全控制的难度。PHP动态函数写法为<code>变量（参数）</code>，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$_GET[&#39;a&#39;]($_GET[&#39;b&#39;]);# poc:?a&#x3D;assert&amp;b&#x3D;phpinfo()</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>想要挖掘这种形式的代码执行漏洞，需要找可控的动态函数名。</p>\n<h5 id=\"漏洞防范-3\"><a href=\"#漏洞防范-3\" class=\"headerlink\" title=\"漏洞防范\"></a>漏洞防范</h5><p>采用参数白名单过滤，这里的白名单并不是说完全固定为参数，可以结合正则表达式来进行白名单限制。</p>\n<h4 id=\"命令执行漏洞\"><a href=\"#命令执行漏洞\" class=\"headerlink\" title=\"命令执行漏洞\"></a>命令执行漏洞</h4><p>代码执行漏洞指的是可以执行PHP脚本代码，而命令执行漏洞指的是可以执行系统或应用指令（如CMD命令或bash命令）的漏洞。PHP的命令执行漏洞主要基于一些函数的参数过滤不严导致，可以执行命令的函数有system()、exec()、shell_exec()、passthru()、pcntl_exec()、popen()、proc_open()这七个函数，另外反引号也可以执行命令，不过实际上这种方式也是调用的shell_exec()函数。PHP命令执行继承了WebServer用户权限，一般该权限都可以向Web目录写文件。</p>\n<h5 id=\"挖掘经验-8\"><a href=\"#挖掘经验-8\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h5><p>该漏洞多出现在包含环境包的应用里，一般这类产品会有额外的脚本来协助处理日志及数据库等，web应用会有比较多的点之间使用system()、exec()、shell_exec()、passthru()、pcntl_exec()、popen()、proc_open()等函数执行系统命令来调用这些脚本，可以直接在代码中搜索这几个函数，收获应该会不少。除了这类应用，还有一些调用外部程序的功能也会出命令执行漏洞，由于特征明显，可以直接搜索函数名进行挖掘。</p>\n<h6 id=\"命令执行函数\"><a href=\"#命令执行函数\" class=\"headerlink\" title=\"命令执行函数\"></a>命令执行函数</h6><p>上述的函数中，sustem()、exec()、shell_exec()、passthru()以及反引号是可以直接传入命令并返回执行结果。<br>popen()、proc_open()函数不会直接返回执行结果，而是返回一个文件指针。</p>\n<h6 id=\"反引号命令执行\"><a href=\"#反引号命令执行\" class=\"headerlink\" title=\"反引号命令执行\"></a>反引号命令执行</h6><p>反引号执行命令是调用的shell_exec()函数。</p>\n<h5 id=\"漏洞防范-4\"><a href=\"#漏洞防范-4\" class=\"headerlink\" title=\"漏洞防范\"></a>漏洞防范</h5><ol>\n<li>使用PHP自带的命令防注入函数，包括escapeshellcmd()（过滤整条命令）和escapeshellarg()（保证传入命令执行函数的参数确实是以字符串参数形式存在，不能被注入）。</li>\n<li>对命令执行函数的参数做白名单限制。（通用修复方法）</li>\n</ol>\n<h3 id=\"漏洞挖掘与防范（深入篇）\"><a href=\"#漏洞挖掘与防范（深入篇）\" class=\"headerlink\" title=\"漏洞挖掘与防范（深入篇）\"></a>漏洞挖掘与防范（深入篇）</h3><h4 id=\"变量覆盖漏洞\"><a href=\"#变量覆盖漏洞\" class=\"headerlink\" title=\"变量覆盖漏洞\"></a>变量覆盖漏洞</h4><p>变量覆盖指的是可以用我们自定义的参数值替换程序原有的变量值，通常需要结合程序的其它功能来实现完整攻击。<br>该类漏洞大多由函数使用不当导致，常引发漏洞的函数有：extract()函数和parse_str()，import_request_variables()函数则是用于未开启全局变量注册时，调用该函数相当于开启了全局变量注册，在PHP5.4后该函数已经被取消。另外部分应用利用$$的方式注册变量没验证已有变量导致覆盖，这些应用在使用外部传递进来的参数时不是用类似于<code>$_GET[&#39;key&#39;]</code>这样原始的数组变量，而是把里面的key注册成一个变量$key，注册过程中没有验证该变量是否已经存在，所以会导致变量覆盖。</p>\n<h5 id=\"挖掘经验-9\"><a href=\"#挖掘经验-9\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h5><p>由于变量覆盖漏洞通常要结合其他功能代码来实现完整攻击，所以挖掘可用的变量覆盖漏洞还要考虑究竟哪些变量可以被覆盖并且后面有被使用。<br>由函数导致的变量覆盖比较好挖掘，寻找参数带有变量的extract()、parse_str()函数，回溯变量是否可控。import_request_variables()则只需要找没有初始化且操作前没有赋值的变量，就可以大胆的提交该变量作为参数，另外只要写在该函数前的变量，不管是否已经初始化都可以覆盖，不过该函数只在PHP4-4.1.0以及5-5.4.0可用。<br>关于国内很多程序使用<code>$$</code>符号注册变量会导致变量覆盖，可以直接搜索<code>$$</code>去挖掘，不过建议挖掘前应通读核心文件。</p>\n<h6 id=\"函数使用不当\"><a href=\"#函数使用不当\" class=\"headerlink\" title=\"函数使用不当\"></a>函数使用不当</h6><ol>\n<li>extract()（最常见）：将数组中的键值对注册成变量，函数结构如下： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int extract (array &amp;$var_array [, int $extract_type &#x3D; EXTR_OVERWRITE [, string $prefix &#x3D; NULL]])</span><br></pre></td></tr></table></figure>\n 该函数有3种可能会覆盖已有变量，第一种是第二个参数为EXTR_OVERWRITE，它表示如果有冲突，则覆盖已有变量；第二种是只传入第一个参数，默认为EXTR_OVERWRITE模式；第三种则是第二个参数为EXTR_IF_EXISTS，表示仅在当前符号表中已有同名变量时，覆盖它们的值，其它的都不注册新变量。</li>\n<li>parse_str()：解析字符串并注册成变量，在注册变量前不会验证当前变量是否已经存在，所以会直接覆盖掉已有变量。该函数有两个参数： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void parse_str(string $str [, array &amp;$arr])</span><br></pre></td></tr></table></figure>\n 其中<code>$str</code>是必须的，代表要解析注册成变量的字符串，形式为<code>a=1</code>，经过函数后会注册变量$a并赋值1。第二个参数$arr是一个数组，当第二个参数存在时，注册的变量会放在这个数组内，但如果该数组内原先就存在相同的键（key），则会覆盖原有键值。</li>\n<li>import_request_variables()：作用是把GET、POST、COOKIE的参数注册成变量，用在register_globals被禁止的时候，需要PHP4.1-5.4之间的版本。不过建议不开globals的时候也不要使用该函数，容易造成变量覆盖。</li>\n</ol>\n<h6 id=\"变量覆盖\"><a href=\"#变量覆盖\" class=\"headerlink\" title=\"$$变量覆盖\"></a>$$变量覆盖</h6><p>由于双$导致原变量被覆盖，在漏洞代码之前的变量都可以被覆盖。</p>\n<h5 id=\"漏洞防范-5\"><a href=\"#漏洞防范-5\" class=\"headerlink\" title=\"漏洞防范\"></a>漏洞防范</h5><p>最常见漏洞点是做变量注册以及赋值给变量的时候没有验证变量是否存在，所以推荐使用原始的变量数组，如<code>$_GET</code>、<code>$_POST</code>，或者在注册变量前一定要验证变量是否存在。</p>\n<h6 id=\"使用原始变量\"><a href=\"#使用原始变量\" class=\"headerlink\" title=\"使用原始变量\"></a>使用原始变量</h6><p>由于上述变量覆盖漏洞是在进行变量注册时导致，所以要解决变量覆盖的问题，最直接的方法就是不进行变量注册，直接使用原生的<code>$_GET</code>、<code>$_POST</code>等数组变量进行操作，如果考虑到程序可读性等原因，需要注册个别变量，可以直接在代码中定义变量，然后再把请求中的值赋值给它。</p>\n<h6 id=\"验证变量存在\"><a href=\"#验证变量存在\" class=\"headerlink\" title=\"验证变量存在\"></a>验证变量存在</h6><p>如果一定要用前面几种方式注册变量，可以在注册变量前先判断变量是否存在，如使用extract()函数则可以配置第二个参数为EXTR_SKIP。使用parse_str()函数注册变量钱需要自行通过代码判断变量是否存在。不建议使用import_request_variables()注册全局变量，会导致变量不可控。最重要的，自行申明的变量一定要初始化，不然即便注册在执行代码前也能被覆盖。</p>\n<h4 id=\"逻辑处理漏洞\"><a href=\"#逻辑处理漏洞\" class=\"headerlink\" title=\"逻辑处理漏洞\"></a>逻辑处理漏洞</h4><p>此次指程序在业务逻辑上的漏洞。</p>\n<h5 id=\"挖掘经验-10\"><a href=\"#挖掘经验-10\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h5><p>漏洞大多存在于逻辑处理及业务流程中，没有特别明显的关键字用于快速定位，挖掘技巧通常是通读功能点源码，熟悉业务流程，可关注程序是否可重复安装、修改密码处是否可越权修改其它用户密码、找回密码验证码是否可暴力破解以及修改其它用户密码、cookie是否可预测或cookie验证是否可绕过等。</p>\n<h6 id=\"等于与存在判断绕过\"><a href=\"#等于与存在判断绕过\" class=\"headerlink\" title=\"等于与存在判断绕过\"></a>等于与存在判断绕过</h6><p>判断函数存在漏洞时，可以逃逸判断函数绕过逻辑。常见存在漏洞的判断函数有：</p>\n<ol>\n<li>in_array()：用于判断一个值是否在某个数组列表里，该函数存在一个问题，比较前会自动做类型转换，实现输入参数并不全等于数组任意值时，也可以实现绕过并注入。</li>\n<li>is_numeric()：用于判断一个变量是否为数字，检查通过返回true，否则返回false。该函数存在一个问题，当传入参数为hex时则直接通过并返回true，而mysql是可以直接使用hex编码代替字符串名为的。所以这里虽然不能直接注入SQL语句，但存在二次注入和XSS等漏洞隐患，比如当我们提交<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>的hex编码时，效果相同。如果程序有其它地方调用该值并直接输出，则有可能执行代码触发XSS漏洞。</li>\n<li>双等于和三等于：双等于在判断等于前会先做变量类型转换，三等于则不会，所以双等于存在安全风险。</li>\n</ol>\n<h6 id=\"账户体系中的越权漏洞\"><a href=\"#账户体系中的越权漏洞\" class=\"headerlink\" title=\"账户体系中的越权漏洞\"></a>账户体系中的越权漏洞</h6><p>漏洞分为水平越权和垂直越权，但漏洞原理相同，都是账户体系在判断权限时不严格导致存在绕过漏洞。这一类绕过通常发生在cookie验证不严、简单判断用户提交的参数，归根结底，都是因为参数在客户端提交，服务端未严格校验。</p>\n<h6 id=\"未exit或return引发的安全问题\"><a href=\"#未exit或return引发的安全问题\" class=\"headerlink\" title=\"未exit或return引发的安全问题\"></a>未exit或return引发的安全问题</h6><p>某些情况下，在经过if条件判断之后，要么继续执行if后面的代码，要么在if流程内退出当前操作，但该退出行为，有不少程序忘记写return、die()、或者exit()，导致程序继续执行。</p>\n<h6 id=\"常见支付漏洞\"><a href=\"#常见支付漏洞\" class=\"headerlink\" title=\"常见支付漏洞\"></a>常见支付漏洞</h6><p>最常见支付漏洞有四种，第1、2、3种比较简单，分别是客户端可修改单价、总价和购买数量，服务器端未严格校验导致。部分商城程序是直接由单价和数量计算总价，但并没有验证这两个数字是否小于0。这种形式的支付漏洞，可以通过寻找支付代码并看代码过滤情况挖掘。<br>还有一种是以重复发包来利用时间差，少量钱多次购买，如使用手机给腾讯发送购买QQ业务的短信再快速取消。这类漏洞可从判断余额及扣费功能代码处寻找。</p>\n<h5 id=\"漏洞防范-6\"><a href=\"#漏洞防范-6\" class=\"headerlink\" title=\"漏洞防范\"></a>漏洞防范</h5><ol>\n<li>深入熟悉业务逻辑。</li>\n<li>多熟悉函数的功能和差异。</li>\n</ol>\n<h4 id=\"会话认证漏洞\"><a href=\"#会话认证漏洞\" class=\"headerlink\" title=\"会话认证漏洞\"></a>会话认证漏洞</h4><h5 id=\"挖掘经验-11\"><a href=\"#挖掘经验-11\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h5><p>在cookie验证上出现几率较高，通常是没有使用session认证，而是将用户信息直接保存在cookie中，以备程序使用时直接调用。一般这个过程都会有一个统一的函数去调用数据，容易导致SQL注入和越权等漏洞。在挖掘登录认证漏洞时，可以先看程序的登录功能代码，看整个登录过程的业务逻辑有没有可以控制session值或直接绕过密码验证的漏洞；另外需要关注程序验证是否为登录的代码，通俗的说是验证cookie的代码，是不是直接取cookie的值，然后如何判断这个值来验证是否登录。</p>\n<h6 id=\"cookie认证安全\"><a href=\"#cookie认证安全\" class=\"headerlink\" title=\"cookie认证安全\"></a>cookie认证安全</h6><p>cookie可以保存任何字符串，各个浏览器保存cookie字节数大小不一样，一般不超过4096个字节，通常用于保存登录帐号的标识信息。cookie出现问题较多的是cookie的SQL注入等常见漏洞，以及web应用程序在服务端直接读取cookie值来操作当前用户数据，由于cookie可以伪造，从而导致伪造用户身份登录的漏洞。</p>\n<h5 id=\"漏洞防范-7\"><a href=\"#漏洞防范-7\" class=\"headerlink\" title=\"漏洞防范\"></a>漏洞防范</h5><p>了解认证的业务逻辑，严格限制输入的异常字符以及避免直接使用客户端提交的内容进行操作。应该结合cookie和session，不能直接从cookie获取参数值进行操作，另外注意设置session时，需要保证客户端不能操作敏感session参数。特别注意敏感数据不要放在cookie中，cookie在浏览器端以及传输过程中都有被窃取的可能性。</p>\n<h3 id=\"二次漏洞审计\"><a href=\"#二次漏洞审计\" class=\"headerlink\" title=\"二次漏洞审计\"></a>二次漏洞审计</h3><h4 id=\"什么是二次漏洞\"><a href=\"#什么是二次漏洞\" class=\"headerlink\" title=\"什么是二次漏洞\"></a>什么是二次漏洞</h4><p>需要先构造好利用代码写入网站保存，在第二次或多次请求后调用攻击代码触发或修改配置触发的漏洞叫做二次漏洞。该漏洞的出现归根结底是开发者在可信数据的逻辑上考虑不全面。</p>\n<h4 id=\"二次漏洞审计技巧\"><a href=\"#二次漏洞审计技巧\" class=\"headerlink\" title=\"二次漏洞审计技巧\"></a>二次漏洞审计技巧</h4><p>虽然二次漏洞写入和触发payload很可能不在同一个地方，但还是可以通过找相关关键字去定位的，只是精准度会稍微降低。大多数二次漏洞的逻辑性比一般的漏洞强的多，所以最好还是把全部代码读一遍，更好的了解业务逻辑和全局配置。<br>业务逻辑越复杂的地方越容易出现二次漏洞，我们可以重点关注购物车、订单、引用数据、文章编辑、草稿等和数据库交互的地方，以及和文件系统交互的系统配置文件（一般需要管理员权限才能操作）。<br>在二次漏洞类型里，可以重点关注SQL注入、XSS。</p>\n<h3 id=\"代码审计小技巧\"><a href=\"#代码审计小技巧\" class=\"headerlink\" title=\"代码审计小技巧\"></a>代码审计小技巧</h3><h4 id=\"钻GPC等转义的空子\"><a href=\"#钻GPC等转义的空子\" class=\"headerlink\" title=\"钻GPC等转义的空子\"></a>钻GPC等转义的空子</h4><p>GPC会自动把提交内容的敏感字符转义导致攻击代码无法执行，但还是存在漏洞：</p>\n<h5 id=\"SERVER变量\"><a href=\"#SERVER变量\" class=\"headerlink\" title=\"$_SERVER变量\"></a>$_SERVER变量</h5><p>在PHP5后，用<code>$_SERVER</code>取到的<code>header</code>字段不受GPC影响，且普通程序员很少会考虑到这些字段。<code>header</code>注入里常见的是<code>user-agent</code>、<code>referer</code>以及<code>client-ip/x-forward-for</code>，因为大多数Web应用都会记录访问者的IP以及<code>referer</code>等信息，同样的<code>$_FILES</code>变量也不受GPC保护。</p>\n<h5 id=\"编码转换问题\"><a href=\"#编码转换问题\" class=\"headerlink\" title=\"编码转换问题\"></a>编码转换问题</h5><p>宽字节注入就是一种非常典型的编码转换问题导致绕过GPC的方式。不仅是PHP与MySQL交互过程中会发生编码转换导致问题，PHP自带的编码转换函数也会发生问题，比如mb_convert_encoding()、iconv()，也就是只要发生编码转换就有可能会出现问题。</p>\n<h4 id=\"神奇的字符串\"><a href=\"#神奇的字符串\" class=\"headerlink\" title=\"神奇的字符串\"></a>神奇的字符串</h4><h5 id=\"字符处理函数报错信息泄漏\"><a href=\"#字符处理函数报错信息泄漏\" class=\"headerlink\" title=\"字符处理函数报错信息泄漏\"></a>字符处理函数报错信息泄漏</h5><p>页面的报错信息通常能泄漏文件绝对路径、代码、变量及函数等信息，页面报错有很多情况，但不是所有情况页面都会出现错误信息，显示错误信息需要在PHP配置文件中打开并设置等级。<br>大多数错误提示会显示文件路径，可以获取Web路径。由于用户提交数据在后端大多是以字符串方式处理，所以利用字符串处理函数报错成了必不可少的方法，对于利用参数来报错的方式，给函数传入不同类型的变量是最实用的方式。</p>\n<h5 id=\"字符串截断\"><a href=\"#字符串截断\" class=\"headerlink\" title=\"字符串截断\"></a>字符串截断</h5><p>截断利用最多的是在文件操作上面，通常用来利用文件包含漏洞和文件上传漏洞，<code>%00</code>即NULL会被GPC和addslashes()过滤掉，所以利用<code>%00</code>截断需要GPC关闭以及不被addslashes()函数过滤，另外PHP5.3之后也不能用这种方式截断。</p>\n<ol>\n<li>iconv字符编码转换截断：如从UTF-8转换到GBK，部分代码不能被成功转换（chr(128)-chr(255)之间），在利用该函数转码时，遇到不能处理的字符串时后续字符串不会被处理。</li>\n</ol>\n<h4 id=\"php-输入输出流\"><a href=\"#php-输入输出流\" class=\"headerlink\" title=\"php://输入输出流\"></a>php://输入输出流</h4><h4 id=\"PHP代码解析标签\"><a href=\"#PHP代码解析标签\" class=\"headerlink\" title=\"PHP代码解析标签\"></a>PHP代码解析标签</h4><ol>\n<li>最标准的<code>&lt;?php?&gt;</code></li>\n<li>脚本标签：<code>&lt;script language=&quot;php&quot;&gt;&lt;/script&gt;</code>，可以正常解析PHP代码</li>\n<li>短标签：<code>&lt;?...?&gt;</code>，使用短标签需要在php.ini中设置short_open_tag=on，默认为on状态。</li>\n<li>asp标签<code>&lt;%...%&gt;</code>，在PHP3.0.4后可用，需要在php.ini中设置asp_tags=on，默认为off。<br>通常用于绕过<code>&lt;?php?&gt;</code>标签过滤以留后门及绕过Web程序或waf写入webshell。</li>\n</ol>\n<h4 id=\"fuzz漏洞发现\"><a href=\"#fuzz漏洞发现\" class=\"headerlink\" title=\"fuzz漏洞发现\"></a>fuzz漏洞发现</h4><h4 id=\"不严谨的正则表达式\"><a href=\"#不严谨的正则表达式\" class=\"headerlink\" title=\"不严谨的正则表达式\"></a>不严谨的正则表达式</h4><ol>\n<li>没有用<code>^</code>和<code>$</code>限定匹配开始位置</li>\n<li>特殊字符未转义，匹配特殊字符的原字符时需要使用反斜杠<code>\\</code>来进行转义，不然<code>.</code>则可以用来表示任何字符，存在安全隐患。</li>\n</ol>\n<h4 id=\"十余种MySQL报错注入\"><a href=\"#十余种MySQL报错注入\" class=\"headerlink\" title=\"十余种MySQL报错注入\"></a>十余种MySQL报错注入</h4><p>利用报错注入最快拿到注入的数据。</p>\n<ol>\n<li>floor():<code>id=1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)</code></li>\n<li>extractvalue():<code>id=1 and (extractvalue(1, concat(0x5c, (select user()))))</code></li>\n<li>updatexml():<code>id=1 AND (updatexml(1,concat(0x5e24,(select user()),0x5e24),1))</code></li>\n<li>GeometryCollection():<code>id=1 AND GeometryCollection((select * from(select * from(select user())a)b))</code></li>\n<li>polygon():<code>id=1 AND polygon((select * from(select * from(select user())a)b))</code></li>\n<li>multipoint():<code>id=1 AND multipoint((select * from(select * from(select user())a)b))</code></li>\n<li>multilinestring():<code>id=1 AND multilinestring((select * from(select * from(select user())a)b))</code></li>\n<li>multipolygon():<code>id=1 AND multipolygon((select * from(select * from(select user())a)b))</code></li>\n<li>linestring():<code>id=1 AND linestring((select * from(select * from(select user())a)b))</code></li>\n<li>exp():<code>id=1 and EXP(~(select * from(select user())a))</code></li>\n</ol>\n<h4 id=\"Windows-FindFirstFile\"><a href=\"#Windows-FindFirstFile\" class=\"headerlink\" title=\"Windows FindFirstFile\"></a>Windows FindFirstFile</h4><p>目前大多数程序会对上传文件名加密，这样我们就无法直接得到上传webshell文件路径，但在windows下时，我们只需要知道文件所在目录，利用win特性就可以访问文件，因为win在搜索文件时使用了FindFirstFile这一个winapi函数去一个文件夹（包括子文件夹）去搜索指定文件。<br>利用方法很简单，只需要将文件名不可知部分之后的字符用<code>&lt;</code>或<code>&gt;</code>代替即可，不过要注意，只使用一个<code>&lt;</code>或<code>&gt;</code>则只能代表一个字符，如果文件名是12345或更长，请求<code>1&lt;</code>或<code>1&gt;</code>都访问不到文件，需要<code>1&lt;&lt;</code>才能访问到，代表继续往下搜索，有点像win的短文件名。<br>目前所有PHP版本都可用，PHP并没有在语言层面禁止使用<code>&lt;&gt;</code>这些特殊字符，从函数层面来讲，可以利用这个特性的函数有：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include() include_once() require() require_once()</span><br><span class=\"line\">fopen() ziparchive::open()</span><br><span class=\"line\">copy()</span><br><span class=\"line\">file_get_contents() parse_ini_file() readfile()</span><br><span class=\"line\">file_put_contents()</span><br><span class=\"line\">mkdir()</span><br><span class=\"line\">tempnam() touch()</span><br><span class=\"line\">move_uploaded_file()</span><br><span class=\"line\">opendir() readdir() rewinddir() closedir()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"PHP可变变量\"><a href=\"#PHP可变变量\" class=\"headerlink\" title=\"PHP可变变量\"></a>PHP可变变量</h4><p>部分PHP应用在写配置文件或使用preg_replace()函数第二个参数赋值变量时，会用到双引号来代表string类型给变量赋值，存在代码执行漏洞。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a&#x3D;&quot;$&#123;@phpinfo()&#125;&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>注意，上述代码中的<code>@</code>是必须存在的，不然代码无法执行，但除了该符号外还有其它写法，只要不影响PHP规范就可以执行，举例：</p>\n<ol>\n<li>花括号内第一个字符为空格：<code>$a = &quot;$&#123; phpinfo()&#125;&quot;;</code></li>\n<li>花括号内第一个字符为TAB：<code>$a = &quot;$&#123;  phpinfo()&#125;&quot;;</code></li>\n<li>花括号内第一个字符为注释符：<code>$a = &quot;$&#123;/**/phpinfo()&#125;&quot;;</code></li>\n<li>花括号内第一个字符为回车换行符：<code>$a = &quot;$&#123; phpinfo()&#125;&quot;;</code></li>\n<li>花括号内第一个字符为加号：<code>$a = &quot;$&#123;+phpinfo()&#125;&quot;;</code></li>\n<li>花括号内第一个字符为减号：<code>$a = &quot;$&#123;-phpinfo()&#125;&quot;;</code></li>\n<li>花括号内第一个字符为感叹号：<code>$a = &quot;$&#123;!phpinfo()&#125;&quot;;</code><br>除此之外还有一些如<code>~</code>、<code>\\</code>等。</li>\n</ol>\n<h2 id=\"PHP安全编程规范\"><a href=\"#PHP安全编程规范\" class=\"headerlink\" title=\"PHP安全编程规范\"></a>PHP安全编程规范</h2><h3 id=\"参数的安全过滤\"><a href=\"#参数的安全过滤\" class=\"headerlink\" title=\"参数的安全过滤\"></a>参数的安全过滤</h3><h4 id=\"第三方过滤函数与类\"><a href=\"#第三方过滤函数与类\" class=\"headerlink\" title=\"第三方过滤函数与类\"></a>第三方过滤函数与类</h4><p>目前大多数程序都有一个统一的参数过滤入口，但对于特定场景和漏洞就不够好用。所以除了总入口，在具体功能点也需要进行过滤。</p>\n<h4 id=\"内置过滤函数\"><a href=\"#内置过滤函数\" class=\"headerlink\" title=\"内置过滤函数\"></a>内置过滤函数</h4><ol>\n<li>SQL注入过滤函数：有addslashes()、mysql_real_escape_string()以及mysql_escape_string()，作用都是给字符串添加反斜杠<code>\\</code>来转义掉单引号、双引号、反斜杠以及空字符NULL。addslashes()和mysql_escape_string()都是直接在敏感字符串前加反斜杠，可能会存在宽字节注入绕过的问题，而mysql_real_escape_string()会考虑当前连接数据库的字符集编码，更加安全。</li>\n<li>XSS过滤函数：有htmlspecialchars()和strip_tags()，功能不同，htmlspecialchars作用是将字符串中的特殊字符转换成HTML实体编码，能够干掉大多数的XSS攻击。strip_tags则是用来去掉HTML及PHP标记。</li>\n<li>命令执行过滤函数：有escapeshellcmd()和escapeshellarg()两个函数，escapeshellcmd过滤的字符为下方代码框所示，win下过滤方式则是在这些字符前面加了<code>^</code>符号，linux下则是在这些字符前加了反斜杠。escapeshellarg函数过滤较简单，给所有参数加上一对双引号，强制为字符串。 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;,;,&#96;,|,*,?,~,&lt;,&gt;,^,(,),[,],&#123;,&#125;,$,\\,\\x0A,\\xFF,% 以及单双引号</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用安全的加密算法\"><a href=\"#使用安全的加密算法\" class=\"headerlink\" title=\"使用安全的加密算法\"></a>使用安全的加密算法</h3><ol>\n<li>对称加密：算法安全性比较高，数据的实际安全性取决于密钥的管理。所以不建议使用对称加密对用户密码进行加密存储。</li>\n<li>非对称加密：安全性比对称加密更好。</li>\n<li>单向加密：不可逆算法，常见如MD系列和sha1，通常用于保存密码和做数字签名，但存在碰撞的问题。</li>\n</ol>\n<h3 id=\"业务功能安全设计\"><a href=\"#业务功能安全设计\" class=\"headerlink\" title=\"业务功能安全设计\"></a>业务功能安全设计</h3><h4 id=\"验证码\"><a href=\"#验证码\" class=\"headerlink\" title=\"验证码\"></a>验证码</h4><h5 id=\"验证码绕过\"><a href=\"#验证码绕过\" class=\"headerlink\" title=\"验证码绕过\"></a>验证码绕过</h5><ol>\n<li>不刷新直接绕过：后端接收一次请求后并没有主动刷新验证码，将验证码和session绑定在一起，为了保证验证码正常使用，会把验证码明文或加密后放在Cookie或POST数据包里，所以每次只要同一个数据包里的两个验证码对应即可绕过。（重复发包利用？）</li>\n<li>暴力破解：验证码能够被爆破，主要是程序没有设置验证码错误次数和超时设定，导致能够不断尝试。</li>\n<li>机器识别：利用机器识别验证码。</li>\n<li>打码平台：人工打码绕过。</li>\n</ol>\n<h6 id=\"对策\"><a href=\"#对策\" class=\"headerlink\" title=\"对策\"></a>对策</h6><ol>\n<li>设置验证码错误次数（最重要）。</li>\n<li>不把验证码放在HTML页面或cookie中。</li>\n<li>验证码设置只能请求一次，请求一次后不管错误与否都在后端程序强制刷新。</li>\n<li>短信或邮件验证码必须要6位以上字母和数字混合，图片或语音验证码需要加强混淆干扰。（短信验证码这条似乎在当前不适用，多数厂商选择限制短时间同IP发包等，但不增加验证码复杂度）</li>\n<li>验证码要动态生成，不能统一生成多次调用。</li>\n</ol>\n<h5 id=\"验证码资源滥用\"><a href=\"#验证码资源滥用\" class=\"headerlink\" title=\"验证码资源滥用\"></a>验证码资源滥用</h5><p>利用大量网站短信验证码未限制获取验证码次数和时间间隔的接口，实现短信/邮箱轰炸。防护比较简单，限制单个手机号在一个时间段内请求接收短信的次数，或限制某一IP在一个时间段内请求接收短信的次数。</p>\n<h4 id=\"用户登录\"><a href=\"#用户登录\" class=\"headerlink\" title=\"用户登录\"></a>用户登录</h4><h5 id=\"撞库登录\"><a href=\"#撞库登录\" class=\"headerlink\" title=\"撞库登录\"></a>撞库登录</h5><p>指登录口没有做登录次数限制，导致可以使用不同的用户及密码不断进行登录尝试，遍历用户密码。撞库漏洞情况有：</p>\n<ol>\n<li>用户名和密码错误次数都无限制。</li>\n<li>单时间段内用户密码错误次数限制。（可以使用单密码和用户名列表撞库）</li>\n<li>单时间段内IP登录错误次数限制。（存在误杀内网用户的可能）<br>比较好的解决方案是使用登录验证码和多因素认证。</li>\n</ol>\n<h5 id=\"API登录\"><a href=\"#API登录\" class=\"headerlink\" title=\"API登录\"></a>API登录</h5><p>免重新登录跳转处存在漏洞，如修改用户参数实现任意登录。对于这种漏洞注意以下安全点：</p>\n<ol>\n<li>登录密钥（clientkey）需要不可预测且不固定，生成key的算法中加入随机字符。</li>\n<li>API接口禁止搜索引擎收录。</li>\n<li>登录密钥当次绑定当前主机，换机器不可用，防止木马和嗅探。</li>\n</ol>\n<h4 id=\"用户注册\"><a href=\"#用户注册\" class=\"headerlink\" title=\"用户注册\"></a>用户注册</h4><ol>\n<li>设计验证码。</li>\n<li>采集用户机器唯一识别码，拦截短时间内多次注册。</li>\n<li>根据帐号格式自学习识别垃圾帐号。</li>\n<li>防止SQL注入漏洞与XSS漏洞（常见）。</li>\n</ol>\n<h4 id=\"密码找回\"><a href=\"#密码找回\" class=\"headerlink\" title=\"密码找回\"></a>密码找回</h4><ol>\n<li>输入用户名/邮箱/手机阶段：抓包修改手机/邮箱参数。</li>\n<li>填写验证码和新密码阶段：<ul>\n<li>验证凭证简单，可以被暴力破解。</li>\n<li>验证凭证算法简单，凭证可以被预测。</li>\n<li>验证凭证直接保存在源码里。</li>\n</ul>\n</li>\n<li>发送新密码阶段：<br>凭证未绑定用户：请求发送至邮箱的找回密码链接时，后端根据uid和key对应判断该链接有效，但将新密码提交到服务器时，服务器端没有判断当前key是否和uid或邮箱匹配，直接修改掉uid或邮箱指定的用户密码。这样只要拦截修改密码的请求包，篡改用户参数即可。所以安全风险点应该注意的有：<ul>\n<li>接收验证码的邮箱和手机号不可由用户控制，应直接从数据库读取。</li>\n<li>加强验证凭证复杂度，防止被暴力破解。</li>\n<li>限制验证凭证错误次数，单用户在一定时间内验证码错误一定次数，强制等待一段时间。</li>\n<li>验证凭证设置失效时间。</li>\n<li>验证凭证不要保存在页面。</li>\n<li>输入用户邮箱或ID、手机号取验证凭证的地方需要设置验证码防止短信炸弹和批量找回等。</li>\n<li>验证凭证跟用户名、用户ID、用户邮箱绑定，找回密码时验证当前凭证是否是当前用户的。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"资料查看和修改\"><a href=\"#资料查看和修改\" class=\"headerlink\" title=\"资料查看和修改\"></a>资料查看和修改</h4><p>这里主要介绍的是越权漏洞的利用。</p>\n<ol>\n<li>未验证用户权限：直接修改当前资源ID即可访问该资源，没有验证当前资源是否属于当前用户。</li>\n<li>未验证当前登录用户：虽然程序绑定了用户ID和资源ID，但该用户ID是访问资源时直接从cookie或post、get参数里获取，所以可以通过修改成另一用户ID，利用其权限操作资源。<br>上述漏洞较多出现在用户资料修改，及用户资料查看。<br>防御思路有：</li>\n</ol>\n<ul>\n<li>用户资源ID（订单ID、地址ID等）绑定到用户，只允许有权限的用户查看。</li>\n<li>当前用户信息存储到session，不放在request中，避免攻击者修改。</li>\n</ul>\n<h4 id=\"投票-积分-抽奖\"><a href=\"#投票-积分-抽奖\" class=\"headerlink\" title=\"投票/积分/抽奖\"></a>投票/积分/抽奖</h4><p>共同点：<code>单个用户次数存在限制</code>，该限制存在很多绕过方式。<br>通常有几种利用方法：</p>\n<ol>\n<li>cookie或POST请求正文绕过。修改cookie或post请求数据产生绕过。</li>\n<li>基于IP验证。看程序获取IP的方式，如果是client-ip或x_forward_for获取IP，可直接伪造IP绕过。</li>\n<li>基于用户认证。利用批量注册刷票，或在投票时随意修改POST包或cookie里的当前uid、用户名等查看是否能够绕过限制。<br>从上述利用手段可以看到主要三个点是IP、登录用户、cookie，可用性比较高的防御手段如下：</li>\n<li>机器识别码验证。</li>\n<li>操作需要登录，当前用户信息从session读取。</li>\n</ol>\n<h4 id=\"充值支付\"><a href=\"#充值支付\" class=\"headerlink\" title=\"充值支付\"></a>充值支付</h4><p>主要有四种情况：客户端可修改单价、总价和购买数量以及利用时间差多次购买。<br>主要应对手法是：</p>\n<ol>\n<li>保证数据可信，商品单价和总价不可从客户端获取。</li>\n<li>购买数量不能小于等于0。</li>\n<li>账户支付锁定机制，当一个支付操作开始就应该立马锁定当前用户，不能同时两个后端请求对余额进行操作。</li>\n</ol>\n<h4 id=\"私信及反馈\"><a href=\"#私信及反馈\" class=\"headerlink\" title=\"私信及反馈\"></a>私信及反馈</h4><p>除去特殊情况下可以滤去的SQL注入或命令执行等少见漏洞外，最常见的就是XSS漏洞以及越权漏洞。</p>\n<h4 id=\"远程地址访问\"><a href=\"#远程地址访问\" class=\"headerlink\" title=\"远程地址访问\"></a>远程地址访问</h4><p>访问远程地址获取资源的功能可能会被利用（如填入内网地址）<br>利用限制填写来防御该类漏洞，但大部分厂商修复时不会考虑到短地址的问题，修复后仍然可以通过生成短链接的方式利用。</p>\n<h4 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h4><p>本身就是一个高危功能，权限管理不当会导致被攻击者利用写入webshell。<br>为了保证安全，在满足业务需求的情况下，设计时应遵循以下几点：</p>\n<ol>\n<li>禁止写入脚本可在服务器端执行的文件：如服务器可解析PHP，那么此次就需要限制不能操作PHP扩展名的文件和PHP标签的代码。</li>\n<li>限制文件管理功能操作的目录：限制文件管理功能只能操作固定目录，目录不能从客户端提交，在代码中设置好即可，如果实在需要进行目录跳转的话，一定要禁止提交<code>../</code>以及<code>\\..</code>避免越权操作其它目录。</li>\n<li>限制文件管理功能访问权限：虽然文件管理是正常功能，但存在一点后门的性质，所以对该功能的访问权限一定要严格控制。</li>\n<li>禁止上传特殊字符文件名的文件：大多数应用会对上传文件进行展示，特别是网盘类应用，注意对上传文件名进行检查，禁止文件名中有尖括号、单双引号等特殊字符，避免攻击者用文件名进行XSS攻击。</li>\n</ol>\n<h4 id=\"数据库管理\"><a href=\"#数据库管理\" class=\"headerlink\" title=\"数据库管理\"></a>数据库管理</h4><p>跟文件管理一样，也是高位功能，如果启动数据库服务的系统用户以及数据库用户的权限都够大，完全可以利用该功能直接执行系统命令及操作服务器上的文件。</p>\n<ol>\n<li>限制可以操作的数据库表，要么在代码内写死只能操作哪些表（如备份），如果是执行SQL语句的方式可以另建一个mysql用户，限制可操作的表和字段。</li>\n<li>限制备份到服务器上的文件名，需要随机生成且长度不低于16位，扩展名不能自定义，防止攻击者利用该功能导出webshell或猜解文件名直接下载。</li>\n</ol>\n<h4 id=\"命令-代码执行\"><a href=\"#命令-代码执行\" class=\"headerlink\" title=\"命令/代码执行\"></a>命令/代码执行</h4><p>命令执行和代码执行功能通常都在系统后台，相比来说，命令执行的功能使用更多，代码执行功能在特殊应用上才会存在。设计该类功能时应该注意以下几点：</p>\n<ol>\n<li>严格控制该功能访问权限，建议高权限才能访问。</li>\n<li>在满足业务需求的情况下，可以设置命令白名单，可以使用escapeshellcmd()以及escapeshellarg()函数进行过滤，命令直接写死在代码中更好。</li>\n<li>给命令及代码执行功能设置独立密码。</li>\n<li>代码执行功能限制脚本可访问的路径。</li>\n<li>在满足需求的情况下限制当前执行命令的系统权限。</li>\n</ol>\n<h4 id=\"文件-数据库备份\"><a href=\"#文件-数据库备份\" class=\"headerlink\" title=\"文件/数据库备份\"></a>文件/数据库备份</h4><p>是非常常见且非常容易出现安全问题的功能。常见问题有：</p>\n<ol>\n<li>未授权访问和越权访问：未授权访问体现在这个备份功能直接在不登录或登录验证存在漏洞的情况下可以直接使用，以及存在CSRF漏洞可以直接劫持管理员帐号进行备份。</li>\n<li>备份文件名可预测：攻击者可以利用枚举的方式扫描备份包。</li>\n<li>生成的文件可利用web中间件解析漏洞执行代码<br>如何设计备份功能：</li>\n<li>进行权限控制，只有高权限可以使用。</li>\n<li>文件名随机生成，不可预测。</li>\n</ol>\n<h4 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h4><p>因为爬虫无法抓取APP中的API接口，所以接口的SQL注入等漏洞相对较多，目前最多的问题是未授权访问以及数据遍历漏洞。因此设计一个安全的API需要从以下几点考虑：</p>\n<ol>\n<li>访问权限控制：必要时加入账户体系，严格控制数据调用权限，比如当前用户必须在登录情况下，接口参数中传入自己登录成功的凭证才能调用这个用户的数据。另外不需要账户体系时也要注意加入不可暴力破解的访问密钥进行权限验证。</li>\n<li>防止敏感信息泄漏：没必要输出的信息应该注意禁止输出。</li>\n<li>SQL注入等常规漏洞：注意代码安全，防止SQL注入、代码执行等漏洞的产生。</li>\n</ol>\n<h3 id=\"应用安全体系建设\"><a href=\"#应用安全体系建设\" class=\"headerlink\" title=\"应用安全体系建设\"></a>应用安全体系建设</h3><ol>\n<li>用户密码安全策略</li>\n<li>前后台用户分表：同表的情况下可能存在越权修改管理员信息等情况。</li>\n<li>后台地址隐藏</li>\n<li>密码加密存储方式</li>\n<li>登录限制</li>\n<li>API站库分离</li>\n<li>慎用第三方服务</li>\n<li>严格的权限控制</li>\n<li>敏感操作多因素验证</li>\n<li>应用自身的安全中心</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>苦于代码审计能力偏弱，调研一番发现这本书或许有所帮助。</p>\n<h2 id=\"第一部分-代码审计前的准备\"><a href=\"#第一部分-代码审计前的准备\" class=\"headerlink\" title=\"第一部分 代码审计前的准备\"></a>第一部分 代码审计前的准备</h2><h3 id=\"代码审计环境搭建\"><a href=\"#代码审计环境搭建\" class=\"headerlink\" title=\"代码审计环境搭建\"></a>代码审计环境搭建</h3><ol>\n<li>wamp/wnmp: WAMP（Windows下的Apache+Mysql/MariaDB+Perl/PHP/Python），WNMP（Windows下的Nginx+Mysql+PHP）</li>\n<li>lamp/lnmp：将上述环境安装在Linux中。</li>\n</ol>\n<h4 id=\"PHP-INI-常量的定义\"><a href=\"#PHP-INI-常量的定义\" class=\"headerlink\" title=\"PHP_INI_*常量的定义\"></a>PHP_INI_*常量的定义</h4><ol>\n<li>PHP_INI_USER：该配置选项可在用户的PHP脚本或Win注册表中设置。</li>\n<li>PHP_INI_PERDIR：该配置选项可在php.ini. .htaccess或httpd.conf中设置。</li>\n<li>PHP_INI_SYSTEM：该配置选项可在任何地方设置。</li>\n<li>PHP_INI_ALL：该配置选项可在任何地方设置。</li>\n<li>php.ini only：该配置选项可仅可在php.ini中配置。</li>\n</ol>\n<h4 id=\"会影响PHP脚本安全的配置列表及核心配置选项\"><a href=\"#会影响PHP脚本安全的配置列表及核心配置选项\" class=\"headerlink\" title=\"会影响PHP脚本安全的配置列表及核心配置选项\"></a>会影响PHP脚本安全的配置列表及核心配置选项</h4><ol>\n<li>register_globals(全局变量注册开关)：该选项在on的情况下，会将用户GET/POST等方式提交上来的参数注册成全局变量并初始化值为参数对应的值，使提交参数可以直接在脚本中使用。register_globals在PHP版本小于等于4.2.3时设置为PHP_INI_ALL，从PHP5.3.0起被废弃，在PHP5.4.0中被移除。<br> 代码实例：(实验环境php5.2.17,在php.ini中添加register_globals = On) <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">if($user&#x3D;&#x3D;&#39;admin&#39;)&#123;</span><br><span class=\"line\">  echo &#39;true&#39;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>allow_url_include(是否允许包含远程文件)：在该配置为on的情况下，可以直接包含远程文件，当存在include(<code>$var</code>)且$var可控的情况下，可以直接控制$var变量来执行PHP代码。allow_url_include在PHP5.2.0后默认设置为off，配置范围为PHP_INI_ALL。与之类似的配置有allow_url_fopen，配置是否允许打开远程文件，但安全隐患没有前者大。<br> 代码实例：(实验环境php5.2.17，payload：a=<a href=\"http://127.0.0.1/test/info.txt\">http://127.0.0.1:80/test/info.txt</a> ，info.txt内容为<code>&lt;?php phpinfo();?&gt;</code>) <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">include $_GET[&#39;a&#39;];</span><br></pre></td></tr></table></figure></li>\n<li>magic_quotes_gpc（魔术引号自动过滤）：该参数在不存在编码或其他特殊绕过的情况下，可以使很多漏洞无法利用。当该参数被开启时（选项设置为on），会自动在GET、POST、COOKIE变量中的单引号（‘）、双引号（“）、反斜杠（\\）及空字符（NULL）的前面加上反斜杠（\\），但在PHP5中magic_quotes_gps并不会过滤$_SERVER变量，导致很多类似client-ip、referer一类的漏洞能够利用。PHP5.3之后不推荐使用该参数，PHP5.4之后被取消。在PHP版本小于4.2.3时，配置范围是PHP_INI_ALL;在PHP版本大于4.2.3时，是PHP_INI_PERDIR。<br> 代码实例：(测试?a=1’) <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo $_GET[&#39;a&#39;];</span><br></pre></td></tr></table></figure></li>\n<li>magic_quotes_runtime(魔术引号自动过滤)：过滤方式同样为加反斜杠，但和magic_quotes_gpc的处理对象不一样。magic_quotes_runtime只对从数据库或文件中获取的数据进行过滤，magic_quotes_runtime在PHP5.4之后被取消，配置范围是PHP_INI_ALL。但该参数仅对部分函数有作用，某些情况下可以被绕过。<br> 代码实例： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#1.txt</span><br><span class=\"line\">1&#39;2&quot;3\\4</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">ini_set(&quot;magic_quotes_runtime&quot;,&quot;1&quot;);</span><br><span class=\"line\">echo file_get_contents(&quot;1.txt&quot;);</span><br></pre></td></tr></table></figure></li>\n<li>magic_quotes_sybase(魔术引号自动过滤)：用于自动过滤特殊字符，当设置为on时，会覆盖magic_quotes_gpc=on的配置（使gpc=on失效）。与gpc的共同点是处理对象一致（GET、POST、Cookie)，但该参数仅转义空字符以及把单引号变成双引号，使用率比gpc低。配置范围为PHP_INI_ALL，在PHP5.4.0中移除。（代码实例与gpc相同）</li>\n<li>safe_mode（安全模式）：是PHP内嵌的一种安全机制，配置范围为PHP_INI_SYSTEM，PHP5.4之后被取消（取消原因是，PHP开发者认为在PHP语言机制上试图解决安全问题是一件不合适的事情，虽然safe_mode在一定程度上对共享主机有效，但同时也带来了不少误报，与其在PHP上解决权限安全问题，不如使用linux默认的权限限制机制或其它层级的解决办法）。该参数效果为，所有文件操作函数都会受到限制，非文件所有者不能对该文件进行操作（如include()），如果有一些脚本文件放在非Web服务启动用户所有的目录下，需要利用include等函数进行加载，可以使用safe_mode_include_dir来配置可包含的路径。此外，通过函数popen()、system()以及exec()等函数执行命令或程序会提示错误，如果需要使用外部脚本，可以集中存放，然后用safe_node_exec_dir来指向存放目录。<br> 代码实例： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># echo &#96;whoami&#96;; 执行命令失败的回显提示</span><br><span class=\"line\">Warning: shell_exec() [function, shell_exec]: Cannot execute using backquotes in Safe Mode ...</span><br></pre></td></tr></table></figure></li>\n<li>open_basedir（PHP可访问目录）：用于限制PHP只能访问哪些目录，通常只需要设置Web文件目录即可，如果需要加载外部脚本，也需要把所在路径加入该指令中，多个目录以分号分割。需要注意，指定限制实际上是前缀而不是目录名，如配置open_basedir=/www/a，那么/www/a和/www/ab都可以访问，所以为了避免该现象发生，需要用斜线结束路径名，如/www/a/。当参数激活，执行脚本访问其它文件时都需要验证文件路径，所以会影响执行效率。该指令配置范围在PHP&lt;5.2.3时是PHP_INI_SYSTEM，在PHP&gt;=5.2.3时是PHP_INI_ALL。</li>\n<li>disable_functions(禁用函数)：使用该指令来禁止敏感函数的使用，使用本指令时，需把dl()函数也添加进禁用列表，否则攻击者可以利用dl()函数价值自定义的PHP扩展突破该指令的限制。指令范围为php.ini，配置禁用函数时使用逗号分割函数名。</li>\n<li>display_errors和error_reporting错误显示：display_errors用于表明是否显示PHP脚本内部错误，生产环境中建议关闭，在开启时，可以通过设置error_reporting来设置错误显示的级别。配置范围均为PHP_INI_ALL。</li>\n</ol>\n<h3 id=\"审计辅助与漏洞验证工具\"><a href=\"#审计辅助与漏洞验证工具\" class=\"headerlink\" title=\"审计辅助与漏洞验证工具\"></a>审计辅助与漏洞验证工具</h3><h4 id=\"代码编辑器\"><a href=\"#代码编辑器\" class=\"headerlink\" title=\"代码编辑器\"></a>代码编辑器</h4><ol>\n<li>Notepad++</li>\n<li>UltraEdit（文件对比）</li>\n<li>Zend Studio（PHP集成开发环境）</li>\n</ol>\n<h4 id=\"代码审计工具\"><a href=\"#代码审计工具\" class=\"headerlink\" title=\"代码审计工具\"></a>代码审计工具</h4><ol>\n<li>Seay源代码审计系统</li>\n<li>RIPS</li>\n</ol>\n<h4 id=\"漏洞验证辅助\"><a href=\"#漏洞验证辅助\" class=\"headerlink\" title=\"漏洞验证辅助\"></a>漏洞验证辅助</h4><ol>\n<li>Burp</li>\n<li>浏览器扩展：Hackbar, Firebug, Live HTTP Headers, Modify</li>\n<li>编码转换及加解密工具：Seay代码审计系统自带的编码功能，Burp自带的decoder，超级加解密转换工具</li>\n<li>正则调试工具：Seay自带的正则调试功能，灵者正则调试</li>\n<li>SQL执行监控工具：Seay mysql监控</li>\n</ol>\n<h2 id=\"漏洞发现与防范\"><a href=\"#漏洞发现与防范\" class=\"headerlink\" title=\"漏洞发现与防范\"></a>漏洞发现与防范</h2><h3 id=\"通用代码审计思路\"><a href=\"#通用代码审计思路\" class=\"headerlink\" title=\"通用代码审计思路\"></a>通用代码审计思路</h3><h4 id=\"敏感函数回溯参数过程\"><a href=\"#敏感函数回溯参数过程\" class=\"headerlink\" title=\"敏感函数回溯参数过程\"></a>敏感函数回溯参数过程</h4><p>根据敏感函数来逆向追踪参数的传递过程，使用较多，因为大多数漏洞都是由于函数使用不当造成的。非函数使用不当的漏洞，如SQL注入，也有一些特征，如Select、Incert等，结合From和Where等关键字判断是否为一条SQL语句，通过对字符串的识别分析，就能判断该SQL语句参数有没有使用单引号过滤，或者根据经验判断。如HTTP头里面的HTTP_CLIENT_IP和HTTP_X_FORWORDFOR等获取到的IP地址常直接拼接到SQL语句中，且由于它们是存在于<code>$_SERVER</code>变量中不受GPC的影响，那么就可以查找这两个参数关键字快速寻找漏洞。<br>该方法的优点是定向挖掘、高效、高质量，缺点是对整体框架了解不够深入，定位利用点会花费时间，另外无法覆盖逻辑漏洞。</p>\n<h4 id=\"通读全文代码\"><a href=\"#通读全文代码\" class=\"headerlink\" title=\"通读全文代码\"></a>通读全文代码</h4><p>在企业中做自身产品代码审计时，我们需要了解整个应用的业务逻辑以获取更多漏洞。<br>通读全文代码时，首先要看程序的大体代码结构，如主目录有哪些文件，模块目录有哪些文件，插件目录有哪些文件，还要注意文件大小、创建时间。根据文件命名可大致了解该程序实现哪些功能，核心文件是哪些。<br>在看程序目录结构时，要特别注意以下几个文件：</p>\n<ol>\n<li><code>函数集文件</code>，通常命名中包含functions或者common等关键字，这些文件内是一些公共函数，提供给其它文件统一调用，所以大多数文件会在文件头包含其它文件。寻找这些文件的一个技巧就是打开index.php或一些功能性文件，在头部一般都能找到。</li>\n<li><code>配置文件</code>，通常命名中包含config关键字，包括Web程序运行必须的功能性配置选项及数据库等配置信息，从该文件中可以了解程序的小部分功能，另外看这个文件时注意观察配置文件中参数值是用单引号还是双引号，如果是双引号，则很可能存在代码执行漏洞。（如利用PHP可变变量（$$a）的特性执行代码，ref：<a href=\"https://www.cnblogs.com/Cl0ud/p/12336834.html%EF%BC%89\">https://www.cnblogs.com/Cl0ud/p/12336834.html）</a></li>\n<li><code>安全过滤文件</code>，该文件关系到挖掘到的可疑点能否利用，通常命名中有filter、safe、check等关键字。这类文件主要作用是针对参数进行过滤，比较常见的是针对SQL注入和XSS过滤，还有文件路径、执行的系统命令的参数，其它相对少见。而目前大多数应用会在程序入口循环对所有参数使用addslashes()进行过滤。</li>\n<li><code>index文件</code>，是一个程序的入口文件，通过阅读该文件可大致了解整个程序的架构、运行流程、包含的文件，以及核心文件有哪些。而不同的目录的index文件也有不同的实现方式，最好先将核心目录的index文件都简单读一遍。<br>学习代码审计前期建议先下载一些小应用来读，积累经验后，再去读开源框架。</li>\n</ol>\n<h4 id=\"根据功能点定向审计\"><a href=\"#根据功能点定向审计\" class=\"headerlink\" title=\"根据功能点定向审计\"></a>根据功能点定向审计</h4><p>先简单黑盒测试一下，再通过发现的容易出问题的功能去阅读该功能点的源码，提高审计速度。</p>\n<ol>\n<li>文件上传功能：任意上传、SQL注入</li>\n<li>文件管理功能：任意文件操作、XSS漏洞</li>\n<li>登录认证功能：任意用户登录</li>\n<li>找回密码功能：验证码爆破、验证凭证算法</li>\n</ol>\n<h3 id=\"漏洞挖掘与防范（基础篇）\"><a href=\"#漏洞挖掘与防范（基础篇）\" class=\"headerlink\" title=\"漏洞挖掘与防范（基础篇）\"></a>漏洞挖掘与防范（基础篇）</h3><h4 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h4><h5 id=\"挖掘经验\"><a href=\"#挖掘经验\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h5><p>常出现在登录页面、获取HTTP头（user-agent/client-ip等）、订单处理等业务相对复杂的地方，登录页面注入大多出现在HTTP头的client-ip和x-forward-for，用于记录登录IP地址。另外在订单系统内，由于订单涉及购物车等多个交互，经常会发生二次注入，通读代码时可着重关注这几个地方。</p>\n<ol>\n<li>普通注入：指最容易利用的SQL注入漏洞，有int型和string型，在string型注入中需要使用单或双引号闭合。数据库操作存在一些关键字，如select from、mysql_connect、mysql_query、mysql_fetch_row等，查询方式还有update、incert、delete，只需要在白盒审计中查找这些关键字即可定向挖掘SQL注入。</li>\n<li>编码注入：程序在进行一些操作前经常会进行编码处理，而做编码处理的函数可能会存在问题。通过输入转码函数不兼容的特殊字符，即可导致输出字符变成有害数据，在SQL注入里，最常见的编码注入是MySQL宽字节以及urldecode/rawurldecode函数导致的。<ul>\n<li>宽字节注入：使用PHP连接MySQL的时候，当设置<code>set character_set_client=gbk</code>时会导致一个编码转换的注入问题，当存在该漏洞时，注入参数里带入<code>%df%27</code>，即可把程序中过滤的<code>\\(%5c)</code>吃掉。而通常都不是直接设置<code>set character_set_client=gbk</code>，而是设置<code>SET NAMES ‘gbk’</code>，同样存在漏洞。官方建议是使用mysql_set_charset来设置编码，只要在后面合理的使用mysql_real_escape_string还是可以解决该漏洞的。对宽字节注入的挖掘方法比较简单，搜索<code>SET NAMES</code>、<code>character_set_client=gbk</code>、<code>mysql_set_charset(&#39;gbk&#39;)</code>。该漏洞的解决方法如以下三种，比较推荐一和三：<ul>\n<li>在执行查询前先执行<code>SET NAMES &#39;gbk&#39;, character_set_client=binary</code></li>\n<li>使用mysql_set_charset(‘gbk’)设置编码，然后使用mysql_real_escape_string()过滤。</li>\n<li>使用pdo方式，在PHP5.3.6及以下版本中需要设置<code>setAttribute(PDO::ATTR_EMULATE_PREPARES,false);</code>，来禁用prepared statements的仿真效果。</li>\n</ul>\n</li>\n<li>二次urlencode注入：只要字符被进行转换就有可能产生漏洞。现在的Web程序大多会进行参数过滤，通常使用addslashes()、mysql_real_escape_string()、mysql_escape_string()函数或者开启GPC的方式来防止注入，也就是给单引号、双引号、反斜杠（\\）和NULL加上反斜杠转义。如果某处使用了urldecode或者rawurldecode函数，则会导致二次加码生成单引号而引发注入。该漏洞可以通过搜索urldecode和rawurldecode函数来挖掘。</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"漏洞防范\"><a href=\"#漏洞防范\" class=\"headerlink\" title=\"漏洞防范\"></a>漏洞防范</h5><ol>\n<li>gpc/runtime魔术引号：通常数据污染有两种方式，一种是应用被动接收参数，另一种是主动获取参数。利用magic_quotes_gpc和magic_quotes_runtime可以防止部分SQL注入（对int型注入没有太大作用）</li>\n<li>过滤函数和类：有两种使用场景，一种是程序入口统一过滤，框架程序使用这种方式比较多，另一种是在程序进行SQL语句运行前使用，除了PHP内置的一些过滤单引号等函数外，还有一些开源类过滤union、select等关键字。<ul>\n<li>addslashes函数：过滤单引号、双引号、反斜杠以及空字符NULL，大多被用在程序入口，判断如果没有开启GPC则使用该函数进行过滤。不过它的参数必须是string类，所以可能会存在通过数组绕过的漏洞。</li>\n<li>mysql_[real_]escape_string函数：这两个函数都是对字符串进行过滤，只存在于大于PHP4.03的版本，[<code>\\x00</code>]、[<code>\\n</code>]、[<code>\\r</code>]、[<code>\\</code>]、[<code>&#39;</code>]、[<code>&quot;</code>]、[<code>\\xla</code>]会受到影响。两个函数唯一不一样的地方在于mysql_real_escape_string接受的是一个连接句柄并根据当前字符集转移字符串，推荐使用。</li>\n<li>intval等字符转换：上述方式在int类型注入时效果不会，比如可以通过报错或盲注等方式来绕过，这时候就要用到intval函数了。intval的作用是将变量转换成int类型，这里举例intval是要表达一种利用参数类型白名单的方式来防止漏洞，对应的还有很多如floatval等。</li>\n</ul>\n</li>\n<li>PDO prepare预编译：通过预编译的方式来处理数据库查询。当PHP版本&lt;5.3.6时，使用PHP本地模拟prepare再把完整的SQL语句发送给MySQL服务器，且使用set names ‘gbk’时，仍然存在宽字节SQL注入，因为PHP和MySQL编码不一致。正确的写法应该是使用ATTR_EMULATE_PREPARES来禁用PHP本地模拟prepare。</li>\n</ol>\n<h4 id=\"XSS漏洞\"><a href=\"#XSS漏洞\" class=\"headerlink\" title=\"XSS漏洞\"></a>XSS漏洞</h4><h5 id=\"挖掘经验-1\"><a href=\"#挖掘经验-1\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h5><p>挖掘XSS漏洞关键在于寻找没有被过滤的参数，且这些参数传入至输出函数。常用输出函数列表如下：<code>print、print_r、echo、printf、sprintf、die、var_dump、var_export</code>，寻找带有变量的这些函数即可。另外在代码审计中，浏览器环境对XSS漏洞利用影响非常大。通读代码时可多关注各处设置资料、文章发表、留言等富文本区域，这种地方存在的XSS通常是存储型的。</p>\n<h5 id=\"反射型-XSS\"><a href=\"#反射型-XSS\" class=\"headerlink\" title=\"反射型 XSS\"></a>反射型 XSS</h5><p>直接通过外部输入在浏览器端输出触发，该种漏洞比较容易通过扫描器黑盒审计发现。白盒审计中，只需要寻找带有参数的输出参数，根据输出参数对输出内容回溯输入参数，观察有没有经过过滤。</p>\n<h5 id=\"存储型XSS\"><a href=\"#存储型XSS\" class=\"headerlink\" title=\"存储型XSS\"></a>存储型XSS</h5><p>把利用代码保存在数据库或文件中，当Web程序读取利用代码并输出在页面上时执行利用代码。比反射型容易利用，较为隐蔽且不用考虑绕过浏览器过滤。挖掘时也是需要寻找未过滤的输入点和未过滤的输出函数（可能完全不在同一个业务流中），可以根据当前代码功能去猜，或追寻数据有在哪里被操作，使用表名、字段名去代码里搜索。</p>\n<h5 id=\"漏洞防范-1\"><a href=\"#漏洞防范-1\" class=\"headerlink\" title=\"漏洞防范\"></a>漏洞防范</h5><ol>\n<li>特殊字符HTML实体转码。</li>\n<li>标签事件属性黑白名单。</li>\n</ol>\n<h4 id=\"CSRF漏洞\"><a href=\"#CSRF漏洞\" class=\"headerlink\" title=\"CSRF漏洞\"></a>CSRF漏洞</h4><h5 id=\"挖掘经验-2\"><a href=\"#挖掘经验-2\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h5><p>主要用于越权操作，所以漏洞会出现在有权限控制的地方。黑盒挖洞可以先搭建环境，打开几个有非静态操作的页面，抓包看看有没有token，没有token就不带referer直接请求该页面，返回数据一样的话，可能存在CSRF漏洞。白盒审计，通读代码时看看被大量引用的基础文件（核心文件）、你比较关心的功能点代码内有没有验证token和referer相关的代码，或者直接搜索token关键字。</p>\n<h5 id=\"漏洞防范-2\"><a href=\"#漏洞防范-2\" class=\"headerlink\" title=\"漏洞防范\"></a>漏洞防范</h5><ol>\n<li>增加token/referer验证避免img标签请求的水坑攻击。</li>\n<li>增加验证码。（比较麻烦，更适用于敏感操作页面）</li>\n</ol>\n<h3 id=\"漏洞挖掘与防范（进阶篇）\"><a href=\"#漏洞挖掘与防范（进阶篇）\" class=\"headerlink\" title=\"漏洞挖掘与防范（进阶篇）\"></a>漏洞挖掘与防范（进阶篇）</h3><h4 id=\"文件操作漏洞\"><a href=\"#文件操作漏洞\" class=\"headerlink\" title=\"文件操作漏洞\"></a>文件操作漏洞</h4><h5 id=\"文件包含漏洞\"><a href=\"#文件包含漏洞\" class=\"headerlink\" title=\"文件包含漏洞\"></a>文件包含漏洞</h5><p>文件包涵函数有include()、include_once()（前两个在包含文件时即使遇到错误，下面的代码仍然执行）、require()、require_once()（这两个在包含文件时遇到错误会报错退出程序）。</p>\n<h6 id=\"挖掘经验-3\"><a href=\"#挖掘经验-3\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h6><p>文件包含漏洞大多出现在模块加载、模板加载以及cache调用的地方。在挖掘漏洞时可以跟踪程序运行流程，看模块加载包含的文件是否可控等，另一个是直接搜索上文四个函数来回溯寻找可控变量。一般该类漏洞都是本地文件包含，大多需要截断。</p>\n<h6 id=\"本地文件包含\"><a href=\"#本地文件包含\" class=\"headerlink\" title=\"本地文件包含\"></a>本地文件包含</h6><p>本地文件包含（local file include，LFI），大多出现在模块加载、模板加载和cache调用，有多种利用方式，如上传一个允许上传的文件格式的文件再包含以执行代码，包含PHP上传的临时文件，在请求URL或ua里面加入要执行的代码，WebServer记录到日志后再包含WebServer的日志，还有像Linux下可以包含/proc/self/environ文件。</p>\n<h6 id=\"远程文件包含\"><a href=\"#远程文件包含\" class=\"headerlink\" title=\"远程文件包含\"></a>远程文件包含</h6><p>远程文件包含（remote file include, RFI），需要设置allow_url_include = On，相比于本地包含来说更容易利用，但出现频率不高。</p>\n<h6 id=\"文件包含截断\"><a href=\"#文件包含截断\" class=\"headerlink\" title=\"文件包含截断\"></a>文件包含截断</h6><ol>\n<li>使用<code>%00</code>截断，最古老的方法，受限于GPC和addslashes等函数的过滤，另外PHP5.3之后的版本已经全面修复，不能使用该方法了。</li>\n<li>使用多个英文句号<code>.</code>和反斜杠<code>/</code>来阶段，不受GPC限制，但同样在PHP5.3之后被修复。</li>\n<li>远程文件包含时利用问号<code>？</code>来伪截断，不受GPC和PHP版本限制，只要能返回代码给包含函数就能执行。在HTTP协议里，访问<a href=\"http://remotehost/i.txt%E5%92%8C%E8%AE%BF%E9%97%AEhttp://remotehost/i.txt?.php\">http://remotehost/i.txt和访问http://remotehost/i.txt?.php</a> 返回的结果是一样的，因为WebServer把问号之后的内容当成请求参数，而txt不在WebServer里解析，参数对访问i.txt返回的内容不影响，实现伪截断。</li>\n</ol>\n<h5 id=\"文件读取（下载）漏洞\"><a href=\"#文件读取（下载）漏洞\" class=\"headerlink\" title=\"文件读取（下载）漏洞\"></a>文件读取（下载）漏洞</h5><h6 id=\"挖掘经验-4\"><a href=\"#挖掘经验-4\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h6><p>文件读取漏洞比较容易寻找，一种方式是可以先黑盒看功能点对应的文件，再去读文件源码。另一种是搜索文件读取的函数（<code>file_get_contents()、highlight_file()、fopen()、readfile()、fread()、fgetss()、fgets()、parse_ini_file()、show_source()、file()</code>），看有无可直接或间接控制的变量，除了正常读取文件的函数之外，另外一些其他功能的函数也可以用于读取文件，如include()等。</p>\n<h5 id=\"文件上传漏洞\"><a href=\"#文件上传漏洞\" class=\"headerlink\" title=\"文件上传漏洞\"></a>文件上传漏洞</h5><h6 id=\"挖掘经验-5\"><a href=\"#挖掘经验-5\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h6><p>挖掘简单，上传点常调用同一个上传类，上传函数又只有move_uploaded_file()这一个，所以最快方法就是直接搜索该函数，再去看调用的代码存不存在未限制上传格式或者可以绕过，其中问题较多的是黑名单限制文件格式以及未更改文件名的方式，在未改名的情况下，在Apache利用其向前寻找解析格式和IIS6的分号解析bug都可以执行代码。</p>\n<ol>\n<li>未过滤或本地过滤：共同点是都未在服务器端过滤。</li>\n<li>黑名单扩展名过滤：出现较少，存在限制的扩展名不够全、验证扩展名的方式存在问题可直接绕过或截断。</li>\n<li>文件头、content-type验证绕过：早期出现较多，上传文件时，如果直接上传一个非图片文件会被提示不是图片文件，但只要在文件头里加上<code>GIF89a</code>后上传，则验证通过。这是因为程序用了如getimagesize()函数等。content-type是在http request请求头内，所以可以被攻击者修改，而早期的一些程序只是单纯的验证了这个值。</li>\n</ol>\n<h5 id=\"文件删除漏洞\"><a href=\"#文件删除漏洞\" class=\"headerlink\" title=\"文件删除漏洞\"></a>文件删除漏洞</h5><p>常出现在有文件管理功能的应用上，原理和文件读取差不多，只不过利用的函数不一样，一般因为删除的文件名可以用<code>../</code>跳转，或者没有限制当前用户权限。</p>\n<h6 id=\"挖掘经验-6\"><a href=\"#挖掘经验-6\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h6><p>。挖掘漏洞可以先去找相应的功能点，黑盒测试一下能不能删除某个文件，如果删除不了，再去从执行流程追踪提交的文件名参数的传递过程。如果纯白盒挖，也可以去搜索带有变量参数的unlink()，采取回溯变量的方式。</p>\n<h5 id=\"文件操作漏洞防范\"><a href=\"#文件操作漏洞防范\" class=\"headerlink\" title=\"文件操作漏洞防范\"></a>文件操作漏洞防范</h5><h6 id=\"通用文件操作防御\"><a href=\"#通用文件操作防御\" class=\"headerlink\" title=\"通用文件操作防御\"></a>通用文件操作防御</h6><ol>\n<li>合理的权限管理。</li>\n<li>以加密等方式替代直接将文件名作为下载参数的操作。</li>\n<li>避免目录跳转，禁止参数中携带<code>..</code>、<code>/</code>、<code>\\</code>来跳转目录。</li>\n</ol>\n<h6 id=\"文件上传漏洞防范\"><a href=\"#文件上传漏洞防范\" class=\"headerlink\" title=\"文件上传漏洞防范\"></a>文件上传漏洞防范</h6><ol>\n<li>白名单过滤文件扩展名，使用in_array或<code>===</code>来对比扩展名。</li>\n<li>保存上传文件时重命名文件，文件名采用时间戳的拼接随机数的MD5值保存方式<code>md5(time()+rand(1,10000))</code></li>\n</ol>\n<h4 id=\"代码执行漏洞\"><a href=\"#代码执行漏洞\" class=\"headerlink\" title=\"代码执行漏洞\"></a>代码执行漏洞</h4><h5 id=\"挖掘经验-7\"><a href=\"#挖掘经验-7\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h5><p>eval()和assert()函数导致的代码执行漏洞大多是因为载入缓存或者模板以及对变量的处理不严格导致。<br>preg_replace()函数代码执行需要存在/e参数，这个函数原本是用来处理字符串的，因此漏洞出现最多的是在对字符串的处理，比如URL、HTML标签以及文章内容等过滤功能。<br>call_user_func()和call_user_func_array()函数的功能是调用函数，多用在框架里面动态调用函数，所以一般比较小的程序不常出现该类代码执行。array_map()函数的作用是调用函数并且除第一个参数外其它参数为数组，通常会写死第一个参数，即调用的参数，类似这三个函数功能的函数还有很多。<br>还有一类非常常见的是动态函数的代码执行，如<code>$_GET($_POST[&quot;xx&quot;])</code>。</p>\n<h5 id=\"代码执行函数\"><a href=\"#代码执行函数\" class=\"headerlink\" title=\"代码执行函数\"></a>代码执行函数</h5><ol>\n<li>eval和assert函数：用于动态执行函数，所以它们的参数就是PHP代码。</li>\n<li>preg_replace函数：对字符串进行正则处理。</li>\n<li>调用函数过滤不严：数十个函数有调用其它函数的功能，如果传入的函数名可控，那么就可以调用意外的函数来执行需要的代码，即存在代码执行漏洞。这些函数有：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">call_user_func()、call_user_func_array()、array_map()、</span><br><span class=\"line\">usort()、uasort()、uksort()、array_filter()、</span><br><span class=\"line\">array_reduce()、array_diff_uassoc()、array_diff_ukey()、</span><br><span class=\"line\">array_udiff()、array_udiff_assoc()、array_udiff_uassoc()、</span><br><span class=\"line\">array_intersect_assoc()、array_intersect_uassoc、</span><br><span class=\"line\">array_uintersect()、array_uintersect_assoc()、</span><br><span class=\"line\">array_uintersect_uassoc()、array_walk()、array_walk_recursive()、</span><br><span class=\"line\">xml_set_character_data_handler()、xml_set_default_handler()、</span><br><span class=\"line\">xml_set_element_handler()、xml_set_end_namespace_decl_handler()、</span><br><span class=\"line\">xml_set_external_entity_ref_handler()、xml_set_notation_decl_handler()、</span><br><span class=\"line\">xml_set_processing_instruction_handler()、</span><br><span class=\"line\">xml_set_start_namespace_decl_handler()、</span><br><span class=\"line\">xml_set_unparsed_entity_decl_handler()、stream_filter_register()、</span><br><span class=\"line\">set_error_handler()、register_shutdown_function()、register_tick_function()</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"动态函数执行\"><a href=\"#动态函数执行\" class=\"headerlink\" title=\"动态函数执行\"></a>动态函数执行</h5><p>由于PHP的特性，PHP函数可以直接由字符串拼接，加大了安全控制的难度。PHP动态函数写法为<code>变量（参数）</code>，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$_GET[&#39;a&#39;]($_GET[&#39;b&#39;]);# poc:?a&#x3D;assert&amp;b&#x3D;phpinfo()</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>想要挖掘这种形式的代码执行漏洞，需要找可控的动态函数名。</p>\n<h5 id=\"漏洞防范-3\"><a href=\"#漏洞防范-3\" class=\"headerlink\" title=\"漏洞防范\"></a>漏洞防范</h5><p>采用参数白名单过滤，这里的白名单并不是说完全固定为参数，可以结合正则表达式来进行白名单限制。</p>\n<h4 id=\"命令执行漏洞\"><a href=\"#命令执行漏洞\" class=\"headerlink\" title=\"命令执行漏洞\"></a>命令执行漏洞</h4><p>代码执行漏洞指的是可以执行PHP脚本代码，而命令执行漏洞指的是可以执行系统或应用指令（如CMD命令或bash命令）的漏洞。PHP的命令执行漏洞主要基于一些函数的参数过滤不严导致，可以执行命令的函数有system()、exec()、shell_exec()、passthru()、pcntl_exec()、popen()、proc_open()这七个函数，另外反引号也可以执行命令，不过实际上这种方式也是调用的shell_exec()函数。PHP命令执行继承了WebServer用户权限，一般该权限都可以向Web目录写文件。</p>\n<h5 id=\"挖掘经验-8\"><a href=\"#挖掘经验-8\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h5><p>该漏洞多出现在包含环境包的应用里，一般这类产品会有额外的脚本来协助处理日志及数据库等，web应用会有比较多的点之间使用system()、exec()、shell_exec()、passthru()、pcntl_exec()、popen()、proc_open()等函数执行系统命令来调用这些脚本，可以直接在代码中搜索这几个函数，收获应该会不少。除了这类应用，还有一些调用外部程序的功能也会出命令执行漏洞，由于特征明显，可以直接搜索函数名进行挖掘。</p>\n<h6 id=\"命令执行函数\"><a href=\"#命令执行函数\" class=\"headerlink\" title=\"命令执行函数\"></a>命令执行函数</h6><p>上述的函数中，sustem()、exec()、shell_exec()、passthru()以及反引号是可以直接传入命令并返回执行结果。<br>popen()、proc_open()函数不会直接返回执行结果，而是返回一个文件指针。</p>\n<h6 id=\"反引号命令执行\"><a href=\"#反引号命令执行\" class=\"headerlink\" title=\"反引号命令执行\"></a>反引号命令执行</h6><p>反引号执行命令是调用的shell_exec()函数。</p>\n<h5 id=\"漏洞防范-4\"><a href=\"#漏洞防范-4\" class=\"headerlink\" title=\"漏洞防范\"></a>漏洞防范</h5><ol>\n<li>使用PHP自带的命令防注入函数，包括escapeshellcmd()（过滤整条命令）和escapeshellarg()（保证传入命令执行函数的参数确实是以字符串参数形式存在，不能被注入）。</li>\n<li>对命令执行函数的参数做白名单限制。（通用修复方法）</li>\n</ol>\n<h3 id=\"漏洞挖掘与防范（深入篇）\"><a href=\"#漏洞挖掘与防范（深入篇）\" class=\"headerlink\" title=\"漏洞挖掘与防范（深入篇）\"></a>漏洞挖掘与防范（深入篇）</h3><h4 id=\"变量覆盖漏洞\"><a href=\"#变量覆盖漏洞\" class=\"headerlink\" title=\"变量覆盖漏洞\"></a>变量覆盖漏洞</h4><p>变量覆盖指的是可以用我们自定义的参数值替换程序原有的变量值，通常需要结合程序的其它功能来实现完整攻击。<br>该类漏洞大多由函数使用不当导致，常引发漏洞的函数有：extract()函数和parse_str()，import_request_variables()函数则是用于未开启全局变量注册时，调用该函数相当于开启了全局变量注册，在PHP5.4后该函数已经被取消。另外部分应用利用$$的方式注册变量没验证已有变量导致覆盖，这些应用在使用外部传递进来的参数时不是用类似于<code>$_GET[&#39;key&#39;]</code>这样原始的数组变量，而是把里面的key注册成一个变量$key，注册过程中没有验证该变量是否已经存在，所以会导致变量覆盖。</p>\n<h5 id=\"挖掘经验-9\"><a href=\"#挖掘经验-9\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h5><p>由于变量覆盖漏洞通常要结合其他功能代码来实现完整攻击，所以挖掘可用的变量覆盖漏洞还要考虑究竟哪些变量可以被覆盖并且后面有被使用。<br>由函数导致的变量覆盖比较好挖掘，寻找参数带有变量的extract()、parse_str()函数，回溯变量是否可控。import_request_variables()则只需要找没有初始化且操作前没有赋值的变量，就可以大胆的提交该变量作为参数，另外只要写在该函数前的变量，不管是否已经初始化都可以覆盖，不过该函数只在PHP4-4.1.0以及5-5.4.0可用。<br>关于国内很多程序使用<code>$$</code>符号注册变量会导致变量覆盖，可以直接搜索<code>$$</code>去挖掘，不过建议挖掘前应通读核心文件。</p>\n<h6 id=\"函数使用不当\"><a href=\"#函数使用不当\" class=\"headerlink\" title=\"函数使用不当\"></a>函数使用不当</h6><ol>\n<li>extract()（最常见）：将数组中的键值对注册成变量，函数结构如下： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int extract (array &amp;$var_array [, int $extract_type &#x3D; EXTR_OVERWRITE [, string $prefix &#x3D; NULL]])</span><br></pre></td></tr></table></figure>\n 该函数有3种可能会覆盖已有变量，第一种是第二个参数为EXTR_OVERWRITE，它表示如果有冲突，则覆盖已有变量；第二种是只传入第一个参数，默认为EXTR_OVERWRITE模式；第三种则是第二个参数为EXTR_IF_EXISTS，表示仅在当前符号表中已有同名变量时，覆盖它们的值，其它的都不注册新变量。</li>\n<li>parse_str()：解析字符串并注册成变量，在注册变量前不会验证当前变量是否已经存在，所以会直接覆盖掉已有变量。该函数有两个参数： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void parse_str(string $str [, array &amp;$arr])</span><br></pre></td></tr></table></figure>\n 其中<code>$str</code>是必须的，代表要解析注册成变量的字符串，形式为<code>a=1</code>，经过函数后会注册变量$a并赋值1。第二个参数$arr是一个数组，当第二个参数存在时，注册的变量会放在这个数组内，但如果该数组内原先就存在相同的键（key），则会覆盖原有键值。</li>\n<li>import_request_variables()：作用是把GET、POST、COOKIE的参数注册成变量，用在register_globals被禁止的时候，需要PHP4.1-5.4之间的版本。不过建议不开globals的时候也不要使用该函数，容易造成变量覆盖。</li>\n</ol>\n<h6 id=\"变量覆盖\"><a href=\"#变量覆盖\" class=\"headerlink\" title=\"$$变量覆盖\"></a>$$变量覆盖</h6><p>由于双$导致原变量被覆盖，在漏洞代码之前的变量都可以被覆盖。</p>\n<h5 id=\"漏洞防范-5\"><a href=\"#漏洞防范-5\" class=\"headerlink\" title=\"漏洞防范\"></a>漏洞防范</h5><p>最常见漏洞点是做变量注册以及赋值给变量的时候没有验证变量是否存在，所以推荐使用原始的变量数组，如<code>$_GET</code>、<code>$_POST</code>，或者在注册变量前一定要验证变量是否存在。</p>\n<h6 id=\"使用原始变量\"><a href=\"#使用原始变量\" class=\"headerlink\" title=\"使用原始变量\"></a>使用原始变量</h6><p>由于上述变量覆盖漏洞是在进行变量注册时导致，所以要解决变量覆盖的问题，最直接的方法就是不进行变量注册，直接使用原生的<code>$_GET</code>、<code>$_POST</code>等数组变量进行操作，如果考虑到程序可读性等原因，需要注册个别变量，可以直接在代码中定义变量，然后再把请求中的值赋值给它。</p>\n<h6 id=\"验证变量存在\"><a href=\"#验证变量存在\" class=\"headerlink\" title=\"验证变量存在\"></a>验证变量存在</h6><p>如果一定要用前面几种方式注册变量，可以在注册变量前先判断变量是否存在，如使用extract()函数则可以配置第二个参数为EXTR_SKIP。使用parse_str()函数注册变量钱需要自行通过代码判断变量是否存在。不建议使用import_request_variables()注册全局变量，会导致变量不可控。最重要的，自行申明的变量一定要初始化，不然即便注册在执行代码前也能被覆盖。</p>\n<h4 id=\"逻辑处理漏洞\"><a href=\"#逻辑处理漏洞\" class=\"headerlink\" title=\"逻辑处理漏洞\"></a>逻辑处理漏洞</h4><p>此次指程序在业务逻辑上的漏洞。</p>\n<h5 id=\"挖掘经验-10\"><a href=\"#挖掘经验-10\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h5><p>漏洞大多存在于逻辑处理及业务流程中，没有特别明显的关键字用于快速定位，挖掘技巧通常是通读功能点源码，熟悉业务流程，可关注程序是否可重复安装、修改密码处是否可越权修改其它用户密码、找回密码验证码是否可暴力破解以及修改其它用户密码、cookie是否可预测或cookie验证是否可绕过等。</p>\n<h6 id=\"等于与存在判断绕过\"><a href=\"#等于与存在判断绕过\" class=\"headerlink\" title=\"等于与存在判断绕过\"></a>等于与存在判断绕过</h6><p>判断函数存在漏洞时，可以逃逸判断函数绕过逻辑。常见存在漏洞的判断函数有：</p>\n<ol>\n<li>in_array()：用于判断一个值是否在某个数组列表里，该函数存在一个问题，比较前会自动做类型转换，实现输入参数并不全等于数组任意值时，也可以实现绕过并注入。</li>\n<li>is_numeric()：用于判断一个变量是否为数字，检查通过返回true，否则返回false。该函数存在一个问题，当传入参数为hex时则直接通过并返回true，而mysql是可以直接使用hex编码代替字符串名为的。所以这里虽然不能直接注入SQL语句，但存在二次注入和XSS等漏洞隐患，比如当我们提交<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>的hex编码时，效果相同。如果程序有其它地方调用该值并直接输出，则有可能执行代码触发XSS漏洞。</li>\n<li>双等于和三等于：双等于在判断等于前会先做变量类型转换，三等于则不会，所以双等于存在安全风险。</li>\n</ol>\n<h6 id=\"账户体系中的越权漏洞\"><a href=\"#账户体系中的越权漏洞\" class=\"headerlink\" title=\"账户体系中的越权漏洞\"></a>账户体系中的越权漏洞</h6><p>漏洞分为水平越权和垂直越权，但漏洞原理相同，都是账户体系在判断权限时不严格导致存在绕过漏洞。这一类绕过通常发生在cookie验证不严、简单判断用户提交的参数，归根结底，都是因为参数在客户端提交，服务端未严格校验。</p>\n<h6 id=\"未exit或return引发的安全问题\"><a href=\"#未exit或return引发的安全问题\" class=\"headerlink\" title=\"未exit或return引发的安全问题\"></a>未exit或return引发的安全问题</h6><p>某些情况下，在经过if条件判断之后，要么继续执行if后面的代码，要么在if流程内退出当前操作，但该退出行为，有不少程序忘记写return、die()、或者exit()，导致程序继续执行。</p>\n<h6 id=\"常见支付漏洞\"><a href=\"#常见支付漏洞\" class=\"headerlink\" title=\"常见支付漏洞\"></a>常见支付漏洞</h6><p>最常见支付漏洞有四种，第1、2、3种比较简单，分别是客户端可修改单价、总价和购买数量，服务器端未严格校验导致。部分商城程序是直接由单价和数量计算总价，但并没有验证这两个数字是否小于0。这种形式的支付漏洞，可以通过寻找支付代码并看代码过滤情况挖掘。<br>还有一种是以重复发包来利用时间差，少量钱多次购买，如使用手机给腾讯发送购买QQ业务的短信再快速取消。这类漏洞可从判断余额及扣费功能代码处寻找。</p>\n<h5 id=\"漏洞防范-6\"><a href=\"#漏洞防范-6\" class=\"headerlink\" title=\"漏洞防范\"></a>漏洞防范</h5><ol>\n<li>深入熟悉业务逻辑。</li>\n<li>多熟悉函数的功能和差异。</li>\n</ol>\n<h4 id=\"会话认证漏洞\"><a href=\"#会话认证漏洞\" class=\"headerlink\" title=\"会话认证漏洞\"></a>会话认证漏洞</h4><h5 id=\"挖掘经验-11\"><a href=\"#挖掘经验-11\" class=\"headerlink\" title=\"挖掘经验\"></a>挖掘经验</h5><p>在cookie验证上出现几率较高，通常是没有使用session认证，而是将用户信息直接保存在cookie中，以备程序使用时直接调用。一般这个过程都会有一个统一的函数去调用数据，容易导致SQL注入和越权等漏洞。在挖掘登录认证漏洞时，可以先看程序的登录功能代码，看整个登录过程的业务逻辑有没有可以控制session值或直接绕过密码验证的漏洞；另外需要关注程序验证是否为登录的代码，通俗的说是验证cookie的代码，是不是直接取cookie的值，然后如何判断这个值来验证是否登录。</p>\n<h6 id=\"cookie认证安全\"><a href=\"#cookie认证安全\" class=\"headerlink\" title=\"cookie认证安全\"></a>cookie认证安全</h6><p>cookie可以保存任何字符串，各个浏览器保存cookie字节数大小不一样，一般不超过4096个字节，通常用于保存登录帐号的标识信息。cookie出现问题较多的是cookie的SQL注入等常见漏洞，以及web应用程序在服务端直接读取cookie值来操作当前用户数据，由于cookie可以伪造，从而导致伪造用户身份登录的漏洞。</p>\n<h5 id=\"漏洞防范-7\"><a href=\"#漏洞防范-7\" class=\"headerlink\" title=\"漏洞防范\"></a>漏洞防范</h5><p>了解认证的业务逻辑，严格限制输入的异常字符以及避免直接使用客户端提交的内容进行操作。应该结合cookie和session，不能直接从cookie获取参数值进行操作，另外注意设置session时，需要保证客户端不能操作敏感session参数。特别注意敏感数据不要放在cookie中，cookie在浏览器端以及传输过程中都有被窃取的可能性。</p>\n<h3 id=\"二次漏洞审计\"><a href=\"#二次漏洞审计\" class=\"headerlink\" title=\"二次漏洞审计\"></a>二次漏洞审计</h3><h4 id=\"什么是二次漏洞\"><a href=\"#什么是二次漏洞\" class=\"headerlink\" title=\"什么是二次漏洞\"></a>什么是二次漏洞</h4><p>需要先构造好利用代码写入网站保存，在第二次或多次请求后调用攻击代码触发或修改配置触发的漏洞叫做二次漏洞。该漏洞的出现归根结底是开发者在可信数据的逻辑上考虑不全面。</p>\n<h4 id=\"二次漏洞审计技巧\"><a href=\"#二次漏洞审计技巧\" class=\"headerlink\" title=\"二次漏洞审计技巧\"></a>二次漏洞审计技巧</h4><p>虽然二次漏洞写入和触发payload很可能不在同一个地方，但还是可以通过找相关关键字去定位的，只是精准度会稍微降低。大多数二次漏洞的逻辑性比一般的漏洞强的多，所以最好还是把全部代码读一遍，更好的了解业务逻辑和全局配置。<br>业务逻辑越复杂的地方越容易出现二次漏洞，我们可以重点关注购物车、订单、引用数据、文章编辑、草稿等和数据库交互的地方，以及和文件系统交互的系统配置文件（一般需要管理员权限才能操作）。<br>在二次漏洞类型里，可以重点关注SQL注入、XSS。</p>\n<h3 id=\"代码审计小技巧\"><a href=\"#代码审计小技巧\" class=\"headerlink\" title=\"代码审计小技巧\"></a>代码审计小技巧</h3><h4 id=\"钻GPC等转义的空子\"><a href=\"#钻GPC等转义的空子\" class=\"headerlink\" title=\"钻GPC等转义的空子\"></a>钻GPC等转义的空子</h4><p>GPC会自动把提交内容的敏感字符转义导致攻击代码无法执行，但还是存在漏洞：</p>\n<h5 id=\"SERVER变量\"><a href=\"#SERVER变量\" class=\"headerlink\" title=\"$_SERVER变量\"></a>$_SERVER变量</h5><p>在PHP5后，用<code>$_SERVER</code>取到的<code>header</code>字段不受GPC影响，且普通程序员很少会考虑到这些字段。<code>header</code>注入里常见的是<code>user-agent</code>、<code>referer</code>以及<code>client-ip/x-forward-for</code>，因为大多数Web应用都会记录访问者的IP以及<code>referer</code>等信息，同样的<code>$_FILES</code>变量也不受GPC保护。</p>\n<h5 id=\"编码转换问题\"><a href=\"#编码转换问题\" class=\"headerlink\" title=\"编码转换问题\"></a>编码转换问题</h5><p>宽字节注入就是一种非常典型的编码转换问题导致绕过GPC的方式。不仅是PHP与MySQL交互过程中会发生编码转换导致问题，PHP自带的编码转换函数也会发生问题，比如mb_convert_encoding()、iconv()，也就是只要发生编码转换就有可能会出现问题。</p>\n<h4 id=\"神奇的字符串\"><a href=\"#神奇的字符串\" class=\"headerlink\" title=\"神奇的字符串\"></a>神奇的字符串</h4><h5 id=\"字符处理函数报错信息泄漏\"><a href=\"#字符处理函数报错信息泄漏\" class=\"headerlink\" title=\"字符处理函数报错信息泄漏\"></a>字符处理函数报错信息泄漏</h5><p>页面的报错信息通常能泄漏文件绝对路径、代码、变量及函数等信息，页面报错有很多情况，但不是所有情况页面都会出现错误信息，显示错误信息需要在PHP配置文件中打开并设置等级。<br>大多数错误提示会显示文件路径，可以获取Web路径。由于用户提交数据在后端大多是以字符串方式处理，所以利用字符串处理函数报错成了必不可少的方法，对于利用参数来报错的方式，给函数传入不同类型的变量是最实用的方式。</p>\n<h5 id=\"字符串截断\"><a href=\"#字符串截断\" class=\"headerlink\" title=\"字符串截断\"></a>字符串截断</h5><p>截断利用最多的是在文件操作上面，通常用来利用文件包含漏洞和文件上传漏洞，<code>%00</code>即NULL会被GPC和addslashes()过滤掉，所以利用<code>%00</code>截断需要GPC关闭以及不被addslashes()函数过滤，另外PHP5.3之后也不能用这种方式截断。</p>\n<ol>\n<li>iconv字符编码转换截断：如从UTF-8转换到GBK，部分代码不能被成功转换（chr(128)-chr(255)之间），在利用该函数转码时，遇到不能处理的字符串时后续字符串不会被处理。</li>\n</ol>\n<h4 id=\"php-输入输出流\"><a href=\"#php-输入输出流\" class=\"headerlink\" title=\"php://输入输出流\"></a>php://输入输出流</h4><h4 id=\"PHP代码解析标签\"><a href=\"#PHP代码解析标签\" class=\"headerlink\" title=\"PHP代码解析标签\"></a>PHP代码解析标签</h4><ol>\n<li>最标准的<code>&lt;?php?&gt;</code></li>\n<li>脚本标签：<code>&lt;script language=&quot;php&quot;&gt;&lt;/script&gt;</code>，可以正常解析PHP代码</li>\n<li>短标签：<code>&lt;?...?&gt;</code>，使用短标签需要在php.ini中设置short_open_tag=on，默认为on状态。</li>\n<li>asp标签<code>&lt;%...%&gt;</code>，在PHP3.0.4后可用，需要在php.ini中设置asp_tags=on，默认为off。<br>通常用于绕过<code>&lt;?php?&gt;</code>标签过滤以留后门及绕过Web程序或waf写入webshell。</li>\n</ol>\n<h4 id=\"fuzz漏洞发现\"><a href=\"#fuzz漏洞发现\" class=\"headerlink\" title=\"fuzz漏洞发现\"></a>fuzz漏洞发现</h4><h4 id=\"不严谨的正则表达式\"><a href=\"#不严谨的正则表达式\" class=\"headerlink\" title=\"不严谨的正则表达式\"></a>不严谨的正则表达式</h4><ol>\n<li>没有用<code>^</code>和<code>$</code>限定匹配开始位置</li>\n<li>特殊字符未转义，匹配特殊字符的原字符时需要使用反斜杠<code>\\</code>来进行转义，不然<code>.</code>则可以用来表示任何字符，存在安全隐患。</li>\n</ol>\n<h4 id=\"十余种MySQL报错注入\"><a href=\"#十余种MySQL报错注入\" class=\"headerlink\" title=\"十余种MySQL报错注入\"></a>十余种MySQL报错注入</h4><p>利用报错注入最快拿到注入的数据。</p>\n<ol>\n<li>floor():<code>id=1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)</code></li>\n<li>extractvalue():<code>id=1 and (extractvalue(1, concat(0x5c, (select user()))))</code></li>\n<li>updatexml():<code>id=1 AND (updatexml(1,concat(0x5e24,(select user()),0x5e24),1))</code></li>\n<li>GeometryCollection():<code>id=1 AND GeometryCollection((select * from(select * from(select user())a)b))</code></li>\n<li>polygon():<code>id=1 AND polygon((select * from(select * from(select user())a)b))</code></li>\n<li>multipoint():<code>id=1 AND multipoint((select * from(select * from(select user())a)b))</code></li>\n<li>multilinestring():<code>id=1 AND multilinestring((select * from(select * from(select user())a)b))</code></li>\n<li>multipolygon():<code>id=1 AND multipolygon((select * from(select * from(select user())a)b))</code></li>\n<li>linestring():<code>id=1 AND linestring((select * from(select * from(select user())a)b))</code></li>\n<li>exp():<code>id=1 and EXP(~(select * from(select user())a))</code></li>\n</ol>\n<h4 id=\"Windows-FindFirstFile\"><a href=\"#Windows-FindFirstFile\" class=\"headerlink\" title=\"Windows FindFirstFile\"></a>Windows FindFirstFile</h4><p>目前大多数程序会对上传文件名加密，这样我们就无法直接得到上传webshell文件路径，但在windows下时，我们只需要知道文件所在目录，利用win特性就可以访问文件，因为win在搜索文件时使用了FindFirstFile这一个winapi函数去一个文件夹（包括子文件夹）去搜索指定文件。<br>利用方法很简单，只需要将文件名不可知部分之后的字符用<code>&lt;</code>或<code>&gt;</code>代替即可，不过要注意，只使用一个<code>&lt;</code>或<code>&gt;</code>则只能代表一个字符，如果文件名是12345或更长，请求<code>1&lt;</code>或<code>1&gt;</code>都访问不到文件，需要<code>1&lt;&lt;</code>才能访问到，代表继续往下搜索，有点像win的短文件名。<br>目前所有PHP版本都可用，PHP并没有在语言层面禁止使用<code>&lt;&gt;</code>这些特殊字符，从函数层面来讲，可以利用这个特性的函数有：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include() include_once() require() require_once()</span><br><span class=\"line\">fopen() ziparchive::open()</span><br><span class=\"line\">copy()</span><br><span class=\"line\">file_get_contents() parse_ini_file() readfile()</span><br><span class=\"line\">file_put_contents()</span><br><span class=\"line\">mkdir()</span><br><span class=\"line\">tempnam() touch()</span><br><span class=\"line\">move_uploaded_file()</span><br><span class=\"line\">opendir() readdir() rewinddir() closedir()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"PHP可变变量\"><a href=\"#PHP可变变量\" class=\"headerlink\" title=\"PHP可变变量\"></a>PHP可变变量</h4><p>部分PHP应用在写配置文件或使用preg_replace()函数第二个参数赋值变量时，会用到双引号来代表string类型给变量赋值，存在代码执行漏洞。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a&#x3D;&quot;$&#123;@phpinfo()&#125;&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>注意，上述代码中的<code>@</code>是必须存在的，不然代码无法执行，但除了该符号外还有其它写法，只要不影响PHP规范就可以执行，举例：</p>\n<ol>\n<li>花括号内第一个字符为空格：<code>$a = &quot;$&#123; phpinfo()&#125;&quot;;</code></li>\n<li>花括号内第一个字符为TAB：<code>$a = &quot;$&#123;  phpinfo()&#125;&quot;;</code></li>\n<li>花括号内第一个字符为注释符：<code>$a = &quot;$&#123;/**/phpinfo()&#125;&quot;;</code></li>\n<li>花括号内第一个字符为回车换行符：<code>$a = &quot;$&#123; phpinfo()&#125;&quot;;</code></li>\n<li>花括号内第一个字符为加号：<code>$a = &quot;$&#123;+phpinfo()&#125;&quot;;</code></li>\n<li>花括号内第一个字符为减号：<code>$a = &quot;$&#123;-phpinfo()&#125;&quot;;</code></li>\n<li>花括号内第一个字符为感叹号：<code>$a = &quot;$&#123;!phpinfo()&#125;&quot;;</code><br>除此之外还有一些如<code>~</code>、<code>\\</code>等。</li>\n</ol>\n<h2 id=\"PHP安全编程规范\"><a href=\"#PHP安全编程规范\" class=\"headerlink\" title=\"PHP安全编程规范\"></a>PHP安全编程规范</h2><h3 id=\"参数的安全过滤\"><a href=\"#参数的安全过滤\" class=\"headerlink\" title=\"参数的安全过滤\"></a>参数的安全过滤</h3><h4 id=\"第三方过滤函数与类\"><a href=\"#第三方过滤函数与类\" class=\"headerlink\" title=\"第三方过滤函数与类\"></a>第三方过滤函数与类</h4><p>目前大多数程序都有一个统一的参数过滤入口，但对于特定场景和漏洞就不够好用。所以除了总入口，在具体功能点也需要进行过滤。</p>\n<h4 id=\"内置过滤函数\"><a href=\"#内置过滤函数\" class=\"headerlink\" title=\"内置过滤函数\"></a>内置过滤函数</h4><ol>\n<li>SQL注入过滤函数：有addslashes()、mysql_real_escape_string()以及mysql_escape_string()，作用都是给字符串添加反斜杠<code>\\</code>来转义掉单引号、双引号、反斜杠以及空字符NULL。addslashes()和mysql_escape_string()都是直接在敏感字符串前加反斜杠，可能会存在宽字节注入绕过的问题，而mysql_real_escape_string()会考虑当前连接数据库的字符集编码，更加安全。</li>\n<li>XSS过滤函数：有htmlspecialchars()和strip_tags()，功能不同，htmlspecialchars作用是将字符串中的特殊字符转换成HTML实体编码，能够干掉大多数的XSS攻击。strip_tags则是用来去掉HTML及PHP标记。</li>\n<li>命令执行过滤函数：有escapeshellcmd()和escapeshellarg()两个函数，escapeshellcmd过滤的字符为下方代码框所示，win下过滤方式则是在这些字符前面加了<code>^</code>符号，linux下则是在这些字符前加了反斜杠。escapeshellarg函数过滤较简单，给所有参数加上一对双引号，强制为字符串。 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;,;,&#96;,|,*,?,~,&lt;,&gt;,^,(,),[,],&#123;,&#125;,$,\\,\\x0A,\\xFF,% 以及单双引号</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用安全的加密算法\"><a href=\"#使用安全的加密算法\" class=\"headerlink\" title=\"使用安全的加密算法\"></a>使用安全的加密算法</h3><ol>\n<li>对称加密：算法安全性比较高，数据的实际安全性取决于密钥的管理。所以不建议使用对称加密对用户密码进行加密存储。</li>\n<li>非对称加密：安全性比对称加密更好。</li>\n<li>单向加密：不可逆算法，常见如MD系列和sha1，通常用于保存密码和做数字签名，但存在碰撞的问题。</li>\n</ol>\n<h3 id=\"业务功能安全设计\"><a href=\"#业务功能安全设计\" class=\"headerlink\" title=\"业务功能安全设计\"></a>业务功能安全设计</h3><h4 id=\"验证码\"><a href=\"#验证码\" class=\"headerlink\" title=\"验证码\"></a>验证码</h4><h5 id=\"验证码绕过\"><a href=\"#验证码绕过\" class=\"headerlink\" title=\"验证码绕过\"></a>验证码绕过</h5><ol>\n<li>不刷新直接绕过：后端接收一次请求后并没有主动刷新验证码，将验证码和session绑定在一起，为了保证验证码正常使用，会把验证码明文或加密后放在Cookie或POST数据包里，所以每次只要同一个数据包里的两个验证码对应即可绕过。（重复发包利用？）</li>\n<li>暴力破解：验证码能够被爆破，主要是程序没有设置验证码错误次数和超时设定，导致能够不断尝试。</li>\n<li>机器识别：利用机器识别验证码。</li>\n<li>打码平台：人工打码绕过。</li>\n</ol>\n<h6 id=\"对策\"><a href=\"#对策\" class=\"headerlink\" title=\"对策\"></a>对策</h6><ol>\n<li>设置验证码错误次数（最重要）。</li>\n<li>不把验证码放在HTML页面或cookie中。</li>\n<li>验证码设置只能请求一次，请求一次后不管错误与否都在后端程序强制刷新。</li>\n<li>短信或邮件验证码必须要6位以上字母和数字混合，图片或语音验证码需要加强混淆干扰。（短信验证码这条似乎在当前不适用，多数厂商选择限制短时间同IP发包等，但不增加验证码复杂度）</li>\n<li>验证码要动态生成，不能统一生成多次调用。</li>\n</ol>\n<h5 id=\"验证码资源滥用\"><a href=\"#验证码资源滥用\" class=\"headerlink\" title=\"验证码资源滥用\"></a>验证码资源滥用</h5><p>利用大量网站短信验证码未限制获取验证码次数和时间间隔的接口，实现短信/邮箱轰炸。防护比较简单，限制单个手机号在一个时间段内请求接收短信的次数，或限制某一IP在一个时间段内请求接收短信的次数。</p>\n<h4 id=\"用户登录\"><a href=\"#用户登录\" class=\"headerlink\" title=\"用户登录\"></a>用户登录</h4><h5 id=\"撞库登录\"><a href=\"#撞库登录\" class=\"headerlink\" title=\"撞库登录\"></a>撞库登录</h5><p>指登录口没有做登录次数限制，导致可以使用不同的用户及密码不断进行登录尝试，遍历用户密码。撞库漏洞情况有：</p>\n<ol>\n<li>用户名和密码错误次数都无限制。</li>\n<li>单时间段内用户密码错误次数限制。（可以使用单密码和用户名列表撞库）</li>\n<li>单时间段内IP登录错误次数限制。（存在误杀内网用户的可能）<br>比较好的解决方案是使用登录验证码和多因素认证。</li>\n</ol>\n<h5 id=\"API登录\"><a href=\"#API登录\" class=\"headerlink\" title=\"API登录\"></a>API登录</h5><p>免重新登录跳转处存在漏洞，如修改用户参数实现任意登录。对于这种漏洞注意以下安全点：</p>\n<ol>\n<li>登录密钥（clientkey）需要不可预测且不固定，生成key的算法中加入随机字符。</li>\n<li>API接口禁止搜索引擎收录。</li>\n<li>登录密钥当次绑定当前主机，换机器不可用，防止木马和嗅探。</li>\n</ol>\n<h4 id=\"用户注册\"><a href=\"#用户注册\" class=\"headerlink\" title=\"用户注册\"></a>用户注册</h4><ol>\n<li>设计验证码。</li>\n<li>采集用户机器唯一识别码，拦截短时间内多次注册。</li>\n<li>根据帐号格式自学习识别垃圾帐号。</li>\n<li>防止SQL注入漏洞与XSS漏洞（常见）。</li>\n</ol>\n<h4 id=\"密码找回\"><a href=\"#密码找回\" class=\"headerlink\" title=\"密码找回\"></a>密码找回</h4><ol>\n<li>输入用户名/邮箱/手机阶段：抓包修改手机/邮箱参数。</li>\n<li>填写验证码和新密码阶段：<ul>\n<li>验证凭证简单，可以被暴力破解。</li>\n<li>验证凭证算法简单，凭证可以被预测。</li>\n<li>验证凭证直接保存在源码里。</li>\n</ul>\n</li>\n<li>发送新密码阶段：<br>凭证未绑定用户：请求发送至邮箱的找回密码链接时，后端根据uid和key对应判断该链接有效，但将新密码提交到服务器时，服务器端没有判断当前key是否和uid或邮箱匹配，直接修改掉uid或邮箱指定的用户密码。这样只要拦截修改密码的请求包，篡改用户参数即可。所以安全风险点应该注意的有：<ul>\n<li>接收验证码的邮箱和手机号不可由用户控制，应直接从数据库读取。</li>\n<li>加强验证凭证复杂度，防止被暴力破解。</li>\n<li>限制验证凭证错误次数，单用户在一定时间内验证码错误一定次数，强制等待一段时间。</li>\n<li>验证凭证设置失效时间。</li>\n<li>验证凭证不要保存在页面。</li>\n<li>输入用户邮箱或ID、手机号取验证凭证的地方需要设置验证码防止短信炸弹和批量找回等。</li>\n<li>验证凭证跟用户名、用户ID、用户邮箱绑定，找回密码时验证当前凭证是否是当前用户的。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"资料查看和修改\"><a href=\"#资料查看和修改\" class=\"headerlink\" title=\"资料查看和修改\"></a>资料查看和修改</h4><p>这里主要介绍的是越权漏洞的利用。</p>\n<ol>\n<li>未验证用户权限：直接修改当前资源ID即可访问该资源，没有验证当前资源是否属于当前用户。</li>\n<li>未验证当前登录用户：虽然程序绑定了用户ID和资源ID，但该用户ID是访问资源时直接从cookie或post、get参数里获取，所以可以通过修改成另一用户ID，利用其权限操作资源。<br>上述漏洞较多出现在用户资料修改，及用户资料查看。<br>防御思路有：</li>\n</ol>\n<ul>\n<li>用户资源ID（订单ID、地址ID等）绑定到用户，只允许有权限的用户查看。</li>\n<li>当前用户信息存储到session，不放在request中，避免攻击者修改。</li>\n</ul>\n<h4 id=\"投票-积分-抽奖\"><a href=\"#投票-积分-抽奖\" class=\"headerlink\" title=\"投票/积分/抽奖\"></a>投票/积分/抽奖</h4><p>共同点：<code>单个用户次数存在限制</code>，该限制存在很多绕过方式。<br>通常有几种利用方法：</p>\n<ol>\n<li>cookie或POST请求正文绕过。修改cookie或post请求数据产生绕过。</li>\n<li>基于IP验证。看程序获取IP的方式，如果是client-ip或x_forward_for获取IP，可直接伪造IP绕过。</li>\n<li>基于用户认证。利用批量注册刷票，或在投票时随意修改POST包或cookie里的当前uid、用户名等查看是否能够绕过限制。<br>从上述利用手段可以看到主要三个点是IP、登录用户、cookie，可用性比较高的防御手段如下：</li>\n<li>机器识别码验证。</li>\n<li>操作需要登录，当前用户信息从session读取。</li>\n</ol>\n<h4 id=\"充值支付\"><a href=\"#充值支付\" class=\"headerlink\" title=\"充值支付\"></a>充值支付</h4><p>主要有四种情况：客户端可修改单价、总价和购买数量以及利用时间差多次购买。<br>主要应对手法是：</p>\n<ol>\n<li>保证数据可信，商品单价和总价不可从客户端获取。</li>\n<li>购买数量不能小于等于0。</li>\n<li>账户支付锁定机制，当一个支付操作开始就应该立马锁定当前用户，不能同时两个后端请求对余额进行操作。</li>\n</ol>\n<h4 id=\"私信及反馈\"><a href=\"#私信及反馈\" class=\"headerlink\" title=\"私信及反馈\"></a>私信及反馈</h4><p>除去特殊情况下可以滤去的SQL注入或命令执行等少见漏洞外，最常见的就是XSS漏洞以及越权漏洞。</p>\n<h4 id=\"远程地址访问\"><a href=\"#远程地址访问\" class=\"headerlink\" title=\"远程地址访问\"></a>远程地址访问</h4><p>访问远程地址获取资源的功能可能会被利用（如填入内网地址）<br>利用限制填写来防御该类漏洞，但大部分厂商修复时不会考虑到短地址的问题，修复后仍然可以通过生成短链接的方式利用。</p>\n<h4 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h4><p>本身就是一个高危功能，权限管理不当会导致被攻击者利用写入webshell。<br>为了保证安全，在满足业务需求的情况下，设计时应遵循以下几点：</p>\n<ol>\n<li>禁止写入脚本可在服务器端执行的文件：如服务器可解析PHP，那么此次就需要限制不能操作PHP扩展名的文件和PHP标签的代码。</li>\n<li>限制文件管理功能操作的目录：限制文件管理功能只能操作固定目录，目录不能从客户端提交，在代码中设置好即可，如果实在需要进行目录跳转的话，一定要禁止提交<code>../</code>以及<code>\\..</code>避免越权操作其它目录。</li>\n<li>限制文件管理功能访问权限：虽然文件管理是正常功能，但存在一点后门的性质，所以对该功能的访问权限一定要严格控制。</li>\n<li>禁止上传特殊字符文件名的文件：大多数应用会对上传文件进行展示，特别是网盘类应用，注意对上传文件名进行检查，禁止文件名中有尖括号、单双引号等特殊字符，避免攻击者用文件名进行XSS攻击。</li>\n</ol>\n<h4 id=\"数据库管理\"><a href=\"#数据库管理\" class=\"headerlink\" title=\"数据库管理\"></a>数据库管理</h4><p>跟文件管理一样，也是高位功能，如果启动数据库服务的系统用户以及数据库用户的权限都够大，完全可以利用该功能直接执行系统命令及操作服务器上的文件。</p>\n<ol>\n<li>限制可以操作的数据库表，要么在代码内写死只能操作哪些表（如备份），如果是执行SQL语句的方式可以另建一个mysql用户，限制可操作的表和字段。</li>\n<li>限制备份到服务器上的文件名，需要随机生成且长度不低于16位，扩展名不能自定义，防止攻击者利用该功能导出webshell或猜解文件名直接下载。</li>\n</ol>\n<h4 id=\"命令-代码执行\"><a href=\"#命令-代码执行\" class=\"headerlink\" title=\"命令/代码执行\"></a>命令/代码执行</h4><p>命令执行和代码执行功能通常都在系统后台，相比来说，命令执行的功能使用更多，代码执行功能在特殊应用上才会存在。设计该类功能时应该注意以下几点：</p>\n<ol>\n<li>严格控制该功能访问权限，建议高权限才能访问。</li>\n<li>在满足业务需求的情况下，可以设置命令白名单，可以使用escapeshellcmd()以及escapeshellarg()函数进行过滤，命令直接写死在代码中更好。</li>\n<li>给命令及代码执行功能设置独立密码。</li>\n<li>代码执行功能限制脚本可访问的路径。</li>\n<li>在满足需求的情况下限制当前执行命令的系统权限。</li>\n</ol>\n<h4 id=\"文件-数据库备份\"><a href=\"#文件-数据库备份\" class=\"headerlink\" title=\"文件/数据库备份\"></a>文件/数据库备份</h4><p>是非常常见且非常容易出现安全问题的功能。常见问题有：</p>\n<ol>\n<li>未授权访问和越权访问：未授权访问体现在这个备份功能直接在不登录或登录验证存在漏洞的情况下可以直接使用，以及存在CSRF漏洞可以直接劫持管理员帐号进行备份。</li>\n<li>备份文件名可预测：攻击者可以利用枚举的方式扫描备份包。</li>\n<li>生成的文件可利用web中间件解析漏洞执行代码<br>如何设计备份功能：</li>\n<li>进行权限控制，只有高权限可以使用。</li>\n<li>文件名随机生成，不可预测。</li>\n</ol>\n<h4 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h4><p>因为爬虫无法抓取APP中的API接口，所以接口的SQL注入等漏洞相对较多，目前最多的问题是未授权访问以及数据遍历漏洞。因此设计一个安全的API需要从以下几点考虑：</p>\n<ol>\n<li>访问权限控制：必要时加入账户体系，严格控制数据调用权限，比如当前用户必须在登录情况下，接口参数中传入自己登录成功的凭证才能调用这个用户的数据。另外不需要账户体系时也要注意加入不可暴力破解的访问密钥进行权限验证。</li>\n<li>防止敏感信息泄漏：没必要输出的信息应该注意禁止输出。</li>\n<li>SQL注入等常规漏洞：注意代码安全，防止SQL注入、代码执行等漏洞的产生。</li>\n</ol>\n<h3 id=\"应用安全体系建设\"><a href=\"#应用安全体系建设\" class=\"headerlink\" title=\"应用安全体系建设\"></a>应用安全体系建设</h3><ol>\n<li>用户密码安全策略</li>\n<li>前后台用户分表：同表的情况下可能存在越权修改管理员信息等情况。</li>\n<li>后台地址隐藏</li>\n<li>密码加密存储方式</li>\n<li>登录限制</li>\n<li>API站库分离</li>\n<li>慎用第三方服务</li>\n<li>严格的权限控制</li>\n<li>敏感操作多因素验证</li>\n<li>应用自身的安全中心</li>\n</ol>\n"},{"title":"服务网格学习笔记","toc":true,"date":"2023-03-23T12:20:18.000Z","_content":"\n## 现状-我们为什么需要服务网格\nKubernetes是一种开源的容器编排平台，用于自动化部署、扩展和管理容器化应用程序。它可以帮助开发人员和运维团队快速、可靠地构建、部署和管理大规模容器化应用程序，同时提供负载均衡、自动伸缩、自我修复等功能，从而实现高可用性和弹性。Kubernetes最初由Google开发，并于2014年开源发布。成为主流容器编排架构，其本身就是按照云原生的理念来设计，将单体应用拆分微服务。\n但随着微服务 数量增多，为了解决微服务管理，避免繁琐的服务发现、监控、分布式追踪等事务，服务网格应运而生。\n相比而言，K8S关注的是应用的生命周期，它管理的对象是资源和部署，对于服务的管控力度很小。而服务网格正好弥补了这个缺陷。服务网格可以连接、控制、观察和保护微服务。\n![image.png](https://tsunamori.github.io/img/image_1679471507318_0.png)\n从图中我们可以看到 kube-proxy 的设置是全局的，无法对每个服务进行细粒度的控制，Kubernetes 可以做的只有拓扑感知路由、将流量就近路由，为 Pod 设置进出站的网络策略。\n而服务网格通过 Sidecar 的方式将 Kubernetes 中的流量控制从服务层中抽离出来，为每个 Pod 中注入代理，并通过一个控制平面来操控这些分布式代理。这样可以实现更大的弹性。\n*CNI：容器网络接口。\n\n## 基础知识\n\n### 什么是Service Mesh\n服务网格（Service Mesh）是处理服务间通信的基础设施层。它负责构成现代云原生应用程序的复杂服务拓扑来可靠地交付请求。在实践中，Service Mesh 通常以轻量级网络代理阵列的形式实现，这些代理与应用程序代码部署在一起，对应用程序来说无需感知代理的存在。\n\n![Service Mesh 架构图](https://tsunamori.github.io/img/service-mesh-arch.png)\nService Mesh 作为 sidecar 运行，对应用程序来说是透明，所有应用程序间的流量都会通过它，所以对应用程序流量的控制都可以在 service mesh 中实现。\n\n### Service Mesh的特点\n应用程序间通信的中间层\n轻量级网络代理\n应用程序无感知\n解耦应用程序的重试/超时、监控、追踪和服务发现\n对于编写应用程序来说一般无须关心 TCP/IP 这一层（比如通过 HTTP 协议的 RESTful 应用），同样使用 Service Mesh 也就无须关心服务之间的那些原本通过服务框架实现的事情\n目前两款流行的 Service Mesh 开源软件 [Istio](https://istio.io)和 [Linkerd](https://linkerd.io)都可以直接在 Kubernetes 中集成，其中 Linkerd 已经成为 CNCF 中的项目。\n\n## 工作流程（以Istio为例）\nSidecar（Istio 中使用 [Envoy](https://envoyproxy.io)作为 sidecar 代理）将服务请求路由到目的地址，根据请求中的参数判断是到生产环境、测试环境还是 staging 环境中的服务（服务可能同时部署在这三个环境中），是路由到本地环境还是公有云环境？所有的这些路由信息可以动态配置，可以是全局配置也可以为某些服务单独配置。这些配置是由服务网格的控制平面推送给各个sidecar 的，\n当 sidecar 确认了目的地址后，将流量发送到相应服务发现端点，在 Kubernetes 中是 service，然后 service 会将服务转发给后端的实例。\nSidecar 根据它观测到最近请求的延迟时间，选择出所有应用程序的实例中响应最快的实例。\nSidecar 将请求发送给该实例，同时记录响应类型和延迟数据。\n如果该实例挂了、不响应了或者进程不工作了，sidecar 会将把请求发送到其他实例上重试。\n如果该实例持续返回 error，sidecar 会将该实例从负载均衡池中移除，稍后再周期性得重试。\n如果请求的截止时间已过，sidecar 主动标记该请求为失败，而不是再次尝试添加负载。\nSidecar 以 metric 和分布式追踪的形式捕获上述行为的各个方面，这些追踪信息将发送到集中 metric 系统。\n\n## 主要功能\n**流量控制**：流控是最主要也是最重要的功能，通过 Service Mesh，我们可以为应用提供智能路由（蓝绿部署、金丝雀发布、A/B test）、超时重试、熔断、故障注入、流量镜像等各种控制能力\n**安全**：在安全层面上，授权和身份认证也可以托管给 Service Mesh\n**策略**：可以为流量设置配额、黑白名单等策略\n**可观察性**：服务的可观察性一般是通过指标数据、日志、追踪三个方式展现的，目前的 Service Mesh 产品可以很容易和和主流的后端设施整合，提供给应用系统完整的监控能力\n\n## 优点\n屏蔽分布式系统通信的复杂性(负载均衡、服务发现、认证授权、监控追踪、流量控制等等)，服务只用关注业务逻辑\n真正的语言无关，服务可以用任何语言编写，只需和 Service Mesh 通信即可\n对应用透明，Service Mesh 组件可以单独升级\n\n## 缺点\n增加的复杂性: 在一个已经很复杂的环境中引入代理、sidecar 和其他组件会极大地增加开发和运维的复杂性\n需要的专业知识: 在容器编排服务（k8s）之上添加 Istio 之类的服务网格要求运维人员足够熟悉这两种服务\n延迟: 服务网格是一种入侵的、复杂的技术，它能向服务架构中添加显著的延迟\n平台的依赖性: 服务网格的侵入性迫使开发人员和运维人员适应一个高度自治的平台，并遵守其规则（现存的服务迁移足够让开发咬牙切齿！）\n\n## 适用场景\n\n### 服务治理与业务逻辑解耦\n在运行时，SDK 和业务应用的代码是混合在一个进程中运行的，耦合度非常高，会产生如下问题：\n升级成本高：每次升级都需要业务应用修改 SDK 版本号，重新发布。在业务飞速发展的时候，更倾向于专注业务，不希望分散精力做升级等事情。\n版本碎片化严重：由于升级成本高，但中间件还是会向前发展，久而久之，就会导致线上 SDK 版本各不统一、能力参差不齐，造成很难统一治理。\n中间件演进困难：由于版本碎片化严重，导致中间件向前演进过程中需要兼容各种老版本的逻辑，无法实现快速迭代。\n使用 Service Mesh 后，您可以将 SDK 中的大部分能力从应用中剥离拆解为独立进程，以 Sidecar 的模式部署。通过将服务治理能力下沉到基础设施，可以让业务更加专注于业务逻辑，中间件团队则更加专注于各种通用能力，真正实现独立演进、透明升级，提升整体效率。\n\n### 多语言、多协议支持\n随着新技术的发展和人员更替，在同一家公司中往往会出现使用各种不同语言、不同框架的应用和服务，为了能够统一管控这些服务，以往的做法是为每种语言、每种框架都重新开发一套完整的 SDK，维护成本非常高，而且对中间件团队的人员结构也带来了很大的挑战。\n有了服务网格之后，通过将主体的服务治理能力下沉到基础设施，多语言的支持就轻松很多了，只需要提供一个非常轻量的 SDK，甚至很多情况都不需要一个单独的 SDK，就可以方便地实现多语言、多协议的统一流量管控、监控等治理需求。\n\n### 云原生架构转型助力\n从单体应用到微服务架构改造以及全面容器化的云原生架构基础往往带来很高的改造成本。SOFAStack 服务网格可以满足未容器化的虚拟机部署方案，也可以兼容过渡阶段的部分容器化和虚拟化混合部署的场景，加速企业云原生架构转型。\n\n### 金融场景网络安全\n当前很多公司的微服务体系建设都建立在内网可信的假设之上，然而这个原则在当前大规模上云的背景下可能显得有点不合时宜，尤其是涉及到一些金融场景的时候。\n通过服务网格可以更方便地实现应用的身份标识和访问控制，辅之以数据加密，就能实现全链路可信，从而使得服务可以运行于零信任网络中，提升整体安全水位。\n\n### 未来发展方向\n**让 Istio 适用于一切环境和一切工作负载**\n**当前痛点**：基础设施向容器化、云原生转型，存在多集群的容器、虚拟机并存的复杂环境。\n**未来解决方案**：需要改造Istio，在其之上增加一层，用于集群管理，并在每个集群中部署一个网关，统一连接到一个边缘代理，让所有的集群互联。这也是 [Tetrate Service Bridge](https://www.tetrate.io/tetrate-service-bridge/) 的产品理念\n**API 网关与服务网格的融合**\nAPI网关、反向代理和服务网格的融合产品。\n\n## 参考资料\n[什么是 Service Mesh（服务网格）？](https://jimmysong.io/blog/what-is-a-service-mesh/)\n[Pattern: Service Mesh](https://philcalcado.com/2017/08/03/pattern_service_mesh.html)\n[What's a service mesh?](https://www.redhat.com/en/topics/microservices/what-is-a-service-mesh)\n[阿里云 - 服务网格 - 应用场景](https://help.aliyun.com/document_detail/200296.html)\n[服务网格现状之我见](https://jimmysong.io/blog/service-mesh-insight/)\n[我为啥不看好 ServiceMesh](https://cloud.tencent.com/developer/article/1400578)\n[不是所有的应用都需要 ServiceMesh 架构](https://cloud.tencent.com/developer/news/846981)\n[服务网格对比API网关](https://jimmysong.io/kubernetes-handbook/usecases/service-mesh-vs-api-gateway.html)\n\n## 扩展阅读\n[云原生社区-国内最大的独立第三方云原生社区](https://cloudnative.to/)\n[云原生资料库](https://lib.jimmysong.io)\n《深入理解Istio：云原生服务网格进阶实战》","source":"_posts/服务网格学习笔记.md","raw":"---\ntitle: 服务网格学习笔记\ntoc: true\ndate: 2023-03-23 12:20:18\ntags: [云原生, 笔记]\ncategories: [学习笔记]\n---\n\n## 现状-我们为什么需要服务网格\nKubernetes是一种开源的容器编排平台，用于自动化部署、扩展和管理容器化应用程序。它可以帮助开发人员和运维团队快速、可靠地构建、部署和管理大规模容器化应用程序，同时提供负载均衡、自动伸缩、自我修复等功能，从而实现高可用性和弹性。Kubernetes最初由Google开发，并于2014年开源发布。成为主流容器编排架构，其本身就是按照云原生的理念来设计，将单体应用拆分微服务。\n但随着微服务 数量增多，为了解决微服务管理，避免繁琐的服务发现、监控、分布式追踪等事务，服务网格应运而生。\n相比而言，K8S关注的是应用的生命周期，它管理的对象是资源和部署，对于服务的管控力度很小。而服务网格正好弥补了这个缺陷。服务网格可以连接、控制、观察和保护微服务。\n![image.png](https://tsunamori.github.io/img/image_1679471507318_0.png)\n从图中我们可以看到 kube-proxy 的设置是全局的，无法对每个服务进行细粒度的控制，Kubernetes 可以做的只有拓扑感知路由、将流量就近路由，为 Pod 设置进出站的网络策略。\n而服务网格通过 Sidecar 的方式将 Kubernetes 中的流量控制从服务层中抽离出来，为每个 Pod 中注入代理，并通过一个控制平面来操控这些分布式代理。这样可以实现更大的弹性。\n*CNI：容器网络接口。\n\n## 基础知识\n\n### 什么是Service Mesh\n服务网格（Service Mesh）是处理服务间通信的基础设施层。它负责构成现代云原生应用程序的复杂服务拓扑来可靠地交付请求。在实践中，Service Mesh 通常以轻量级网络代理阵列的形式实现，这些代理与应用程序代码部署在一起，对应用程序来说无需感知代理的存在。\n\n![Service Mesh 架构图](https://tsunamori.github.io/img/service-mesh-arch.png)\nService Mesh 作为 sidecar 运行，对应用程序来说是透明，所有应用程序间的流量都会通过它，所以对应用程序流量的控制都可以在 service mesh 中实现。\n\n### Service Mesh的特点\n应用程序间通信的中间层\n轻量级网络代理\n应用程序无感知\n解耦应用程序的重试/超时、监控、追踪和服务发现\n对于编写应用程序来说一般无须关心 TCP/IP 这一层（比如通过 HTTP 协议的 RESTful 应用），同样使用 Service Mesh 也就无须关心服务之间的那些原本通过服务框架实现的事情\n目前两款流行的 Service Mesh 开源软件 [Istio](https://istio.io)和 [Linkerd](https://linkerd.io)都可以直接在 Kubernetes 中集成，其中 Linkerd 已经成为 CNCF 中的项目。\n\n## 工作流程（以Istio为例）\nSidecar（Istio 中使用 [Envoy](https://envoyproxy.io)作为 sidecar 代理）将服务请求路由到目的地址，根据请求中的参数判断是到生产环境、测试环境还是 staging 环境中的服务（服务可能同时部署在这三个环境中），是路由到本地环境还是公有云环境？所有的这些路由信息可以动态配置，可以是全局配置也可以为某些服务单独配置。这些配置是由服务网格的控制平面推送给各个sidecar 的，\n当 sidecar 确认了目的地址后，将流量发送到相应服务发现端点，在 Kubernetes 中是 service，然后 service 会将服务转发给后端的实例。\nSidecar 根据它观测到最近请求的延迟时间，选择出所有应用程序的实例中响应最快的实例。\nSidecar 将请求发送给该实例，同时记录响应类型和延迟数据。\n如果该实例挂了、不响应了或者进程不工作了，sidecar 会将把请求发送到其他实例上重试。\n如果该实例持续返回 error，sidecar 会将该实例从负载均衡池中移除，稍后再周期性得重试。\n如果请求的截止时间已过，sidecar 主动标记该请求为失败，而不是再次尝试添加负载。\nSidecar 以 metric 和分布式追踪的形式捕获上述行为的各个方面，这些追踪信息将发送到集中 metric 系统。\n\n## 主要功能\n**流量控制**：流控是最主要也是最重要的功能，通过 Service Mesh，我们可以为应用提供智能路由（蓝绿部署、金丝雀发布、A/B test）、超时重试、熔断、故障注入、流量镜像等各种控制能力\n**安全**：在安全层面上，授权和身份认证也可以托管给 Service Mesh\n**策略**：可以为流量设置配额、黑白名单等策略\n**可观察性**：服务的可观察性一般是通过指标数据、日志、追踪三个方式展现的，目前的 Service Mesh 产品可以很容易和和主流的后端设施整合，提供给应用系统完整的监控能力\n\n## 优点\n屏蔽分布式系统通信的复杂性(负载均衡、服务发现、认证授权、监控追踪、流量控制等等)，服务只用关注业务逻辑\n真正的语言无关，服务可以用任何语言编写，只需和 Service Mesh 通信即可\n对应用透明，Service Mesh 组件可以单独升级\n\n## 缺点\n增加的复杂性: 在一个已经很复杂的环境中引入代理、sidecar 和其他组件会极大地增加开发和运维的复杂性\n需要的专业知识: 在容器编排服务（k8s）之上添加 Istio 之类的服务网格要求运维人员足够熟悉这两种服务\n延迟: 服务网格是一种入侵的、复杂的技术，它能向服务架构中添加显著的延迟\n平台的依赖性: 服务网格的侵入性迫使开发人员和运维人员适应一个高度自治的平台，并遵守其规则（现存的服务迁移足够让开发咬牙切齿！）\n\n## 适用场景\n\n### 服务治理与业务逻辑解耦\n在运行时，SDK 和业务应用的代码是混合在一个进程中运行的，耦合度非常高，会产生如下问题：\n升级成本高：每次升级都需要业务应用修改 SDK 版本号，重新发布。在业务飞速发展的时候，更倾向于专注业务，不希望分散精力做升级等事情。\n版本碎片化严重：由于升级成本高，但中间件还是会向前发展，久而久之，就会导致线上 SDK 版本各不统一、能力参差不齐，造成很难统一治理。\n中间件演进困难：由于版本碎片化严重，导致中间件向前演进过程中需要兼容各种老版本的逻辑，无法实现快速迭代。\n使用 Service Mesh 后，您可以将 SDK 中的大部分能力从应用中剥离拆解为独立进程，以 Sidecar 的模式部署。通过将服务治理能力下沉到基础设施，可以让业务更加专注于业务逻辑，中间件团队则更加专注于各种通用能力，真正实现独立演进、透明升级，提升整体效率。\n\n### 多语言、多协议支持\n随着新技术的发展和人员更替，在同一家公司中往往会出现使用各种不同语言、不同框架的应用和服务，为了能够统一管控这些服务，以往的做法是为每种语言、每种框架都重新开发一套完整的 SDK，维护成本非常高，而且对中间件团队的人员结构也带来了很大的挑战。\n有了服务网格之后，通过将主体的服务治理能力下沉到基础设施，多语言的支持就轻松很多了，只需要提供一个非常轻量的 SDK，甚至很多情况都不需要一个单独的 SDK，就可以方便地实现多语言、多协议的统一流量管控、监控等治理需求。\n\n### 云原生架构转型助力\n从单体应用到微服务架构改造以及全面容器化的云原生架构基础往往带来很高的改造成本。SOFAStack 服务网格可以满足未容器化的虚拟机部署方案，也可以兼容过渡阶段的部分容器化和虚拟化混合部署的场景，加速企业云原生架构转型。\n\n### 金融场景网络安全\n当前很多公司的微服务体系建设都建立在内网可信的假设之上，然而这个原则在当前大规模上云的背景下可能显得有点不合时宜，尤其是涉及到一些金融场景的时候。\n通过服务网格可以更方便地实现应用的身份标识和访问控制，辅之以数据加密，就能实现全链路可信，从而使得服务可以运行于零信任网络中，提升整体安全水位。\n\n### 未来发展方向\n**让 Istio 适用于一切环境和一切工作负载**\n**当前痛点**：基础设施向容器化、云原生转型，存在多集群的容器、虚拟机并存的复杂环境。\n**未来解决方案**：需要改造Istio，在其之上增加一层，用于集群管理，并在每个集群中部署一个网关，统一连接到一个边缘代理，让所有的集群互联。这也是 [Tetrate Service Bridge](https://www.tetrate.io/tetrate-service-bridge/) 的产品理念\n**API 网关与服务网格的融合**\nAPI网关、反向代理和服务网格的融合产品。\n\n## 参考资料\n[什么是 Service Mesh（服务网格）？](https://jimmysong.io/blog/what-is-a-service-mesh/)\n[Pattern: Service Mesh](https://philcalcado.com/2017/08/03/pattern_service_mesh.html)\n[What's a service mesh?](https://www.redhat.com/en/topics/microservices/what-is-a-service-mesh)\n[阿里云 - 服务网格 - 应用场景](https://help.aliyun.com/document_detail/200296.html)\n[服务网格现状之我见](https://jimmysong.io/blog/service-mesh-insight/)\n[我为啥不看好 ServiceMesh](https://cloud.tencent.com/developer/article/1400578)\n[不是所有的应用都需要 ServiceMesh 架构](https://cloud.tencent.com/developer/news/846981)\n[服务网格对比API网关](https://jimmysong.io/kubernetes-handbook/usecases/service-mesh-vs-api-gateway.html)\n\n## 扩展阅读\n[云原生社区-国内最大的独立第三方云原生社区](https://cloudnative.to/)\n[云原生资料库](https://lib.jimmysong.io)\n《深入理解Istio：云原生服务网格进阶实战》","slug":"服务网格学习笔记","published":1,"updated":"2023-03-23T12:43:19.810Z","_id":"clfl3628b0000eo400kra1f2a","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"现状-我们为什么需要服务网格\"><a href=\"#现状-我们为什么需要服务网格\" class=\"headerlink\" title=\"现状-我们为什么需要服务网格\"></a>现状-我们为什么需要服务网格</h2><p>Kubernetes是一种开源的容器编排平台，用于自动化部署、扩展和管理容器化应用程序。它可以帮助开发人员和运维团队快速、可靠地构建、部署和管理大规模容器化应用程序，同时提供负载均衡、自动伸缩、自我修复等功能，从而实现高可用性和弹性。Kubernetes最初由Google开发，并于2014年开源发布。成为主流容器编排架构，其本身就是按照云原生的理念来设计，将单体应用拆分微服务。<br>但随着微服务 数量增多，为了解决微服务管理，避免繁琐的服务发现、监控、分布式追踪等事务，服务网格应运而生。<br>相比而言，K8S关注的是应用的生命周期，它管理的对象是资源和部署，对于服务的管控力度很小。而服务网格正好弥补了这个缺陷。服务网格可以连接、控制、观察和保护微服务。<br><img src=\"https://tsunamori.github.io/img/image_1679471507318_0.png\" alt=\"image.png\"><br>从图中我们可以看到 kube-proxy 的设置是全局的，无法对每个服务进行细粒度的控制，Kubernetes 可以做的只有拓扑感知路由、将流量就近路由，为 Pod 设置进出站的网络策略。<br>而服务网格通过 Sidecar 的方式将 Kubernetes 中的流量控制从服务层中抽离出来，为每个 Pod 中注入代理，并通过一个控制平面来操控这些分布式代理。这样可以实现更大的弹性。<br>*CNI：容器网络接口。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"什么是Service-Mesh\"><a href=\"#什么是Service-Mesh\" class=\"headerlink\" title=\"什么是Service Mesh\"></a>什么是Service Mesh</h3><p>服务网格（Service Mesh）是处理服务间通信的基础设施层。它负责构成现代云原生应用程序的复杂服务拓扑来可靠地交付请求。在实践中，Service Mesh 通常以轻量级网络代理阵列的形式实现，这些代理与应用程序代码部署在一起，对应用程序来说无需感知代理的存在。</p>\n<p><img src=\"https://tsunamori.github.io/img/service-mesh-arch.png\" alt=\"Service Mesh 架构图\"><br>Service Mesh 作为 sidecar 运行，对应用程序来说是透明，所有应用程序间的流量都会通过它，所以对应用程序流量的控制都可以在 service mesh 中实现。</p>\n<h3 id=\"Service-Mesh的特点\"><a href=\"#Service-Mesh的特点\" class=\"headerlink\" title=\"Service Mesh的特点\"></a>Service Mesh的特点</h3><p>应用程序间通信的中间层<br>轻量级网络代理<br>应用程序无感知<br>解耦应用程序的重试/超时、监控、追踪和服务发现<br>对于编写应用程序来说一般无须关心 TCP/IP 这一层（比如通过 HTTP 协议的 RESTful 应用），同样使用 Service Mesh 也就无须关心服务之间的那些原本通过服务框架实现的事情<br>目前两款流行的 Service Mesh 开源软件 <a href=\"https://istio.io/\">Istio</a>和 <a href=\"https://linkerd.io/\">Linkerd</a>都可以直接在 Kubernetes 中集成，其中 Linkerd 已经成为 CNCF 中的项目。</p>\n<h2 id=\"工作流程（以Istio为例）\"><a href=\"#工作流程（以Istio为例）\" class=\"headerlink\" title=\"工作流程（以Istio为例）\"></a>工作流程（以Istio为例）</h2><p>Sidecar（Istio 中使用 <a href=\"https://envoyproxy.io/\">Envoy</a>作为 sidecar 代理）将服务请求路由到目的地址，根据请求中的参数判断是到生产环境、测试环境还是 staging 环境中的服务（服务可能同时部署在这三个环境中），是路由到本地环境还是公有云环境？所有的这些路由信息可以动态配置，可以是全局配置也可以为某些服务单独配置。这些配置是由服务网格的控制平面推送给各个sidecar 的，<br>当 sidecar 确认了目的地址后，将流量发送到相应服务发现端点，在 Kubernetes 中是 service，然后 service 会将服务转发给后端的实例。<br>Sidecar 根据它观测到最近请求的延迟时间，选择出所有应用程序的实例中响应最快的实例。<br>Sidecar 将请求发送给该实例，同时记录响应类型和延迟数据。<br>如果该实例挂了、不响应了或者进程不工作了，sidecar 会将把请求发送到其他实例上重试。<br>如果该实例持续返回 error，sidecar 会将该实例从负载均衡池中移除，稍后再周期性得重试。<br>如果请求的截止时间已过，sidecar 主动标记该请求为失败，而不是再次尝试添加负载。<br>Sidecar 以 metric 和分布式追踪的形式捕获上述行为的各个方面，这些追踪信息将发送到集中 metric 系统。</p>\n<h2 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h2><p><strong>流量控制</strong>：流控是最主要也是最重要的功能，通过 Service Mesh，我们可以为应用提供智能路由（蓝绿部署、金丝雀发布、A/B test）、超时重试、熔断、故障注入、流量镜像等各种控制能力<br><strong>安全</strong>：在安全层面上，授权和身份认证也可以托管给 Service Mesh<br><strong>策略</strong>：可以为流量设置配额、黑白名单等策略<br><strong>可观察性</strong>：服务的可观察性一般是通过指标数据、日志、追踪三个方式展现的，目前的 Service Mesh 产品可以很容易和和主流的后端设施整合，提供给应用系统完整的监控能力</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><p>屏蔽分布式系统通信的复杂性(负载均衡、服务发现、认证授权、监控追踪、流量控制等等)，服务只用关注业务逻辑<br>真正的语言无关，服务可以用任何语言编写，只需和 Service Mesh 通信即可<br>对应用透明，Service Mesh 组件可以单独升级</p>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><p>增加的复杂性: 在一个已经很复杂的环境中引入代理、sidecar 和其他组件会极大地增加开发和运维的复杂性<br>需要的专业知识: 在容器编排服务（k8s）之上添加 Istio 之类的服务网格要求运维人员足够熟悉这两种服务<br>延迟: 服务网格是一种入侵的、复杂的技术，它能向服务架构中添加显著的延迟<br>平台的依赖性: 服务网格的侵入性迫使开发人员和运维人员适应一个高度自治的平台，并遵守其规则（现存的服务迁移足够让开发咬牙切齿！）</p>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><h3 id=\"服务治理与业务逻辑解耦\"><a href=\"#服务治理与业务逻辑解耦\" class=\"headerlink\" title=\"服务治理与业务逻辑解耦\"></a>服务治理与业务逻辑解耦</h3><p>在运行时，SDK 和业务应用的代码是混合在一个进程中运行的，耦合度非常高，会产生如下问题：<br>升级成本高：每次升级都需要业务应用修改 SDK 版本号，重新发布。在业务飞速发展的时候，更倾向于专注业务，不希望分散精力做升级等事情。<br>版本碎片化严重：由于升级成本高，但中间件还是会向前发展，久而久之，就会导致线上 SDK 版本各不统一、能力参差不齐，造成很难统一治理。<br>中间件演进困难：由于版本碎片化严重，导致中间件向前演进过程中需要兼容各种老版本的逻辑，无法实现快速迭代。<br>使用 Service Mesh 后，您可以将 SDK 中的大部分能力从应用中剥离拆解为独立进程，以 Sidecar 的模式部署。通过将服务治理能力下沉到基础设施，可以让业务更加专注于业务逻辑，中间件团队则更加专注于各种通用能力，真正实现独立演进、透明升级，提升整体效率。</p>\n<h3 id=\"多语言、多协议支持\"><a href=\"#多语言、多协议支持\" class=\"headerlink\" title=\"多语言、多协议支持\"></a>多语言、多协议支持</h3><p>随着新技术的发展和人员更替，在同一家公司中往往会出现使用各种不同语言、不同框架的应用和服务，为了能够统一管控这些服务，以往的做法是为每种语言、每种框架都重新开发一套完整的 SDK，维护成本非常高，而且对中间件团队的人员结构也带来了很大的挑战。<br>有了服务网格之后，通过将主体的服务治理能力下沉到基础设施，多语言的支持就轻松很多了，只需要提供一个非常轻量的 SDK，甚至很多情况都不需要一个单独的 SDK，就可以方便地实现多语言、多协议的统一流量管控、监控等治理需求。</p>\n<h3 id=\"云原生架构转型助力\"><a href=\"#云原生架构转型助力\" class=\"headerlink\" title=\"云原生架构转型助力\"></a>云原生架构转型助力</h3><p>从单体应用到微服务架构改造以及全面容器化的云原生架构基础往往带来很高的改造成本。SOFAStack 服务网格可以满足未容器化的虚拟机部署方案，也可以兼容过渡阶段的部分容器化和虚拟化混合部署的场景，加速企业云原生架构转型。</p>\n<h3 id=\"金融场景网络安全\"><a href=\"#金融场景网络安全\" class=\"headerlink\" title=\"金融场景网络安全\"></a>金融场景网络安全</h3><p>当前很多公司的微服务体系建设都建立在内网可信的假设之上，然而这个原则在当前大规模上云的背景下可能显得有点不合时宜，尤其是涉及到一些金融场景的时候。<br>通过服务网格可以更方便地实现应用的身份标识和访问控制，辅之以数据加密，就能实现全链路可信，从而使得服务可以运行于零信任网络中，提升整体安全水位。</p>\n<h3 id=\"未来发展方向\"><a href=\"#未来发展方向\" class=\"headerlink\" title=\"未来发展方向\"></a>未来发展方向</h3><p><strong>让 Istio 适用于一切环境和一切工作负载</strong><br><strong>当前痛点</strong>：基础设施向容器化、云原生转型，存在多集群的容器、虚拟机并存的复杂环境。<br><strong>未来解决方案</strong>：需要改造Istio，在其之上增加一层，用于集群管理，并在每个集群中部署一个网关，统一连接到一个边缘代理，让所有的集群互联。这也是 <a href=\"https://www.tetrate.io/tetrate-service-bridge/\">Tetrate Service Bridge</a> 的产品理念<br><strong>API 网关与服务网格的融合</strong><br>API网关、反向代理和服务网格的融合产品。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://jimmysong.io/blog/what-is-a-service-mesh/\">什么是 Service Mesh（服务网格）？</a><br><a href=\"https://philcalcado.com/2017/08/03/pattern_service_mesh.html\">Pattern: Service Mesh</a><br><a href=\"https://www.redhat.com/en/topics/microservices/what-is-a-service-mesh\">What’s a service mesh?</a><br><a href=\"https://help.aliyun.com/document_detail/200296.html\">阿里云 - 服务网格 - 应用场景</a><br><a href=\"https://jimmysong.io/blog/service-mesh-insight/\">服务网格现状之我见</a><br><a href=\"https://cloud.tencent.com/developer/article/1400578\">我为啥不看好 ServiceMesh</a><br><a href=\"https://cloud.tencent.com/developer/news/846981\">不是所有的应用都需要 ServiceMesh 架构</a><br><a href=\"https://jimmysong.io/kubernetes-handbook/usecases/service-mesh-vs-api-gateway.html\">服务网格对比API网关</a></p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><p><a href=\"https://cloudnative.to/\">云原生社区-国内最大的独立第三方云原生社区</a><br><a href=\"https://lib.jimmysong.io/\">云原生资料库</a><br>《深入理解Istio：云原生服务网格进阶实战》</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"现状-我们为什么需要服务网格\"><a href=\"#现状-我们为什么需要服务网格\" class=\"headerlink\" title=\"现状-我们为什么需要服务网格\"></a>现状-我们为什么需要服务网格</h2><p>Kubernetes是一种开源的容器编排平台，用于自动化部署、扩展和管理容器化应用程序。它可以帮助开发人员和运维团队快速、可靠地构建、部署和管理大规模容器化应用程序，同时提供负载均衡、自动伸缩、自我修复等功能，从而实现高可用性和弹性。Kubernetes最初由Google开发，并于2014年开源发布。成为主流容器编排架构，其本身就是按照云原生的理念来设计，将单体应用拆分微服务。<br>但随着微服务 数量增多，为了解决微服务管理，避免繁琐的服务发现、监控、分布式追踪等事务，服务网格应运而生。<br>相比而言，K8S关注的是应用的生命周期，它管理的对象是资源和部署，对于服务的管控力度很小。而服务网格正好弥补了这个缺陷。服务网格可以连接、控制、观察和保护微服务。<br><img src=\"https://tsunamori.github.io/img/image_1679471507318_0.png\" alt=\"image.png\"><br>从图中我们可以看到 kube-proxy 的设置是全局的，无法对每个服务进行细粒度的控制，Kubernetes 可以做的只有拓扑感知路由、将流量就近路由，为 Pod 设置进出站的网络策略。<br>而服务网格通过 Sidecar 的方式将 Kubernetes 中的流量控制从服务层中抽离出来，为每个 Pod 中注入代理，并通过一个控制平面来操控这些分布式代理。这样可以实现更大的弹性。<br>*CNI：容器网络接口。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"什么是Service-Mesh\"><a href=\"#什么是Service-Mesh\" class=\"headerlink\" title=\"什么是Service Mesh\"></a>什么是Service Mesh</h3><p>服务网格（Service Mesh）是处理服务间通信的基础设施层。它负责构成现代云原生应用程序的复杂服务拓扑来可靠地交付请求。在实践中，Service Mesh 通常以轻量级网络代理阵列的形式实现，这些代理与应用程序代码部署在一起，对应用程序来说无需感知代理的存在。</p>\n<p><img src=\"https://tsunamori.github.io/img/service-mesh-arch.png\" alt=\"Service Mesh 架构图\"><br>Service Mesh 作为 sidecar 运行，对应用程序来说是透明，所有应用程序间的流量都会通过它，所以对应用程序流量的控制都可以在 service mesh 中实现。</p>\n<h3 id=\"Service-Mesh的特点\"><a href=\"#Service-Mesh的特点\" class=\"headerlink\" title=\"Service Mesh的特点\"></a>Service Mesh的特点</h3><p>应用程序间通信的中间层<br>轻量级网络代理<br>应用程序无感知<br>解耦应用程序的重试/超时、监控、追踪和服务发现<br>对于编写应用程序来说一般无须关心 TCP/IP 这一层（比如通过 HTTP 协议的 RESTful 应用），同样使用 Service Mesh 也就无须关心服务之间的那些原本通过服务框架实现的事情<br>目前两款流行的 Service Mesh 开源软件 <a href=\"https://istio.io/\">Istio</a>和 <a href=\"https://linkerd.io/\">Linkerd</a>都可以直接在 Kubernetes 中集成，其中 Linkerd 已经成为 CNCF 中的项目。</p>\n<h2 id=\"工作流程（以Istio为例）\"><a href=\"#工作流程（以Istio为例）\" class=\"headerlink\" title=\"工作流程（以Istio为例）\"></a>工作流程（以Istio为例）</h2><p>Sidecar（Istio 中使用 <a href=\"https://envoyproxy.io/\">Envoy</a>作为 sidecar 代理）将服务请求路由到目的地址，根据请求中的参数判断是到生产环境、测试环境还是 staging 环境中的服务（服务可能同时部署在这三个环境中），是路由到本地环境还是公有云环境？所有的这些路由信息可以动态配置，可以是全局配置也可以为某些服务单独配置。这些配置是由服务网格的控制平面推送给各个sidecar 的，<br>当 sidecar 确认了目的地址后，将流量发送到相应服务发现端点，在 Kubernetes 中是 service，然后 service 会将服务转发给后端的实例。<br>Sidecar 根据它观测到最近请求的延迟时间，选择出所有应用程序的实例中响应最快的实例。<br>Sidecar 将请求发送给该实例，同时记录响应类型和延迟数据。<br>如果该实例挂了、不响应了或者进程不工作了，sidecar 会将把请求发送到其他实例上重试。<br>如果该实例持续返回 error，sidecar 会将该实例从负载均衡池中移除，稍后再周期性得重试。<br>如果请求的截止时间已过，sidecar 主动标记该请求为失败，而不是再次尝试添加负载。<br>Sidecar 以 metric 和分布式追踪的形式捕获上述行为的各个方面，这些追踪信息将发送到集中 metric 系统。</p>\n<h2 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h2><p><strong>流量控制</strong>：流控是最主要也是最重要的功能，通过 Service Mesh，我们可以为应用提供智能路由（蓝绿部署、金丝雀发布、A/B test）、超时重试、熔断、故障注入、流量镜像等各种控制能力<br><strong>安全</strong>：在安全层面上，授权和身份认证也可以托管给 Service Mesh<br><strong>策略</strong>：可以为流量设置配额、黑白名单等策略<br><strong>可观察性</strong>：服务的可观察性一般是通过指标数据、日志、追踪三个方式展现的，目前的 Service Mesh 产品可以很容易和和主流的后端设施整合，提供给应用系统完整的监控能力</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><p>屏蔽分布式系统通信的复杂性(负载均衡、服务发现、认证授权、监控追踪、流量控制等等)，服务只用关注业务逻辑<br>真正的语言无关，服务可以用任何语言编写，只需和 Service Mesh 通信即可<br>对应用透明，Service Mesh 组件可以单独升级</p>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><p>增加的复杂性: 在一个已经很复杂的环境中引入代理、sidecar 和其他组件会极大地增加开发和运维的复杂性<br>需要的专业知识: 在容器编排服务（k8s）之上添加 Istio 之类的服务网格要求运维人员足够熟悉这两种服务<br>延迟: 服务网格是一种入侵的、复杂的技术，它能向服务架构中添加显著的延迟<br>平台的依赖性: 服务网格的侵入性迫使开发人员和运维人员适应一个高度自治的平台，并遵守其规则（现存的服务迁移足够让开发咬牙切齿！）</p>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><h3 id=\"服务治理与业务逻辑解耦\"><a href=\"#服务治理与业务逻辑解耦\" class=\"headerlink\" title=\"服务治理与业务逻辑解耦\"></a>服务治理与业务逻辑解耦</h3><p>在运行时，SDK 和业务应用的代码是混合在一个进程中运行的，耦合度非常高，会产生如下问题：<br>升级成本高：每次升级都需要业务应用修改 SDK 版本号，重新发布。在业务飞速发展的时候，更倾向于专注业务，不希望分散精力做升级等事情。<br>版本碎片化严重：由于升级成本高，但中间件还是会向前发展，久而久之，就会导致线上 SDK 版本各不统一、能力参差不齐，造成很难统一治理。<br>中间件演进困难：由于版本碎片化严重，导致中间件向前演进过程中需要兼容各种老版本的逻辑，无法实现快速迭代。<br>使用 Service Mesh 后，您可以将 SDK 中的大部分能力从应用中剥离拆解为独立进程，以 Sidecar 的模式部署。通过将服务治理能力下沉到基础设施，可以让业务更加专注于业务逻辑，中间件团队则更加专注于各种通用能力，真正实现独立演进、透明升级，提升整体效率。</p>\n<h3 id=\"多语言、多协议支持\"><a href=\"#多语言、多协议支持\" class=\"headerlink\" title=\"多语言、多协议支持\"></a>多语言、多协议支持</h3><p>随着新技术的发展和人员更替，在同一家公司中往往会出现使用各种不同语言、不同框架的应用和服务，为了能够统一管控这些服务，以往的做法是为每种语言、每种框架都重新开发一套完整的 SDK，维护成本非常高，而且对中间件团队的人员结构也带来了很大的挑战。<br>有了服务网格之后，通过将主体的服务治理能力下沉到基础设施，多语言的支持就轻松很多了，只需要提供一个非常轻量的 SDK，甚至很多情况都不需要一个单独的 SDK，就可以方便地实现多语言、多协议的统一流量管控、监控等治理需求。</p>\n<h3 id=\"云原生架构转型助力\"><a href=\"#云原生架构转型助力\" class=\"headerlink\" title=\"云原生架构转型助力\"></a>云原生架构转型助力</h3><p>从单体应用到微服务架构改造以及全面容器化的云原生架构基础往往带来很高的改造成本。SOFAStack 服务网格可以满足未容器化的虚拟机部署方案，也可以兼容过渡阶段的部分容器化和虚拟化混合部署的场景，加速企业云原生架构转型。</p>\n<h3 id=\"金融场景网络安全\"><a href=\"#金融场景网络安全\" class=\"headerlink\" title=\"金融场景网络安全\"></a>金融场景网络安全</h3><p>当前很多公司的微服务体系建设都建立在内网可信的假设之上，然而这个原则在当前大规模上云的背景下可能显得有点不合时宜，尤其是涉及到一些金融场景的时候。<br>通过服务网格可以更方便地实现应用的身份标识和访问控制，辅之以数据加密，就能实现全链路可信，从而使得服务可以运行于零信任网络中，提升整体安全水位。</p>\n<h3 id=\"未来发展方向\"><a href=\"#未来发展方向\" class=\"headerlink\" title=\"未来发展方向\"></a>未来发展方向</h3><p><strong>让 Istio 适用于一切环境和一切工作负载</strong><br><strong>当前痛点</strong>：基础设施向容器化、云原生转型，存在多集群的容器、虚拟机并存的复杂环境。<br><strong>未来解决方案</strong>：需要改造Istio，在其之上增加一层，用于集群管理，并在每个集群中部署一个网关，统一连接到一个边缘代理，让所有的集群互联。这也是 <a href=\"https://www.tetrate.io/tetrate-service-bridge/\">Tetrate Service Bridge</a> 的产品理念<br><strong>API 网关与服务网格的融合</strong><br>API网关、反向代理和服务网格的融合产品。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://jimmysong.io/blog/what-is-a-service-mesh/\">什么是 Service Mesh（服务网格）？</a><br><a href=\"https://philcalcado.com/2017/08/03/pattern_service_mesh.html\">Pattern: Service Mesh</a><br><a href=\"https://www.redhat.com/en/topics/microservices/what-is-a-service-mesh\">What’s a service mesh?</a><br><a href=\"https://help.aliyun.com/document_detail/200296.html\">阿里云 - 服务网格 - 应用场景</a><br><a href=\"https://jimmysong.io/blog/service-mesh-insight/\">服务网格现状之我见</a><br><a href=\"https://cloud.tencent.com/developer/article/1400578\">我为啥不看好 ServiceMesh</a><br><a href=\"https://cloud.tencent.com/developer/news/846981\">不是所有的应用都需要 ServiceMesh 架构</a><br><a href=\"https://jimmysong.io/kubernetes-handbook/usecases/service-mesh-vs-api-gateway.html\">服务网格对比API网关</a></p>\n<h2 id=\"扩展阅读\"><a href=\"#扩展阅读\" class=\"headerlink\" title=\"扩展阅读\"></a>扩展阅读</h2><p><a href=\"https://cloudnative.to/\">云原生社区-国内最大的独立第三方云原生社区</a><br><a href=\"https://lib.jimmysong.io/\">云原生资料库</a><br>《深入理解Istio：云原生服务网格进阶实战》</p>\n"},{"title":"Chatgpt翻译外文书籍初体验","toc":true,"date":"2023-03-27T18:12:17.000Z","_content":"\n很喜欢的番剧5月马上要出新剧情，为了方便挖掘细枝末节推理剧情走向，我从Kobo买了之前第三季的小说。实际上这是个原创番，先有动画版再有小说版。但据考究党所言，小说里有一些动画删减的内容和补充，所以还是兴冲冲买了下来。当然我并看不懂日文，冷门番也不好找新小说的译文。于是，尝试了一下使用Chatgpt来翻译小说，算是尝试着积累一些对新玩意的体验。\n\n使用的是python3 开源项目[bilingual_book_maker](https://github.com/yihong0618/bilingual_book_maker)，感谢作者。\n\n当前（23.3.27）支持epub和TXT较好，pdf支持稍差。支持多种翻译api，包括Chatgpt api的gpt3 和gpt3.5（默认）、Deepl、彩云小译。暂不支持非API版本的Chatgpt free或者Chatgpt plus，易风控。\n\n## 如何使用\n\n我使用了Chatgpt api免费版，主要是还有$18余额没有过期。\n\n首先挂好代理，[登录chatgpt api平台](https://platform.openai.com/account/api-keys)获取你的api key，注意这个key跟github一样，生成后只给你展示一次，如果忘了就要新建一个key。\n\nclone项目，pip安装依赖。\n\n具体使用命令参考项目说明，我这里用的是`python3 make_book.py --book_name test_books/xxx.epub --openai_key [你刚才申请的key]` ，默认翻译为简中所以可以不用配置。\n\n## 使用体验\n\n### 实际成本\n\n总共3本日文小说，目前已经完整的翻译了一本，原文187K字，费时5.5个小时，用了$1.1，共3652个请求。（如下图）\n\n![image.png](https://tsunamori.github.io/img/image_1679910592101_0.png)\n\n从成本上来说，还是十分划算的。\n\n### 翻译效果\n\n简单截开头一页示范一下效果。（首先声明这是我自己为了方便阅读操作的，购买正版小说，仅自用，不会传播）\n\n![image.png](https://tsunamori.github.io/img/image_1679910972280_0.png)\n\n翻译的时候也可以选择不输出原文，但我认为原文一定有翻译无法明确表达的感觉，所以保留了原文。\n\n可以看到内容是通顺的。当然实际还是会发现一些问题。比如一系（的）执行官被翻译成了一名执行官。但好在我对这部作品整体设定比较熟悉，阅读时可以接受一些失误。\n\n同样，因为脚本是按照段落，一段一段的去发送翻译请求。所以对于这种几个字就分段的日式小说风格来说，请求量还是相对较多的，也会对耗时产生影响。\n\n## 可能的优化项\n\n在翻阅大家提的issues时，也发现了一些当前chatgpt翻译的问题，比如说上下文之间人名对不上（在日文小说里倒是还好，英文小说可能更严重一些），据说修改prompt可以优化。\n\n现在单线程翻译很慢，脚本pr已经支持了多线程配置，但目前开发者测试下来还相当不稳定（主要是api暂时不那么支持多线程），所以并不推荐。\n\n如果经常使用且自己有翻译功底可以比较清晰的明白AI译文的失误在哪里的话，应该可以调整prompt来优化译文。我自己并不常用所以暂时还是使用默认配置的prompt了。\n\n## Reference\n\n[bilingual_book_maker](https://github.com/yihong0618/bilingual_book_maker)\n[Kobo电子书转换epub](https://www.bilibili.com/video/BV1Ny4y1b7cH/)\n[adobe digital editions 4.5.11 installers](https://www.adobe.com/solutions/ebook/digital-editions/download.html)\n[ebook conventer](https://www.ebook-converter.com/download/installebookconverter.htm)","source":"_posts/Chatgpt翻译外文书籍初体验.md","raw":"---\ntitle: Chatgpt翻译外文书籍初体验\ntoc: true\ndate: 2023-03-27 18:12:17\ntags: [Chatgpt]\ncategories: [学习笔记]\n---\n\n很喜欢的番剧5月马上要出新剧情，为了方便挖掘细枝末节推理剧情走向，我从Kobo买了之前第三季的小说。实际上这是个原创番，先有动画版再有小说版。但据考究党所言，小说里有一些动画删减的内容和补充，所以还是兴冲冲买了下来。当然我并看不懂日文，冷门番也不好找新小说的译文。于是，尝试了一下使用Chatgpt来翻译小说，算是尝试着积累一些对新玩意的体验。\n\n使用的是python3 开源项目[bilingual_book_maker](https://github.com/yihong0618/bilingual_book_maker)，感谢作者。\n\n当前（23.3.27）支持epub和TXT较好，pdf支持稍差。支持多种翻译api，包括Chatgpt api的gpt3 和gpt3.5（默认）、Deepl、彩云小译。暂不支持非API版本的Chatgpt free或者Chatgpt plus，易风控。\n\n## 如何使用\n\n我使用了Chatgpt api免费版，主要是还有$18余额没有过期。\n\n首先挂好代理，[登录chatgpt api平台](https://platform.openai.com/account/api-keys)获取你的api key，注意这个key跟github一样，生成后只给你展示一次，如果忘了就要新建一个key。\n\nclone项目，pip安装依赖。\n\n具体使用命令参考项目说明，我这里用的是`python3 make_book.py --book_name test_books/xxx.epub --openai_key [你刚才申请的key]` ，默认翻译为简中所以可以不用配置。\n\n## 使用体验\n\n### 实际成本\n\n总共3本日文小说，目前已经完整的翻译了一本，原文187K字，费时5.5个小时，用了$1.1，共3652个请求。（如下图）\n\n![image.png](https://tsunamori.github.io/img/image_1679910592101_0.png)\n\n从成本上来说，还是十分划算的。\n\n### 翻译效果\n\n简单截开头一页示范一下效果。（首先声明这是我自己为了方便阅读操作的，购买正版小说，仅自用，不会传播）\n\n![image.png](https://tsunamori.github.io/img/image_1679910972280_0.png)\n\n翻译的时候也可以选择不输出原文，但我认为原文一定有翻译无法明确表达的感觉，所以保留了原文。\n\n可以看到内容是通顺的。当然实际还是会发现一些问题。比如一系（的）执行官被翻译成了一名执行官。但好在我对这部作品整体设定比较熟悉，阅读时可以接受一些失误。\n\n同样，因为脚本是按照段落，一段一段的去发送翻译请求。所以对于这种几个字就分段的日式小说风格来说，请求量还是相对较多的，也会对耗时产生影响。\n\n## 可能的优化项\n\n在翻阅大家提的issues时，也发现了一些当前chatgpt翻译的问题，比如说上下文之间人名对不上（在日文小说里倒是还好，英文小说可能更严重一些），据说修改prompt可以优化。\n\n现在单线程翻译很慢，脚本pr已经支持了多线程配置，但目前开发者测试下来还相当不稳定（主要是api暂时不那么支持多线程），所以并不推荐。\n\n如果经常使用且自己有翻译功底可以比较清晰的明白AI译文的失误在哪里的话，应该可以调整prompt来优化译文。我自己并不常用所以暂时还是使用默认配置的prompt了。\n\n## Reference\n\n[bilingual_book_maker](https://github.com/yihong0618/bilingual_book_maker)\n[Kobo电子书转换epub](https://www.bilibili.com/video/BV1Ny4y1b7cH/)\n[adobe digital editions 4.5.11 installers](https://www.adobe.com/solutions/ebook/digital-editions/download.html)\n[ebook conventer](https://www.ebook-converter.com/download/installebookconverter.htm)","slug":"Chatgpt翻译外文书籍初体验","published":1,"updated":"2023-03-27T10:22:32.074Z","_id":"clfqokc5z0000xy40ftygfwi1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>很喜欢的番剧5月马上要出新剧情，为了方便挖掘细枝末节推理剧情走向，我从Kobo买了之前第三季的小说。实际上这是个原创番，先有动画版再有小说版。但据考究党所言，小说里有一些动画删减的内容和补充，所以还是兴冲冲买了下来。当然我并看不懂日文，冷门番也不好找新小说的译文。于是，尝试了一下使用Chatgpt来翻译小说，算是尝试着积累一些对新玩意的体验。</p>\n<p>使用的是python3 开源项目<a href=\"https://github.com/yihong0618/bilingual_book_maker\">bilingual_book_maker</a>，感谢作者。</p>\n<p>当前（23.3.27）支持epub和TXT较好，pdf支持稍差。支持多种翻译api，包括Chatgpt api的gpt3 和gpt3.5（默认）、Deepl、彩云小译。暂不支持非API版本的Chatgpt free或者Chatgpt plus，易风控。</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>我使用了Chatgpt api免费版，主要是还有$18余额没有过期。</p>\n<p>首先挂好代理，<a href=\"https://platform.openai.com/account/api-keys\">登录chatgpt api平台</a>获取你的api key，注意这个key跟github一样，生成后只给你展示一次，如果忘了就要新建一个key。</p>\n<p>clone项目，pip安装依赖。</p>\n<p>具体使用命令参考项目说明，我这里用的是<code>python3 make_book.py --book_name test_books/xxx.epub --openai_key [你刚才申请的key]</code> ，默认翻译为简中所以可以不用配置。</p>\n<h2 id=\"使用体验\"><a href=\"#使用体验\" class=\"headerlink\" title=\"使用体验\"></a>使用体验</h2><h3 id=\"实际成本\"><a href=\"#实际成本\" class=\"headerlink\" title=\"实际成本\"></a>实际成本</h3><p>总共3本日文小说，目前已经完整的翻译了一本，原文187K字，费时5.5个小时，用了$1.1，共3652个请求。（如下图）</p>\n<p><img src=\"https://tsunamori.github.io/img/image_1679910592101_0.png\" alt=\"image.png\"></p>\n<p>从成本上来说，还是十分划算的。</p>\n<h3 id=\"翻译效果\"><a href=\"#翻译效果\" class=\"headerlink\" title=\"翻译效果\"></a>翻译效果</h3><p>简单截开头一页示范一下效果。（首先声明这是我自己为了方便阅读操作的，购买正版小说，仅自用，不会传播）</p>\n<p><img src=\"https://tsunamori.github.io/img/image_1679910972280_0.png\" alt=\"image.png\"></p>\n<p>翻译的时候也可以选择不输出原文，但我认为原文一定有翻译无法明确表达的感觉，所以保留了原文。</p>\n<p>可以看到内容是通顺的。当然实际还是会发现一些问题。比如一系（的）执行官被翻译成了一名执行官。但好在我对这部作品整体设定比较熟悉，阅读时可以接受一些失误。</p>\n<p>同样，因为脚本是按照段落，一段一段的去发送翻译请求。所以对于这种几个字就分段的日式小说风格来说，请求量还是相对较多的，也会对耗时产生影响。</p>\n<h2 id=\"可能的优化项\"><a href=\"#可能的优化项\" class=\"headerlink\" title=\"可能的优化项\"></a>可能的优化项</h2><p>在翻阅大家提的issues时，也发现了一些当前chatgpt翻译的问题，比如说上下文之间人名对不上（在日文小说里倒是还好，英文小说可能更严重一些），据说修改prompt可以优化。</p>\n<p>现在单线程翻译很慢，脚本pr已经支持了多线程配置，但目前开发者测试下来还相当不稳定（主要是api暂时不那么支持多线程），所以并不推荐。</p>\n<p>如果经常使用且自己有翻译功底可以比较清晰的明白AI译文的失误在哪里的话，应该可以调整prompt来优化译文。我自己并不常用所以暂时还是使用默认配置的prompt了。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://github.com/yihong0618/bilingual_book_maker\">bilingual_book_maker</a><br><a href=\"https://www.bilibili.com/video/BV1Ny4y1b7cH/\">Kobo电子书转换epub</a><br><a href=\"https://www.adobe.com/solutions/ebook/digital-editions/download.html\">adobe digital editions 4.5.11 installers</a><br><a href=\"https://www.ebook-converter.com/download/installebookconverter.htm\">ebook conventer</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>很喜欢的番剧5月马上要出新剧情，为了方便挖掘细枝末节推理剧情走向，我从Kobo买了之前第三季的小说。实际上这是个原创番，先有动画版再有小说版。但据考究党所言，小说里有一些动画删减的内容和补充，所以还是兴冲冲买了下来。当然我并看不懂日文，冷门番也不好找新小说的译文。于是，尝试了一下使用Chatgpt来翻译小说，算是尝试着积累一些对新玩意的体验。</p>\n<p>使用的是python3 开源项目<a href=\"https://github.com/yihong0618/bilingual_book_maker\">bilingual_book_maker</a>，感谢作者。</p>\n<p>当前（23.3.27）支持epub和TXT较好，pdf支持稍差。支持多种翻译api，包括Chatgpt api的gpt3 和gpt3.5（默认）、Deepl、彩云小译。暂不支持非API版本的Chatgpt free或者Chatgpt plus，易风控。</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>我使用了Chatgpt api免费版，主要是还有$18余额没有过期。</p>\n<p>首先挂好代理，<a href=\"https://platform.openai.com/account/api-keys\">登录chatgpt api平台</a>获取你的api key，注意这个key跟github一样，生成后只给你展示一次，如果忘了就要新建一个key。</p>\n<p>clone项目，pip安装依赖。</p>\n<p>具体使用命令参考项目说明，我这里用的是<code>python3 make_book.py --book_name test_books/xxx.epub --openai_key [你刚才申请的key]</code> ，默认翻译为简中所以可以不用配置。</p>\n<h2 id=\"使用体验\"><a href=\"#使用体验\" class=\"headerlink\" title=\"使用体验\"></a>使用体验</h2><h3 id=\"实际成本\"><a href=\"#实际成本\" class=\"headerlink\" title=\"实际成本\"></a>实际成本</h3><p>总共3本日文小说，目前已经完整的翻译了一本，原文187K字，费时5.5个小时，用了$1.1，共3652个请求。（如下图）</p>\n<p><img src=\"https://tsunamori.github.io/img/image_1679910592101_0.png\" alt=\"image.png\"></p>\n<p>从成本上来说，还是十分划算的。</p>\n<h3 id=\"翻译效果\"><a href=\"#翻译效果\" class=\"headerlink\" title=\"翻译效果\"></a>翻译效果</h3><p>简单截开头一页示范一下效果。（首先声明这是我自己为了方便阅读操作的，购买正版小说，仅自用，不会传播）</p>\n<p><img src=\"https://tsunamori.github.io/img/image_1679910972280_0.png\" alt=\"image.png\"></p>\n<p>翻译的时候也可以选择不输出原文，但我认为原文一定有翻译无法明确表达的感觉，所以保留了原文。</p>\n<p>可以看到内容是通顺的。当然实际还是会发现一些问题。比如一系（的）执行官被翻译成了一名执行官。但好在我对这部作品整体设定比较熟悉，阅读时可以接受一些失误。</p>\n<p>同样，因为脚本是按照段落，一段一段的去发送翻译请求。所以对于这种几个字就分段的日式小说风格来说，请求量还是相对较多的，也会对耗时产生影响。</p>\n<h2 id=\"可能的优化项\"><a href=\"#可能的优化项\" class=\"headerlink\" title=\"可能的优化项\"></a>可能的优化项</h2><p>在翻阅大家提的issues时，也发现了一些当前chatgpt翻译的问题，比如说上下文之间人名对不上（在日文小说里倒是还好，英文小说可能更严重一些），据说修改prompt可以优化。</p>\n<p>现在单线程翻译很慢，脚本pr已经支持了多线程配置，但目前开发者测试下来还相当不稳定（主要是api暂时不那么支持多线程），所以并不推荐。</p>\n<p>如果经常使用且自己有翻译功底可以比较清晰的明白AI译文的失误在哪里的话，应该可以调整prompt来优化译文。我自己并不常用所以暂时还是使用默认配置的prompt了。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://github.com/yihong0618/bilingual_book_maker\">bilingual_book_maker</a><br><a href=\"https://www.bilibili.com/video/BV1Ny4y1b7cH/\">Kobo电子书转换epub</a><br><a href=\"https://www.adobe.com/solutions/ebook/digital-editions/download.html\">adobe digital editions 4.5.11 installers</a><br><a href=\"https://www.ebook-converter.com/download/installebookconverter.htm\">ebook conventer</a></p>\n"},{"title":"Logseq使用体验","toc":true,"date":"2023-04-07T02:00:43.000Z","_content":"\n# 初见\n\n之前一直在整理自己的知识库，在尝试过不少笔记软件之后确定了自己的需求：**能自主同步到github存储、支持markdown、支持知识库结构、支持win和Linux系统、功能丰富插件市场好**。\n\n当时选择的是VScode+各种插件支持的方案，在磨合过程中也逐渐形成了自己惯用的插件和自定义配置，但涉及交叉领域的笔记时仍会经常头疼如何分类、放在哪个文件夹更合适、文件夹结构如何调整、分类后如何快速找到。\n\n尽管我已经相当科学的使用了类图书馆索引的方式来构建排序我的文件夹结构，但我经常对分类情况不太满意。当然，这其实算是文件夹体系的一个共同缺陷，所以一直有在找更好的解决方案。\n\n后来接触到了[Logseq](https://github.com/logseq/logseq)，最吸引我的大概就是双链笔记号称的无压分类，以及分类细粒度更高的特点（当然它也比较完善的符合了我的需求）。\n\n到目前已经使用了2个月，也算是过了磨合期，配置和插件选择都相对稳定了下来。所以简单的来讲一讲体验。\n\n# 踩坑\n\nLogseq对我这个一直用惯了传统文件夹体系的人来说，一开始上手还是比较迷茫的。什么是‘块’？什么又是‘页’？为什么没有文件夹和目录？如何才能直观的看到我所有的笔记、确定我之后还可以找回它的位置？\n\n而且由于Logseq的特性，原本markdown的内容直接拖进来会搞的一团糟，在翻阅各类使用说明和前人的使用方式后，我决定把以前的内容放一放，先在logseq写新笔记，用到某些旧笔记内容时再迁移内容，给自己减轻一些迁移压力。\n\nlogseq的体系，与以前的不太一样，但如果不需要精细化的使用，实际上也不会做太多的改变。一开始还会纠结，几段连续的内容，到底要不要合并到同一个‘块’方便管理，后来就直接回车，一句话一‘块’都没关系，省时省力，基本也不会想要回来重新梳理合并。一开始会觉得一边记markdown的结构另一边还要关注新‘块’的缩进位置太过麻烦，后来就干脆放弃了纯md的结构，只在想要强调或者需要整理输出时简单用md装饰一下标题。而且如果实在懒，可以完全不用缩进，把所有内容都摊在第一级、把样例、注释等可能更需要隐藏起来的内容放在第二级也没关系（需要迁移的时候再去改缩进就好啦）。\n\n在写笔记的过程中，也在不断的适应着新的体系，在前人的使用习惯上做一些自己的优化。看着现在的内容逐渐增多，还是小有成就感的。\n\n![logseq生成的体系图](../img/Screenshot_2023-04-07_10-40-10.png)\n\n# 优化\n\nlogseq本身还在Beta测试阶段，功能丰富度相对欠缺，会有一些bug时不时的冒出来（譬如我经常丢失插件的加载状态需要手动重开插件），好在开发团队和社区十分高效。对我这种热爱折腾的人来说，基本是可以接受的。\n\n顺便介绍一下我目前稳定使用的插件。\n\n1. Heading level shortcuts，快捷键设置md标题级别和格式。对频繁使用md标题的人来说还是值得一用，稍微精简了操作。\n2. Doc View Exporter， 生成HTML方便在浏览器上导出为pdf。目前在logseq中使用体验最好的导出pdf插件，美中不足的是对过长的内容生成HTML时会丢掉最下方内容，以及需要在导出前手动将所有折叠块展开，不然也无法导出被折叠的内容，希望后续官方开发团队能支持适配度更好的pdf导出和markdown导出。\n3. Todo list，全局收集所有的to-do内容。使用起来非常方便，to-do随便扔在哪里都可以一键完成。\n4. Awesome Styler，自定义背景，支持背景图片。一开始我很喜欢用它搞一些花里忽哨的背景，后来逐渐简洁了起来。目前主要用它做一些显示颜色的微调。\n5. Bullet Threading，在原版的基础上加深了当前块的结构引导线。方便定位当前块的层级，是我不能没有的东西。\n6. Tabs，使用tab展示多个页面，方便切换。是我不能没有的插件，但tab开多了显示会卡，毕竟不是官方功能。\n7. Block to page，把整块转成页面。使用频率很高，适合一些随便写写积累多了之后导出成单独页面的需求。\n8. TOC Generator，目录生成。目前会将它结合右侧Contents做成一个伪文件夹的目录形式，方便索引。\n9. Git，实现内容同步到git项目。是我的必需插件，在按照个人习惯调配好之后非常好的满足了我的同步需求。\n10. Char Spacing，盘古之白吧算是。为了美观非常有必要。\n11. Randow Notes，笔记随机漫游。在笔记很多了之后，随机漫游是一种很方便整理复习笔记的方式，压力也不会太大。还有一个同款是以块的维度漫游，个人没什么需求。\n\n# 展望\n\nlogseq目前对我来说算是很好的完成了知识收纳的目的，缓解了我的分类焦虑。但实际的知识调用、临时查阅能否满足需求，尚未进行高强度的测试（指的是OSCP考试那种现场查并粘贴复制POC的场景）。但再差也不会差到哪里去，logseq的查询功能响应还是挺快的。\n\n可能需要担忧的是从logseq整个迁移出去时，由于logseq并不完全适配md导致需要大量整理格式的问题。但好在目前没什么压力会迫使我考虑再次迁移知识库，即便logseq现在停止更新，当前内容也足够支持我做好知识管理。\n\n据说logseq或者说双链笔记的所谓“海平面下的冰山”是它的unlinked ref，也就是未引用当前page但提及了page标题的内容，意味着潜在的知识关联。虽然我已经有所了解，但它可能还需要一些插件or功能的支持（譬如一些模糊匹配、一些明显的标记、或者一种全新的漫游笔记方式），并且，也需要更好的定义page标题。\n\n至于是否推荐logseq，功能特性、测评、优缺点有很多人做了很多，不再赘述。如果是像我一样有构建知识库需求、又涉及了很多交叉领域知识的分类焦虑，那么尝试一种新的笔记方式未尝不可。","source":"_posts/Logseq使用体验.md","raw":"---\ntitle: Logseq使用体验\ntoc: true\ndate: 2023-04-07 10:00:43\ntags: [工具]\ncategories: [学习笔记]\n---\n\n# 初见\n\n之前一直在整理自己的知识库，在尝试过不少笔记软件之后确定了自己的需求：**能自主同步到github存储、支持markdown、支持知识库结构、支持win和Linux系统、功能丰富插件市场好**。\n\n当时选择的是VScode+各种插件支持的方案，在磨合过程中也逐渐形成了自己惯用的插件和自定义配置，但涉及交叉领域的笔记时仍会经常头疼如何分类、放在哪个文件夹更合适、文件夹结构如何调整、分类后如何快速找到。\n\n尽管我已经相当科学的使用了类图书馆索引的方式来构建排序我的文件夹结构，但我经常对分类情况不太满意。当然，这其实算是文件夹体系的一个共同缺陷，所以一直有在找更好的解决方案。\n\n后来接触到了[Logseq](https://github.com/logseq/logseq)，最吸引我的大概就是双链笔记号称的无压分类，以及分类细粒度更高的特点（当然它也比较完善的符合了我的需求）。\n\n到目前已经使用了2个月，也算是过了磨合期，配置和插件选择都相对稳定了下来。所以简单的来讲一讲体验。\n\n# 踩坑\n\nLogseq对我这个一直用惯了传统文件夹体系的人来说，一开始上手还是比较迷茫的。什么是‘块’？什么又是‘页’？为什么没有文件夹和目录？如何才能直观的看到我所有的笔记、确定我之后还可以找回它的位置？\n\n而且由于Logseq的特性，原本markdown的内容直接拖进来会搞的一团糟，在翻阅各类使用说明和前人的使用方式后，我决定把以前的内容放一放，先在logseq写新笔记，用到某些旧笔记内容时再迁移内容，给自己减轻一些迁移压力。\n\nlogseq的体系，与以前的不太一样，但如果不需要精细化的使用，实际上也不会做太多的改变。一开始还会纠结，几段连续的内容，到底要不要合并到同一个‘块’方便管理，后来就直接回车，一句话一‘块’都没关系，省时省力，基本也不会想要回来重新梳理合并。一开始会觉得一边记markdown的结构另一边还要关注新‘块’的缩进位置太过麻烦，后来就干脆放弃了纯md的结构，只在想要强调或者需要整理输出时简单用md装饰一下标题。而且如果实在懒，可以完全不用缩进，把所有内容都摊在第一级、把样例、注释等可能更需要隐藏起来的内容放在第二级也没关系（需要迁移的时候再去改缩进就好啦）。\n\n在写笔记的过程中，也在不断的适应着新的体系，在前人的使用习惯上做一些自己的优化。看着现在的内容逐渐增多，还是小有成就感的。\n\n![logseq生成的体系图](../img/Screenshot_2023-04-07_10-40-10.png)\n\n# 优化\n\nlogseq本身还在Beta测试阶段，功能丰富度相对欠缺，会有一些bug时不时的冒出来（譬如我经常丢失插件的加载状态需要手动重开插件），好在开发团队和社区十分高效。对我这种热爱折腾的人来说，基本是可以接受的。\n\n顺便介绍一下我目前稳定使用的插件。\n\n1. Heading level shortcuts，快捷键设置md标题级别和格式。对频繁使用md标题的人来说还是值得一用，稍微精简了操作。\n2. Doc View Exporter， 生成HTML方便在浏览器上导出为pdf。目前在logseq中使用体验最好的导出pdf插件，美中不足的是对过长的内容生成HTML时会丢掉最下方内容，以及需要在导出前手动将所有折叠块展开，不然也无法导出被折叠的内容，希望后续官方开发团队能支持适配度更好的pdf导出和markdown导出。\n3. Todo list，全局收集所有的to-do内容。使用起来非常方便，to-do随便扔在哪里都可以一键完成。\n4. Awesome Styler，自定义背景，支持背景图片。一开始我很喜欢用它搞一些花里忽哨的背景，后来逐渐简洁了起来。目前主要用它做一些显示颜色的微调。\n5. Bullet Threading，在原版的基础上加深了当前块的结构引导线。方便定位当前块的层级，是我不能没有的东西。\n6. Tabs，使用tab展示多个页面，方便切换。是我不能没有的插件，但tab开多了显示会卡，毕竟不是官方功能。\n7. Block to page，把整块转成页面。使用频率很高，适合一些随便写写积累多了之后导出成单独页面的需求。\n8. TOC Generator，目录生成。目前会将它结合右侧Contents做成一个伪文件夹的目录形式，方便索引。\n9. Git，实现内容同步到git项目。是我的必需插件，在按照个人习惯调配好之后非常好的满足了我的同步需求。\n10. Char Spacing，盘古之白吧算是。为了美观非常有必要。\n11. Randow Notes，笔记随机漫游。在笔记很多了之后，随机漫游是一种很方便整理复习笔记的方式，压力也不会太大。还有一个同款是以块的维度漫游，个人没什么需求。\n\n# 展望\n\nlogseq目前对我来说算是很好的完成了知识收纳的目的，缓解了我的分类焦虑。但实际的知识调用、临时查阅能否满足需求，尚未进行高强度的测试（指的是OSCP考试那种现场查并粘贴复制POC的场景）。但再差也不会差到哪里去，logseq的查询功能响应还是挺快的。\n\n可能需要担忧的是从logseq整个迁移出去时，由于logseq并不完全适配md导致需要大量整理格式的问题。但好在目前没什么压力会迫使我考虑再次迁移知识库，即便logseq现在停止更新，当前内容也足够支持我做好知识管理。\n\n据说logseq或者说双链笔记的所谓“海平面下的冰山”是它的unlinked ref，也就是未引用当前page但提及了page标题的内容，意味着潜在的知识关联。虽然我已经有所了解，但它可能还需要一些插件or功能的支持（譬如一些模糊匹配、一些明显的标记、或者一种全新的漫游笔记方式），并且，也需要更好的定义page标题。\n\n至于是否推荐logseq，功能特性、测评、优缺点有很多人做了很多，不再赘述。如果是像我一样有构建知识库需求、又涉及了很多交叉领域知识的分类焦虑，那么尝试一种新的笔记方式未尝不可。","slug":"Logseq使用体验","published":1,"updated":"2023-04-07T05:32:39.478Z","_id":"clg6427t800002i4096nygxoa","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"初见\"><a href=\"#初见\" class=\"headerlink\" title=\"初见\"></a>初见</h1><p>之前一直在整理自己的知识库，在尝试过不少笔记软件之后确定了自己的需求：<strong>能自主同步到github存储、支持markdown、支持知识库结构、支持win和Linux系统、功能丰富插件市场好</strong>。</p>\n<p>当时选择的是VScode+各种插件支持的方案，在磨合过程中也逐渐形成了自己惯用的插件和自定义配置，但涉及交叉领域的笔记时仍会经常头疼如何分类、放在哪个文件夹更合适、文件夹结构如何调整、分类后如何快速找到。</p>\n<p>尽管我已经相当科学的使用了类图书馆索引的方式来构建排序我的文件夹结构，但我经常对分类情况不太满意。当然，这其实算是文件夹体系的一个共同缺陷，所以一直有在找更好的解决方案。</p>\n<p>后来接触到了<a href=\"https://github.com/logseq/logseq\">Logseq</a>，最吸引我的大概就是双链笔记号称的无压分类，以及分类细粒度更高的特点（当然它也比较完善的符合了我的需求）。</p>\n<p>到目前已经使用了2个月，也算是过了磨合期，配置和插件选择都相对稳定了下来。所以简单的来讲一讲体验。</p>\n<h1 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h1><p>Logseq对我这个一直用惯了传统文件夹体系的人来说，一开始上手还是比较迷茫的。什么是‘块’？什么又是‘页’？为什么没有文件夹和目录？如何才能直观的看到我所有的笔记、确定我之后还可以找回它的位置？</p>\n<p>而且由于Logseq的特性，原本markdown的内容直接拖进来会搞的一团糟，在翻阅各类使用说明和前人的使用方式后，我决定把以前的内容放一放，先在logseq写新笔记，用到某些旧笔记内容时再迁移内容，给自己减轻一些迁移压力。</p>\n<p>logseq的体系，与以前的不太一样，但如果不需要精细化的使用，实际上也不会做太多的改变。一开始还会纠结，几段连续的内容，到底要不要合并到同一个‘块’方便管理，后来就直接回车，一句话一‘块’都没关系，省时省力，基本也不会想要回来重新梳理合并。一开始会觉得一边记markdown的结构另一边还要关注新‘块’的缩进位置太过麻烦，后来就干脆放弃了纯md的结构，只在想要强调或者需要整理输出时简单用md装饰一下标题。而且如果实在懒，可以完全不用缩进，把所有内容都摊在第一级、把样例、注释等可能更需要隐藏起来的内容放在第二级也没关系（需要迁移的时候再去改缩进就好啦）。</p>\n<p>在写笔记的过程中，也在不断的适应着新的体系，在前人的使用习惯上做一些自己的优化。看着现在的内容逐渐增多，还是小有成就感的。</p>\n<p><img src=\"../img/Screenshot_2023-04-07_10-40-10.png\" alt=\"logseq生成的体系图\"></p>\n<h1 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h1><p>logseq本身还在Beta测试阶段，功能丰富度相对欠缺，会有一些bug时不时的冒出来（譬如我经常丢失插件的加载状态需要手动重开插件），好在开发团队和社区十分高效。对我这种热爱折腾的人来说，基本是可以接受的。</p>\n<p>顺便介绍一下我目前稳定使用的插件。</p>\n<ol>\n<li>Heading level shortcuts，快捷键设置md标题级别和格式。对频繁使用md标题的人来说还是值得一用，稍微精简了操作。</li>\n<li>Doc View Exporter， 生成HTML方便在浏览器上导出为pdf。目前在logseq中使用体验最好的导出pdf插件，美中不足的是对过长的内容生成HTML时会丢掉最下方内容，以及需要在导出前手动将所有折叠块展开，不然也无法导出被折叠的内容，希望后续官方开发团队能支持适配度更好的pdf导出和markdown导出。</li>\n<li>Todo list，全局收集所有的to-do内容。使用起来非常方便，to-do随便扔在哪里都可以一键完成。</li>\n<li>Awesome Styler，自定义背景，支持背景图片。一开始我很喜欢用它搞一些花里忽哨的背景，后来逐渐简洁了起来。目前主要用它做一些显示颜色的微调。</li>\n<li>Bullet Threading，在原版的基础上加深了当前块的结构引导线。方便定位当前块的层级，是我不能没有的东西。</li>\n<li>Tabs，使用tab展示多个页面，方便切换。是我不能没有的插件，但tab开多了显示会卡，毕竟不是官方功能。</li>\n<li>Block to page，把整块转成页面。使用频率很高，适合一些随便写写积累多了之后导出成单独页面的需求。</li>\n<li>TOC Generator，目录生成。目前会将它结合右侧Contents做成一个伪文件夹的目录形式，方便索引。</li>\n<li>Git，实现内容同步到git项目。是我的必需插件，在按照个人习惯调配好之后非常好的满足了我的同步需求。</li>\n<li>Char Spacing，盘古之白吧算是。为了美观非常有必要。</li>\n<li>Randow Notes，笔记随机漫游。在笔记很多了之后，随机漫游是一种很方便整理复习笔记的方式，压力也不会太大。还有一个同款是以块的维度漫游，个人没什么需求。</li>\n</ol>\n<h1 id=\"展望\"><a href=\"#展望\" class=\"headerlink\" title=\"展望\"></a>展望</h1><p>logseq目前对我来说算是很好的完成了知识收纳的目的，缓解了我的分类焦虑。但实际的知识调用、临时查阅能否满足需求，尚未进行高强度的测试（指的是OSCP考试那种现场查并粘贴复制POC的场景）。但再差也不会差到哪里去，logseq的查询功能响应还是挺快的。</p>\n<p>可能需要担忧的是从logseq整个迁移出去时，由于logseq并不完全适配md导致需要大量整理格式的问题。但好在目前没什么压力会迫使我考虑再次迁移知识库，即便logseq现在停止更新，当前内容也足够支持我做好知识管理。</p>\n<p>据说logseq或者说双链笔记的所谓“海平面下的冰山”是它的unlinked ref，也就是未引用当前page但提及了page标题的内容，意味着潜在的知识关联。虽然我已经有所了解，但它可能还需要一些插件or功能的支持（譬如一些模糊匹配、一些明显的标记、或者一种全新的漫游笔记方式），并且，也需要更好的定义page标题。</p>\n<p>至于是否推荐logseq，功能特性、测评、优缺点有很多人做了很多，不再赘述。如果是像我一样有构建知识库需求、又涉及了很多交叉领域知识的分类焦虑，那么尝试一种新的笔记方式未尝不可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"初见\"><a href=\"#初见\" class=\"headerlink\" title=\"初见\"></a>初见</h1><p>之前一直在整理自己的知识库，在尝试过不少笔记软件之后确定了自己的需求：<strong>能自主同步到github存储、支持markdown、支持知识库结构、支持win和Linux系统、功能丰富插件市场好</strong>。</p>\n<p>当时选择的是VScode+各种插件支持的方案，在磨合过程中也逐渐形成了自己惯用的插件和自定义配置，但涉及交叉领域的笔记时仍会经常头疼如何分类、放在哪个文件夹更合适、文件夹结构如何调整、分类后如何快速找到。</p>\n<p>尽管我已经相当科学的使用了类图书馆索引的方式来构建排序我的文件夹结构，但我经常对分类情况不太满意。当然，这其实算是文件夹体系的一个共同缺陷，所以一直有在找更好的解决方案。</p>\n<p>后来接触到了<a href=\"https://github.com/logseq/logseq\">Logseq</a>，最吸引我的大概就是双链笔记号称的无压分类，以及分类细粒度更高的特点（当然它也比较完善的符合了我的需求）。</p>\n<p>到目前已经使用了2个月，也算是过了磨合期，配置和插件选择都相对稳定了下来。所以简单的来讲一讲体验。</p>\n<h1 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h1><p>Logseq对我这个一直用惯了传统文件夹体系的人来说，一开始上手还是比较迷茫的。什么是‘块’？什么又是‘页’？为什么没有文件夹和目录？如何才能直观的看到我所有的笔记、确定我之后还可以找回它的位置？</p>\n<p>而且由于Logseq的特性，原本markdown的内容直接拖进来会搞的一团糟，在翻阅各类使用说明和前人的使用方式后，我决定把以前的内容放一放，先在logseq写新笔记，用到某些旧笔记内容时再迁移内容，给自己减轻一些迁移压力。</p>\n<p>logseq的体系，与以前的不太一样，但如果不需要精细化的使用，实际上也不会做太多的改变。一开始还会纠结，几段连续的内容，到底要不要合并到同一个‘块’方便管理，后来就直接回车，一句话一‘块’都没关系，省时省力，基本也不会想要回来重新梳理合并。一开始会觉得一边记markdown的结构另一边还要关注新‘块’的缩进位置太过麻烦，后来就干脆放弃了纯md的结构，只在想要强调或者需要整理输出时简单用md装饰一下标题。而且如果实在懒，可以完全不用缩进，把所有内容都摊在第一级、把样例、注释等可能更需要隐藏起来的内容放在第二级也没关系（需要迁移的时候再去改缩进就好啦）。</p>\n<p>在写笔记的过程中，也在不断的适应着新的体系，在前人的使用习惯上做一些自己的优化。看着现在的内容逐渐增多，还是小有成就感的。</p>\n<p><img src=\"../img/Screenshot_2023-04-07_10-40-10.png\" alt=\"logseq生成的体系图\"></p>\n<h1 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h1><p>logseq本身还在Beta测试阶段，功能丰富度相对欠缺，会有一些bug时不时的冒出来（譬如我经常丢失插件的加载状态需要手动重开插件），好在开发团队和社区十分高效。对我这种热爱折腾的人来说，基本是可以接受的。</p>\n<p>顺便介绍一下我目前稳定使用的插件。</p>\n<ol>\n<li>Heading level shortcuts，快捷键设置md标题级别和格式。对频繁使用md标题的人来说还是值得一用，稍微精简了操作。</li>\n<li>Doc View Exporter， 生成HTML方便在浏览器上导出为pdf。目前在logseq中使用体验最好的导出pdf插件，美中不足的是对过长的内容生成HTML时会丢掉最下方内容，以及需要在导出前手动将所有折叠块展开，不然也无法导出被折叠的内容，希望后续官方开发团队能支持适配度更好的pdf导出和markdown导出。</li>\n<li>Todo list，全局收集所有的to-do内容。使用起来非常方便，to-do随便扔在哪里都可以一键完成。</li>\n<li>Awesome Styler，自定义背景，支持背景图片。一开始我很喜欢用它搞一些花里忽哨的背景，后来逐渐简洁了起来。目前主要用它做一些显示颜色的微调。</li>\n<li>Bullet Threading，在原版的基础上加深了当前块的结构引导线。方便定位当前块的层级，是我不能没有的东西。</li>\n<li>Tabs，使用tab展示多个页面，方便切换。是我不能没有的插件，但tab开多了显示会卡，毕竟不是官方功能。</li>\n<li>Block to page，把整块转成页面。使用频率很高，适合一些随便写写积累多了之后导出成单独页面的需求。</li>\n<li>TOC Generator，目录生成。目前会将它结合右侧Contents做成一个伪文件夹的目录形式，方便索引。</li>\n<li>Git，实现内容同步到git项目。是我的必需插件，在按照个人习惯调配好之后非常好的满足了我的同步需求。</li>\n<li>Char Spacing，盘古之白吧算是。为了美观非常有必要。</li>\n<li>Randow Notes，笔记随机漫游。在笔记很多了之后，随机漫游是一种很方便整理复习笔记的方式，压力也不会太大。还有一个同款是以块的维度漫游，个人没什么需求。</li>\n</ol>\n<h1 id=\"展望\"><a href=\"#展望\" class=\"headerlink\" title=\"展望\"></a>展望</h1><p>logseq目前对我来说算是很好的完成了知识收纳的目的，缓解了我的分类焦虑。但实际的知识调用、临时查阅能否满足需求，尚未进行高强度的测试（指的是OSCP考试那种现场查并粘贴复制POC的场景）。但再差也不会差到哪里去，logseq的查询功能响应还是挺快的。</p>\n<p>可能需要担忧的是从logseq整个迁移出去时，由于logseq并不完全适配md导致需要大量整理格式的问题。但好在目前没什么压力会迫使我考虑再次迁移知识库，即便logseq现在停止更新，当前内容也足够支持我做好知识管理。</p>\n<p>据说logseq或者说双链笔记的所谓“海平面下的冰山”是它的unlinked ref，也就是未引用当前page但提及了page标题的内容，意味着潜在的知识关联。虽然我已经有所了解，但它可能还需要一些插件or功能的支持（譬如一些模糊匹配、一些明显的标记、或者一种全新的漫游笔记方式），并且，也需要更好的定义page标题。</p>\n<p>至于是否推荐logseq，功能特性、测评、优缺点有很多人做了很多，不再赘述。如果是像我一样有构建知识库需求、又涉及了很多交叉领域知识的分类焦虑，那么尝试一种新的笔记方式未尝不可。</p>\n"},{"title":"验证码爆破-xp_CAPTCHA挖洞体验","toc":true,"date":"2023-05-15T07:47:41.000Z","_content":"\n最近在挖生产环境的漏洞，试用了一下xp_CAPTCHA的白嫖版和付费API版，体验其实都挺好的，样本太少就不对比识别准确性了。主要写写安装和使用步骤以及踩过的坑和相应处理方式。\n\n# 安装踩坑（xp_CAPTCHA白嫖版）\n\n我是java 11.0.13以及python 3.10.7, jar包直接装的java8编译版本无报错通过，但server.py（release里面有）依赖的`onnxruntime`不支持3.10，所以这里没有办法，下载了作者的打包版，在win机器使用虚拟py 3.6启动（这里也给后面带来了一个小坑，会解释的），作者的打包版见[项目readme](https://github.com/smxiazi/NEW_xp_CAPTCHA)下方网盘链接。\n\n下载下来之后解压双击.bat文件就可以启动了，任何需要修改的，进Python36文件夹编辑server.py。\n\n因为我尝试爆破的也是一个POST请求，所以主要的操作方式是参照这个[链接](https://mp.weixin.qq.com/s/iA9XEuoTyjOAxSDoIJsm5Q)。\n\n这里踩了一些坑：\n\n1. 80端口被系统占用：解决方法参考[链接](https://blog.csdn.net/weixin_41377835/article/details/112302893),(这里也可以选择改成别的端口)\n2. Python requests库报错SSLError: dh key to small()：解决方法参考[链接](https://blog.csdn.net/weixin_47383889/article/details/125019751)，因为我使用的是作者打包的py3.6，所以采用第二种方法，加入语句`requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS = 'DEFAULT:@SECLEVEL=1'`降级。\n\n所以我最终使用的test脚本是这样的：\n\n```\n#coding:utf-8\nfrom flask import Flask\nimport requests\nrequests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS = 'DEFAULT:@SECLEVEL=1'\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef get_captcha():\n  burp0_url = \"https://xxx/getVerificationCode\"\n  burp0_headers = {\"Cookie\":\"xxxxx\",\"Sec-Ch-Ua\": \"\\\" Not A;Brand\\\";v=\\\"99\\\", \\\"Chromium\\\";v=\\\"99\\\", \\\"Google Chrome\\\";v=\\\"99\\\"\", \"Accept\": \"application/json, text/plain, */*\", \"Sec-Ch-Ua-Mobile\": \"?0\", \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36\", \"Sec-Ch-Ua-Platform\": \"\\\"Windows\\\"\",\"Sec-Fetch-Site\": \"cross-site\", \"Sec-Fetch-Mode\": \"cors\", \"Sec-Fetch-Dest\": \"empty\", \"Accept-Encoding\": \"gzip, deflate\", \"Accept-Language\": \"zh-CN,zh;q=0.9\", \"Connection\": \"close\"}\n  requ = requests.post(burp0_url, headers=burp0_headers, verify = False)\n  print(requ.text)\n  return requ.text\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=6666, debug=True)\n```\n\n# 使用踩坑\n\n这里踩坑主要是对抗资产本身的一些校验机制，譬如我遇到的是请求验证码的Cookie（放在test.py的header里）要和请求登录的包内cookie保持一致，不然可以识别到验证码但请求登录时还是提示验证码错误。\n\n高级用法同样参考上述[这个链接](https://mp.weixin.qq.com/s/iA9XEuoTyjOAxSDoIJsm5Q)和作者的readme后半部分高级用法指引。","source":"_posts/验证码爆破-xp-CAPTCHA挖洞体验.md","raw":"---\ntitle: 验证码爆破-xp_CAPTCHA挖洞体验\ntoc: true\ndate: 2023-05-15 15:47:41\ntags: [WP]\ncategories: [学习笔记]\n---\n\n最近在挖生产环境的漏洞，试用了一下xp_CAPTCHA的白嫖版和付费API版，体验其实都挺好的，样本太少就不对比识别准确性了。主要写写安装和使用步骤以及踩过的坑和相应处理方式。\n\n# 安装踩坑（xp_CAPTCHA白嫖版）\n\n我是java 11.0.13以及python 3.10.7, jar包直接装的java8编译版本无报错通过，但server.py（release里面有）依赖的`onnxruntime`不支持3.10，所以这里没有办法，下载了作者的打包版，在win机器使用虚拟py 3.6启动（这里也给后面带来了一个小坑，会解释的），作者的打包版见[项目readme](https://github.com/smxiazi/NEW_xp_CAPTCHA)下方网盘链接。\n\n下载下来之后解压双击.bat文件就可以启动了，任何需要修改的，进Python36文件夹编辑server.py。\n\n因为我尝试爆破的也是一个POST请求，所以主要的操作方式是参照这个[链接](https://mp.weixin.qq.com/s/iA9XEuoTyjOAxSDoIJsm5Q)。\n\n这里踩了一些坑：\n\n1. 80端口被系统占用：解决方法参考[链接](https://blog.csdn.net/weixin_41377835/article/details/112302893),(这里也可以选择改成别的端口)\n2. Python requests库报错SSLError: dh key to small()：解决方法参考[链接](https://blog.csdn.net/weixin_47383889/article/details/125019751)，因为我使用的是作者打包的py3.6，所以采用第二种方法，加入语句`requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS = 'DEFAULT:@SECLEVEL=1'`降级。\n\n所以我最终使用的test脚本是这样的：\n\n```\n#coding:utf-8\nfrom flask import Flask\nimport requests\nrequests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS = 'DEFAULT:@SECLEVEL=1'\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef get_captcha():\n  burp0_url = \"https://xxx/getVerificationCode\"\n  burp0_headers = {\"Cookie\":\"xxxxx\",\"Sec-Ch-Ua\": \"\\\" Not A;Brand\\\";v=\\\"99\\\", \\\"Chromium\\\";v=\\\"99\\\", \\\"Google Chrome\\\";v=\\\"99\\\"\", \"Accept\": \"application/json, text/plain, */*\", \"Sec-Ch-Ua-Mobile\": \"?0\", \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36\", \"Sec-Ch-Ua-Platform\": \"\\\"Windows\\\"\",\"Sec-Fetch-Site\": \"cross-site\", \"Sec-Fetch-Mode\": \"cors\", \"Sec-Fetch-Dest\": \"empty\", \"Accept-Encoding\": \"gzip, deflate\", \"Accept-Language\": \"zh-CN,zh;q=0.9\", \"Connection\": \"close\"}\n  requ = requests.post(burp0_url, headers=burp0_headers, verify = False)\n  print(requ.text)\n  return requ.text\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=6666, debug=True)\n```\n\n# 使用踩坑\n\n这里踩坑主要是对抗资产本身的一些校验机制，譬如我遇到的是请求验证码的Cookie（放在test.py的header里）要和请求登录的包内cookie保持一致，不然可以识别到验证码但请求登录时还是提示验证码错误。\n\n高级用法同样参考上述[这个链接](https://mp.weixin.qq.com/s/iA9XEuoTyjOAxSDoIJsm5Q)和作者的readme后半部分高级用法指引。","slug":"验证码爆破-xp-CAPTCHA挖洞体验","published":1,"updated":"2023-05-15T10:45:18.700Z","_id":"clhomtgm60000ym402y3khf27","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近在挖生产环境的漏洞，试用了一下xp_CAPTCHA的白嫖版和付费API版，体验其实都挺好的，样本太少就不对比识别准确性了。主要写写安装和使用步骤以及踩过的坑和相应处理方式。</p>\n<h1 id=\"安装踩坑（xp-CAPTCHA白嫖版）\"><a href=\"#安装踩坑（xp-CAPTCHA白嫖版）\" class=\"headerlink\" title=\"安装踩坑（xp_CAPTCHA白嫖版）\"></a>安装踩坑（xp_CAPTCHA白嫖版）</h1><p>我是java 11.0.13以及python 3.10.7, jar包直接装的java8编译版本无报错通过，但server.py（release里面有）依赖的<code>onnxruntime</code>不支持3.10，所以这里没有办法，下载了作者的打包版，在win机器使用虚拟py 3.6启动（这里也给后面带来了一个小坑，会解释的），作者的打包版见<a href=\"https://github.com/smxiazi/NEW_xp_CAPTCHA\">项目readme</a>下方网盘链接。</p>\n<p>下载下来之后解压双击.bat文件就可以启动了，任何需要修改的，进Python36文件夹编辑server.py。</p>\n<p>因为我尝试爆破的也是一个POST请求，所以主要的操作方式是参照这个<a href=\"https://mp.weixin.qq.com/s/iA9XEuoTyjOAxSDoIJsm5Q\">链接</a>。</p>\n<p>这里踩了一些坑：</p>\n<ol>\n<li>80端口被系统占用：解决方法参考<a href=\"https://blog.csdn.net/weixin_41377835/article/details/112302893\">链接</a>,(这里也可以选择改成别的端口)</li>\n<li>Python requests库报错SSLError: dh key to small()：解决方法参考<a href=\"https://blog.csdn.net/weixin_47383889/article/details/125019751\">链接</a>，因为我使用的是作者打包的py3.6，所以采用第二种方法，加入语句<code>requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS = &#39;DEFAULT:@SECLEVEL=1&#39;</code>降级。</li>\n</ol>\n<p>所以我最终使用的test脚本是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding:utf-8</span><br><span class=\"line\">from flask import Flask</span><br><span class=\"line\">import requests</span><br><span class=\"line\">requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS &#x3D; &#39;DEFAULT:@SECLEVEL&#x3D;1&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">app &#x3D; Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&quot;&#x2F;&quot;)</span><br><span class=\"line\">def get_captcha():</span><br><span class=\"line\">  burp0_url &#x3D; &quot;https:&#x2F;&#x2F;xxx&#x2F;getVerificationCode&quot;</span><br><span class=\"line\">  burp0_headers &#x3D; &#123;&quot;Cookie&quot;:&quot;xxxxx&quot;,&quot;Sec-Ch-Ua&quot;: &quot;\\&quot; Not A;Brand\\&quot;;v&#x3D;\\&quot;99\\&quot;, \\&quot;Chromium\\&quot;;v&#x3D;\\&quot;99\\&quot;, \\&quot;Google Chrome\\&quot;;v&#x3D;\\&quot;99\\&quot;&quot;, &quot;Accept&quot;: &quot;application&#x2F;json, text&#x2F;plain, *&#x2F;*&quot;, &quot;Sec-Ch-Ua-Mobile&quot;: &quot;?0&quot;, &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;99.0.4844.51 Safari&#x2F;537.36&quot;, &quot;Sec-Ch-Ua-Platform&quot;: &quot;\\&quot;Windows\\&quot;&quot;,&quot;Sec-Fetch-Site&quot;: &quot;cross-site&quot;, &quot;Sec-Fetch-Mode&quot;: &quot;cors&quot;, &quot;Sec-Fetch-Dest&quot;: &quot;empty&quot;, &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, &quot;Accept-Language&quot;: &quot;zh-CN,zh;q&#x3D;0.9&quot;, &quot;Connection&quot;: &quot;close&quot;&#125;</span><br><span class=\"line\">  requ &#x3D; requests.post(burp0_url, headers&#x3D;burp0_headers, verify &#x3D; False)</span><br><span class=\"line\">  print(requ.text)</span><br><span class=\"line\">  return requ.text</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    app.run(host&#x3D;&#39;0.0.0.0&#39;, port&#x3D;6666, debug&#x3D;True)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用踩坑\"><a href=\"#使用踩坑\" class=\"headerlink\" title=\"使用踩坑\"></a>使用踩坑</h1><p>这里踩坑主要是对抗资产本身的一些校验机制，譬如我遇到的是请求验证码的Cookie（放在test.py的header里）要和请求登录的包内cookie保持一致，不然可以识别到验证码但请求登录时还是提示验证码错误。</p>\n<p>高级用法同样参考上述<a href=\"https://mp.weixin.qq.com/s/iA9XEuoTyjOAxSDoIJsm5Q\">这个链接</a>和作者的readme后半部分高级用法指引。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在挖生产环境的漏洞，试用了一下xp_CAPTCHA的白嫖版和付费API版，体验其实都挺好的，样本太少就不对比识别准确性了。主要写写安装和使用步骤以及踩过的坑和相应处理方式。</p>\n<h1 id=\"安装踩坑（xp-CAPTCHA白嫖版）\"><a href=\"#安装踩坑（xp-CAPTCHA白嫖版）\" class=\"headerlink\" title=\"安装踩坑（xp_CAPTCHA白嫖版）\"></a>安装踩坑（xp_CAPTCHA白嫖版）</h1><p>我是java 11.0.13以及python 3.10.7, jar包直接装的java8编译版本无报错通过，但server.py（release里面有）依赖的<code>onnxruntime</code>不支持3.10，所以这里没有办法，下载了作者的打包版，在win机器使用虚拟py 3.6启动（这里也给后面带来了一个小坑，会解释的），作者的打包版见<a href=\"https://github.com/smxiazi/NEW_xp_CAPTCHA\">项目readme</a>下方网盘链接。</p>\n<p>下载下来之后解压双击.bat文件就可以启动了，任何需要修改的，进Python36文件夹编辑server.py。</p>\n<p>因为我尝试爆破的也是一个POST请求，所以主要的操作方式是参照这个<a href=\"https://mp.weixin.qq.com/s/iA9XEuoTyjOAxSDoIJsm5Q\">链接</a>。</p>\n<p>这里踩了一些坑：</p>\n<ol>\n<li>80端口被系统占用：解决方法参考<a href=\"https://blog.csdn.net/weixin_41377835/article/details/112302893\">链接</a>,(这里也可以选择改成别的端口)</li>\n<li>Python requests库报错SSLError: dh key to small()：解决方法参考<a href=\"https://blog.csdn.net/weixin_47383889/article/details/125019751\">链接</a>，因为我使用的是作者打包的py3.6，所以采用第二种方法，加入语句<code>requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS = &#39;DEFAULT:@SECLEVEL=1&#39;</code>降级。</li>\n</ol>\n<p>所以我最终使用的test脚本是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding:utf-8</span><br><span class=\"line\">from flask import Flask</span><br><span class=\"line\">import requests</span><br><span class=\"line\">requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS &#x3D; &#39;DEFAULT:@SECLEVEL&#x3D;1&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">app &#x3D; Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&quot;&#x2F;&quot;)</span><br><span class=\"line\">def get_captcha():</span><br><span class=\"line\">  burp0_url &#x3D; &quot;https:&#x2F;&#x2F;xxx&#x2F;getVerificationCode&quot;</span><br><span class=\"line\">  burp0_headers &#x3D; &#123;&quot;Cookie&quot;:&quot;xxxxx&quot;,&quot;Sec-Ch-Ua&quot;: &quot;\\&quot; Not A;Brand\\&quot;;v&#x3D;\\&quot;99\\&quot;, \\&quot;Chromium\\&quot;;v&#x3D;\\&quot;99\\&quot;, \\&quot;Google Chrome\\&quot;;v&#x3D;\\&quot;99\\&quot;&quot;, &quot;Accept&quot;: &quot;application&#x2F;json, text&#x2F;plain, *&#x2F;*&quot;, &quot;Sec-Ch-Ua-Mobile&quot;: &quot;?0&quot;, &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;99.0.4844.51 Safari&#x2F;537.36&quot;, &quot;Sec-Ch-Ua-Platform&quot;: &quot;\\&quot;Windows\\&quot;&quot;,&quot;Sec-Fetch-Site&quot;: &quot;cross-site&quot;, &quot;Sec-Fetch-Mode&quot;: &quot;cors&quot;, &quot;Sec-Fetch-Dest&quot;: &quot;empty&quot;, &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, &quot;Accept-Language&quot;: &quot;zh-CN,zh;q&#x3D;0.9&quot;, &quot;Connection&quot;: &quot;close&quot;&#125;</span><br><span class=\"line\">  requ &#x3D; requests.post(burp0_url, headers&#x3D;burp0_headers, verify &#x3D; False)</span><br><span class=\"line\">  print(requ.text)</span><br><span class=\"line\">  return requ.text</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    app.run(host&#x3D;&#39;0.0.0.0&#39;, port&#x3D;6666, debug&#x3D;True)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用踩坑\"><a href=\"#使用踩坑\" class=\"headerlink\" title=\"使用踩坑\"></a>使用踩坑</h1><p>这里踩坑主要是对抗资产本身的一些校验机制，譬如我遇到的是请求验证码的Cookie（放在test.py的header里）要和请求登录的包内cookie保持一致，不然可以识别到验证码但请求登录时还是提示验证码错误。</p>\n<p>高级用法同样参考上述<a href=\"https://mp.weixin.qq.com/s/iA9XEuoTyjOAxSDoIJsm5Q\">这个链接</a>和作者的readme后半部分高级用法指引。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clecfhfz60003x94028v10njw","category_id":"clecfqjo10000xs401p8n5x8j","_id":"clecfqjo90003xs40h5g22iw3"},{"post_id":"clecfhfzd0006x940e14j8jyv","category_id":"clecfwbe70004xs4096wggr7j","_id":"clecfwbed0007xs40406l583w"},{"post_id":"clecfhfyy0001x94037dn0b1n","category_id":"clecfwvab0008xs40ftk59h28","_id":"clecfwvaf000bxs40d1smc071"},{"post_id":"clecfhg0m0013x940axti8mlb","category_id":"clecfwvab0008xs40ftk59h28","_id":"clecfx7x2000dxs402krj1v5g"},{"post_id":"clecfhg0n0014x9406gadhqyi","category_id":"clecfwvab0008xs40ftk59h28","_id":"clecfxmug000fxs407xo1hlnb"},{"post_id":"clecfhg13001ix94055gohc19","category_id":"clecfwvab0008xs40ftk59h28","_id":"clecfxztj000hxs406fmn3iq3"},{"post_id":"clecfhfzg0007x940etxa4s4v","category_id":"clecfwbe70004xs4096wggr7j","_id":"clecfydnu000jxs40e6na5fmz"},{"post_id":"clecfhfzj0008x940eqv0f7xl","category_id":"clecfz54m000kxs40hmyu6ito","_id":"clecfz54o000mxs40cnni9kqm"},{"post_id":"clecfhfzo000bx940hrb79cg7","category_id":"clecfqjo10000xs401p8n5x8j","_id":"clecfzy2q000oxs40cs3ufc8u"},{"post_id":"clecfhfzq000cx9401hnc656m","category_id":"clecfz54m000kxs40hmyu6ito","_id":"clecg0hzo000qxs40d6rgavdk"},{"post_id":"clfl3628b0000eo400kra1f2a","category_id":"clecfz54m000kxs40hmyu6ito","_id":"clfl3628s0002eo400376a9dd"},{"post_id":"clfqokc5z0000xy40ftygfwi1","category_id":"clecfz54m000kxs40hmyu6ito","_id":"clfqokc6h0002xy400c0o0ee9"},{"post_id":"clg6427t800002i4096nygxoa","category_id":"clecfz54m000kxs40hmyu6ito","_id":"clg6427ts00022i4029ske94e"},{"post_id":"clhomtgm60000ym402y3khf27","category_id":"clecfz54m000kxs40hmyu6ito","_id":"clhomtgmm0002ym406aphgoeg"}],"PostTag":[{"post_id":"clecfhfz60003x94028v10njw","tag_id":"clecfqjo60001xs40eke8f9pm","_id":"clecfqjo90002xs405h2vb7yp"},{"post_id":"clecfhfzd0006x940e14j8jyv","tag_id":"clecfwbeb0005xs40cwtw7vd6","_id":"clecfwbec0006xs40c7xmcyma"},{"post_id":"clecfhfzg0007x940etxa4s4v","tag_id":"clecfwbeb0005xs40cwtw7vd6","_id":"clecfydnu000ixs403i5bdpnw"},{"post_id":"clecfhfzo000bx940hrb79cg7","tag_id":"clecfqjo60001xs40eke8f9pm","_id":"clecfzy2q000nxs40cjo12xth"},{"post_id":"clecfhfzq000cx9401hnc656m","tag_id":"clecg0t9d000rxs40hy8z9r8n","_id":"clecg0t9e000sxs40017f0vi9"},{"post_id":"clecfhfzj0008x940eqv0f7xl","tag_id":"clecg12f7000txs405tkndtqb","_id":"clecg12f8000uxs40h8c1hmzm"},{"post_id":"clecfhg13001ix94055gohc19","tag_id":"clecg0t9d000rxs40hy8z9r8n","_id":"clecg1dhu000vxs4080jq5qkv"},{"post_id":"clecfhg0n0014x9406gadhqyi","tag_id":"clecg12f7000txs405tkndtqb","_id":"clecg1q5w000wxs40bh938nef"},{"post_id":"clecfhg0m0013x940axti8mlb","tag_id":"clecg1xuf000xxs40btgwat52","_id":"clecg1xug000yxs405o234tk4"},{"post_id":"clecfhfyy0001x94037dn0b1n","tag_id":"clecg0t9d000rxs40hy8z9r8n","_id":"clecg257m000zxs402c6d838e"},{"post_id":"clfl3628b0000eo400kra1f2a","tag_id":"clfl3628l0001eo403qyyduvn","_id":"clfl3628t0003eo405w9sb6fu"},{"post_id":"clfl3628b0000eo400kra1f2a","tag_id":"clecfwvac0009xs403kh1ac91","_id":"clfl3628t0004eo406zl147i2"},{"post_id":"clfqokc5z0000xy40ftygfwi1","tag_id":"clfqokc690001xy40aw4w6kri","_id":"clfqokc6i0003xy405joi71w3"},{"post_id":"clg6427t800002i4096nygxoa","tag_id":"clg6427tj00012i40022902nd","_id":"clg6427tt00032i40f77g1nzi"},{"post_id":"clhomtgm60000ym402y3khf27","tag_id":"clhomtgmb0001ym4043m1g03v","_id":"clhomtgmn0003ym405mzld0xj"}],"Tag":[{"name":"踩坑记录","_id":"clecfhfzm000ax940h6kgcg20"},{"name":"Summary","_id":"clecfhfzv000ex9403s6i8ri0"},{"name":"靶场","_id":"clecfhfzy000jx940f77pehun"},{"name":"Notes, CTF","_id":"clecfhg0p0015x9409l8dfak3"},{"name":"Notes","_id":"clecfhg0s0017x940as7994o5"},{"name":"随便叨叨","_id":"clecfqjo60001xs40eke8f9pm"},{"name":"踩坑","_id":"clecfwbeb0005xs40cwtw7vd6"},{"name":"笔记","_id":"clecfwvac0009xs403kh1ac91"},{"name":"代码审计","_id":"clecg0t9d000rxs40hy8z9r8n"},{"name":"渗透测试","_id":"clecg12f7000txs405tkndtqb"},{"name":"CTF","_id":"clecg1xuf000xxs40btgwat52"},{"name":"云原生","_id":"clfl3628l0001eo403qyyduvn"},{"name":"Chatgpt","_id":"clfqokc690001xy40aw4w6kri"},{"name":"工具","_id":"clg6427tj00012i40022902nd"},{"name":"WP","_id":"clhomtgmb0001ym4043m1g03v"}]}}